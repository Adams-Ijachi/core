{"version":3,"sources":["webpack://@flarum/core/./src/common/components/TextEditor.js"],"names":["TextEditor","oninit","vnode","this","value","attrs","disabled","view","className","listItems","controlItems","toArray","toolbarItems","oncreate","composer","editor","buildEditor","$","onupdate","newDisabled","buildEditorParams","classNames","placeholder","oninput","bind","inputListeners","onsubmit","m","redraw","dom","BasicEditorDriver","items","ItemList","add","Button","icon","itemClassName","onclick","submitLabel","preview","title","app","translator","trans","tooltip","onchange","Component"],"mappings":"uMAoBqBA,E,sGACnBC,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAObC,KAAKC,MAAQD,KAAKE,MAAMD,OAAS,GAKjCD,KAAKG,WAAaH,KAAKE,MAAMC,U,EAG/BC,KAAA,WACE,OACE,SAAKC,UAAU,cACb,SAAKA,UAAU,+BAEf,QAAIA,UAAU,wCACXC,OAAUN,KAAKO,eAAeC,WAC/B,QAAIH,UAAU,sBAAsBL,KAAKS,eAAeD,c,EAMhEE,SAAA,SAASX,GACP,YAAMW,SAAN,UAAeX,GAEfC,KAAKE,MAAMS,SAASC,OAASZ,KAAKa,YAAYb,KAAKc,EAAE,+BAA+B,K,EAGtFC,SAAA,WACE,IAAMC,IAAgBhB,KAAKE,MAAMC,SAE7BH,KAAKG,WAAaa,IACpBhB,KAAKG,SAAWa,EAChBhB,KAAKE,MAAMS,SAASC,OAAOT,SAASa,K,EAIxCC,kBAAA,WAAoB,WAClB,MAAO,CACLC,WAAY,CAAC,cAAe,oBAAqB,qBACjDf,SAAUH,KAAKG,SACfgB,YAAanB,KAAKE,MAAMiB,aAAe,GACvClB,MAAOD,KAAKC,MACZmB,QAASpB,KAAKoB,QAAQC,KAAKrB,MAC3BsB,eAAgB,GAChBC,SAAU,WACR,EAAKA,WACLC,EAAEC,Y,EAKRZ,YAAA,SAAYa,GACV,OAAO,IAAIC,IAAkBD,EAAK1B,KAAKiB,sB,EAQzCV,aAAA,WACE,IAAMqB,EAAQ,IAAIC,IA4BlB,OA1BAD,EAAME,IACJ,SACAC,cACE,CACEC,KAAM,qBACN3B,UAAW,yBACX4B,cAAe,qBACfC,QAASlC,KAAKuB,SAASF,KAAKrB,OAE9BA,KAAKE,MAAMiC,cAIXnC,KAAKE,MAAMkC,SACbR,EAAME,IACJ,UACAC,cAAiB,CACfC,KAAM,aACN3B,UAAW,sBACX6B,QAASlC,KAAKE,MAAMkC,QACpBC,MAAOC,IAAIC,WAAWC,MAAM,uCAC5B9B,SAAU,SAACX,GAAD,OAAWe,EAAEf,EAAM2B,KAAKe,cAKjCb,G,EAQTnB,aAAA,WACE,OAAO,IAAIoB,K,EAQbT,QAAA,SAAQnB,GACND,KAAKC,MAAQA,EAEbD,KAAKE,MAAMwC,SAAS1C,KAAKC,Q,EAM3BsB,SAAA,WACEvB,KAAKE,MAAMqB,SAASvB,KAAKC,Q,GA7HW0C","file":"common/components/TextEditor.js","sourcesContent":["import Component from '../Component';\nimport ItemList from '../utils/ItemList';\nimport listItems from '../helpers/listItems';\nimport Button from './Button';\n\nimport BasicEditorDriver from '../utils/BasicEditorDriver';\n\n/**\n * The `TextEditor` component displays a textarea with controls, including a\n * submit button.\n *\n * ### Attrs\n *\n * - `composer`\n * - `submitLabel`\n * - `value`\n * - `placeholder`\n * - `disabled`\n * - `preview`\n */\nexport default class TextEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The value of the editor.\n     *\n     * @type {String}\n     */\n    this.value = this.attrs.value || '';\n\n    /**\n     * Whether the editor is disabled.\n     */\n    this.disabled = !!this.attrs.disabled;\n  }\n\n  view() {\n    return (\n      <div className=\"TextEditor\">\n        <div className=\"TextEditor-editorContainer\"></div>\n\n        <ul className=\"TextEditor-controls Composer-footer\">\n          {listItems(this.controlItems().toArray())}\n          <li className=\"TextEditor-toolbar\">{this.toolbarItems().toArray()}</li>\n        </ul>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.attrs.composer.editor = this.buildEditor(this.$('.TextEditor-editorContainer')[0]);\n  }\n\n  onupdate() {\n    const newDisabled = !!this.attrs.disabled;\n\n    if (this.disabled !== newDisabled) {\n      this.disabled = newDisabled;\n      this.attrs.composer.editor.disabled(newDisabled);\n    }\n  }\n\n  buildEditorParams() {\n    return {\n      classNames: ['FormControl', 'Composer-flexible', 'TextEditor-editor'],\n      disabled: this.disabled,\n      placeholder: this.attrs.placeholder || '',\n      value: this.value,\n      oninput: this.oninput.bind(this),\n      inputListeners: [],\n      onsubmit: () => {\n        this.onsubmit();\n        m.redraw();\n      },\n    };\n  }\n\n  buildEditor(dom) {\n    return new BasicEditorDriver(dom, this.buildEditorParams());\n  }\n\n  /**\n   * Build an item list for the text editor controls.\n   *\n   * @return {ItemList}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'submit',\n      Button.component(\n        {\n          icon: 'fas fa-paper-plane',\n          className: 'Button Button--primary',\n          itemClassName: 'App-primaryControl',\n          onclick: this.onsubmit.bind(this),\n        },\n        this.attrs.submitLabel\n      )\n    );\n\n    if (this.attrs.preview) {\n      items.add(\n        'preview',\n        Button.component({\n          icon: 'far fa-eye',\n          className: 'Button Button--icon',\n          onclick: this.attrs.preview,\n          title: app.translator.trans('core.forum.composer.preview_tooltip'),\n          oncreate: (vnode) => $(vnode.dom).tooltip(),\n        })\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the toolbar controls.\n   *\n   * @return {ItemList}\n   */\n  toolbarItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle input into the textarea.\n   *\n   * @param {String} value\n   */\n  oninput(value) {\n    this.value = value;\n\n    this.attrs.onchange(this.value);\n  }\n\n  /**\n   * Handle the submit button being clicked.\n   */\n  onsubmit() {\n    this.attrs.onsubmit(this.value);\n  }\n}\n"],"sourceRoot":""}