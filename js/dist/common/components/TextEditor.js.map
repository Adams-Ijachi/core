{"version":3,"sources":["webpack://@flarum/core/./src/common/utils/BasicEditorDriver.ts","webpack://@flarum/core/./src/common/components/TextEditor.js","webpack://@flarum/core/./node_modules/textarea-caret/index.js"],"names":["BasicEditorDriver","dom","params","this","el","document","createElement","build","className","classNames","join","disabled","placeholder","value","callInputListeners","e","inputListeners","forEach","listener","redraw","oninput","onclick","onkeyup","addEventListener","metaKey","ctrlKey","key","onsubmit","append","setValue","$","val","trigger","dispatchEvent","CustomEvent","bubbles","cancelable","moveCursorTo","position","setSelectionRange","getSelectionRange","selectionStart","selectionEnd","getLastNChars","n","slice","Math","max","insertAtCursor","text","insertAt","pos","insertBetween","start","end","before","after","length","replaceBeforeCursor","focus","getCaretCoordinates","relCoords","top","scrollTop","left","destroy","remove","window","flreg","add","TextEditor","oninit","vnode","attrs","view","listItems","controlItems","toArray","toolbarItems","oncreate","composer","editor","buildEditor","onupdate","newDisabled","buildEditorParams","bind","m","items","ItemList","Button","icon","itemClassName","submitLabel","preview","title","app","translator","trans","tooltip","onchange","Component","properties","isBrowser","isFirefox","mozInnerScreenX","element","options","Error","debug","querySelector","parentNode","removeChild","div","id","body","appendChild","style","computed","getComputedStyle","currentStyle","isInput","nodeName","whiteSpace","wordWrap","visibility","prop","lineHeight","height","scrollHeight","parseInt","overflowY","overflow","textContent","substring","replace","span","coordinates","offsetTop","offsetLeft","backgroundColor","module","exports"],"mappings":"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","file":"common/components/TextEditor.js","sourcesContent":["import getCaretCoordinates from 'textarea-caret';\nimport EditorDriverInterface, { EditorDriverParams } from './EditorDriverInterface';\n\nexport default class BasicEditorDriver implements EditorDriverInterface {\n  el: HTMLTextAreaElement;\n\n  constructor(dom: HTMLElement, params: EditorDriverParams) {\n    this.el = document.createElement('textarea');\n\n    this.build(dom, params);\n  }\n\n  build(dom: HTMLElement, params: EditorDriverParams) {\n    this.el.className = params.classNames.join(' ');\n    this.el.disabled = params.disabled;\n    this.el.placeholder = params.placeholder;\n    this.el.value = params.value;\n\n    const callInputListeners = (e) => {\n      params.inputListeners.forEach((listener) => {\n        listener();\n      });\n\n      e.redraw = false;\n    };\n\n    this.el.oninput = (e) => {\n      params.oninput(this.el.value);\n      callInputListeners(e);\n    };\n\n    this.el.onclick = callInputListeners;\n    this.el.onkeyup = callInputListeners;\n\n    this.el.addEventListener('keydown', function (e) {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'Enter') {\n        params.onsubmit();\n      }\n    });\n\n    dom.append(this.el);\n  }\n\n  protected setValue(value: string) {\n    $(this.el).val(value).trigger('input');\n\n    this.el.dispatchEvent(new CustomEvent('input', { bubbles: true, cancelable: true }));\n  }\n\n  moveCursorTo(position: number) {\n    this.setSelectionRange(position, position);\n  }\n\n  getSelectionRange(): Array<number> {\n    return [this.el.selectionStart, this.el.selectionEnd];\n  }\n\n  getLastNChars(n: number): string {\n    const value = this.el.value;\n\n    return value.slice(Math.max(0, this.el.selectionStart - n), this.el.selectionStart);\n  }\n\n  insertAtCursor(text: string) {\n    this.insertAt(this.el.selectionStart, text);\n  }\n\n  insertAt(pos: number, text: string) {\n    this.insertBetween(pos, pos, text);\n  }\n\n  insertBetween(start: number, end: number, text: string) {\n    const value = this.el.value;\n\n    const before = value.slice(0, start);\n    const after = value.slice(end);\n\n    this.setValue(`${before}${text}${after}`);\n\n    // Move the textarea cursor to the end of the content we just inserted.\n    this.moveCursorTo(start + text.length);\n  }\n\n  replaceBeforeCursor(start: number, text: string) {\n    this.insertBetween(start, this.el.selectionStart, text);\n  }\n\n  protected setSelectionRange(start: number, end: number) {\n    this.el.setSelectionRange(start, end);\n    this.focus();\n  }\n\n  getCaretCoordinates(position: number) {\n    const relCoords = getCaretCoordinates(this.el, position);\n\n    return {\n      top: relCoords.top - this.el.scrollTop,\n      left: relCoords.left,\n    };\n  }\n\n  // DOM Interactions\n\n  /**\n   * Set the disabled status of the editor.\n   */\n  disabled(disabled: boolean) {\n    this.el.disabled = disabled;\n  }\n\n  /**\n   * Focus on the editor.\n   */\n  focus() {\n    this.el.focus();\n  }\n\n  /**\n   * Destroy the editor\n   */\n  destroy() {\n    this.el.remove();\n  }\n}\n\nwindow.flreg.add('utils/BasicEditorDriver', BasicEditorDriver)","import Component from '../Component';\nimport ItemList from '../utils/ItemList';\nimport listItems from '../helpers/listItems';\nimport Button from './Button';\n\nimport BasicEditorDriver from '../utils/BasicEditorDriver';\n\n/**\n * The `TextEditor` component displays a textarea with controls, including a\n * submit button.\n *\n * ### Attrs\n *\n * - `composer`\n * - `submitLabel`\n * - `value`\n * - `placeholder`\n * - `disabled`\n * - `preview`\n */\nexport default class TextEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The value of the editor.\n     *\n     * @type {String}\n     */\n    this.value = this.attrs.value || '';\n\n    /**\n     * Whether the editor is disabled.\n     */\n    this.disabled = !!this.attrs.disabled;\n  }\n\n  view() {\n    return (\n      <div className=\"TextEditor\">\n        <div className=\"TextEditor-editorContainer\"></div>\n\n        <ul className=\"TextEditor-controls Composer-footer\">\n          {listItems(this.controlItems().toArray())}\n          <li className=\"TextEditor-toolbar\">{this.toolbarItems().toArray()}</li>\n        </ul>\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.attrs.composer.editor = this.buildEditor(this.$('.TextEditor-editorContainer')[0]);\n  }\n\n  onupdate() {\n    const newDisabled = !!this.attrs.disabled;\n\n    if (this.disabled !== newDisabled) {\n      this.disabled = newDisabled;\n      this.attrs.composer.editor.disabled(newDisabled);\n    }\n  }\n\n  buildEditorParams() {\n    return {\n      classNames: ['FormControl', 'Composer-flexible', 'TextEditor-editor'],\n      disabled: this.disabled,\n      placeholder: this.attrs.placeholder || '',\n      value: this.value,\n      oninput: this.oninput.bind(this),\n      inputListeners: [],\n      onsubmit: () => {\n        this.onsubmit();\n        m.redraw();\n      },\n    };\n  }\n\n  buildEditor(dom) {\n    return new BasicEditorDriver(dom, this.buildEditorParams());\n  }\n\n  /**\n   * Build an item list for the text editor controls.\n   *\n   * @return {ItemList}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'submit',\n      Button.component(\n        {\n          icon: 'fas fa-paper-plane',\n          className: 'Button Button--primary',\n          itemClassName: 'App-primaryControl',\n          onclick: this.onsubmit.bind(this),\n        },\n        this.attrs.submitLabel\n      )\n    );\n\n    if (this.attrs.preview) {\n      items.add(\n        'preview',\n        Button.component({\n          icon: 'far fa-eye',\n          className: 'Button Button--icon',\n          onclick: this.attrs.preview,\n          title: app.translator.trans('core.forum.composer.preview_tooltip'),\n          oncreate: (vnode) => $(vnode.dom).tooltip(),\n        })\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the toolbar controls.\n   *\n   * @return {ItemList}\n   */\n  toolbarItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Handle input into the textarea.\n   *\n   * @param {String} value\n   */\n  oninput(value) {\n    this.value = value;\n\n    this.attrs.onchange(this.value);\n  }\n\n  /**\n   * Handle the submit button being clicked.\n   */\n  onsubmit() {\n    this.attrs.onsubmit(this.value);\n  }\n}\n// Flarum Asynchronous Module\n\nwindow.flreg.add('components/TextEditor', TextEditor)","/* jshint browser: true */\n\n(function () {\n\n// We'll copy the properties below into the mirror div.\n// Note that some browsers, such as Firefox, do not concatenate properties\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n// so we have to list every single property explicitly.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if (!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if (el) el.parentNode.removeChild(el);\n  }\n\n  // The mirror div will replicate the textarea's style\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n  var isInput = element.nodeName === 'INPUT';\n\n  // Default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (!isInput)\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // Position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // Transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    if (isInput && prop === 'lineHeight') {\n      // Special case for <input>s because text is rendered centered and line height may be != height\n      style.lineHeight = computed.height;\n    } else {\n      style[prop] = computed[prop];\n    }\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // The second special handling for input type=\"text\" vs textarea:\n  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (isInput)\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // For inputs, just '.' would be enough, but no need to bother.\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),\n    height: parseInt(computed['lineHeight'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\nif (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n  module.exports = getCaretCoordinates;\n} else if(isBrowser) {\n  window.getCaretCoordinates = getCaretCoordinates;\n}\n\n}());\n"],"sourceRoot":""}