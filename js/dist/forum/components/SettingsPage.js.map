{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/NotificationGrid.js","webpack://@flarum/core/./src/forum/components/SettingsPage.js"],"names":["NotificationGrid","oninit","vnode","this","methods","notificationMethods","toArray","loading","types","notificationTypes","view","preferences","attrs","user","className","map","method","onclick","toggleMethod","bind","name","icon","label","type","toggleType","key","preferenceKey","Checkbox","state","disabled","onchange","toggle","oncreate","$","e","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","m","redraw","save","then","filter","items","ItemList","add","app","translator","trans","Component","SettingsPage","show","session","setTitle","content","listItems","settingsItems","section","FieldSet","accountItems","Button","modal","ChangePasswordModal","ChangeEmailModal","notificationsItems","privacyItems","Switch","discloseOnline","value","discloseOnlineLoading","savePreferences","UserPage"],"mappings":"qOAaqBA,E,sGACnBC,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAObC,KAAKC,QAAUD,KAAKE,sBAAsBC,UAO1CH,KAAKI,QAAU,GAOfJ,KAAKK,MAAQL,KAAKM,oBAAoBH,W,EAGxCI,KAAA,WAAO,WACCC,EAAcR,KAAKS,MAAMC,KAAKF,cAEpC,OACE,WAAOG,UAAU,oBACf,eACE,YACE,aACCX,KAAKC,QAAQW,KAAI,SAACC,GAAD,OAChB,QAAIF,UAAU,+BAA+BG,QAAS,EAAKC,aAAaC,KAAK,EAAMH,EAAOI,QACvFC,OAAKL,EAAOK,MADf,IACuBL,EAAOM,YAMpC,eACGnB,KAAKK,MAAMO,KAAI,SAACQ,GAAD,OACd,YACE,QAAIT,UAAU,+BAA+BG,QAAS,EAAKO,WAAWL,KAAK,EAAMI,EAAKH,QACnFC,OAAKE,EAAKF,MADb,IACqBE,EAAKD,OAEzB,EAAKlB,QAAQW,KAAI,SAACC,GACjB,IAAMS,EAAM,EAAKC,cAAcH,EAAKH,KAAMJ,EAAOI,MAEjD,OACE,QAAIN,UAAU,6BACZ,EAACa,EAAA,EAAD,CACEC,QAASjB,EAAYc,GACrBlB,QAAS,EAAKA,QAAQkB,GACtBI,WAAYJ,KAAOd,GACnBmB,SAAU,EAAKC,OAAOZ,KAAK,EAAM,CAACM,iB,EAYtDO,SAAA,SAAS9B,GACP,YAAM8B,SAAN,UAAe9B,GAEfC,KAAK8B,EAAE,uCAAuCd,KAAK,yBAAyB,SAAUe,GACpF,IAAMC,EAAIC,SAASH,EAAE9B,MAAMkC,QAAS,IAAM,EAC1CJ,EAAE9B,MACCmC,QAAQ,SACRC,KAAK,gBAAkBJ,EAAI,KAC3BK,YAAY,cAA0B,eAAXN,EAAEX,SAGlCpB,KAAK8B,EAAE,uCAAuCd,KAAK,yBAAyB,SAAUe,GACpFD,EAAE9B,MACCsC,SACAF,KAAK,MACLC,YAAY,cAA0B,eAAXN,EAAEX,U,EAUpCQ,OAAA,SAAOW,GAAM,WACL7B,EAAOV,KAAKS,MAAMC,KAClBF,EAAcE,EAAKF,cACnBgC,GAAWhC,EAAY+B,EAAK,IAElCA,EAAKE,SAAQ,SAACnB,GACZ,EAAKlB,QAAQkB,IAAO,EACpBd,EAAYc,GAAOkB,KAGrBE,EAAEC,SAEFjC,EAAKkC,KAAK,CAAEpC,gBAAeqC,MAAK,WAC9BN,EAAKE,SAAQ,SAACnB,GAAD,OAAU,EAAKlB,QAAQkB,IAAO,KAE3CoB,EAAEC,a,EASN5B,aAAA,SAAaF,GAAQ,WACb0B,EAAOvC,KAAKK,MAAMO,KAAI,SAACQ,GAAD,OAAU,EAAKG,cAAcH,EAAKH,KAAMJ,MAASiC,QAAO,SAACxB,GAAD,OAASA,KAAO,EAAKb,MAAMC,KAAKF,iBAEpHR,KAAK4B,OAAOW,I,EAQdlB,WAAA,SAAWD,GAAM,WACTmB,EAAOvC,KAAKC,QAAQW,KAAI,SAACC,GAAD,OAAY,EAAKU,cAAcH,EAAMP,EAAOI,SAAO6B,QAAO,SAACxB,GAAD,OAASA,KAAO,EAAKb,MAAMC,KAAKF,iBAExHR,KAAK4B,OAAOW,I,EAWdhB,cAAA,SAAcH,EAAMP,GAClB,MAAO,UAAYO,EAAO,IAAMP,G,EAclCX,oBAAA,WACE,IAAM6C,EAAQ,IAAIC,IAclB,OAZAD,EAAME,IAAI,QAAS,CACjBhC,KAAM,QACNC,KAAM,cACNC,MAAO+B,IAAIC,WAAWC,MAAM,+CAG9BL,EAAME,IAAI,QAAS,CACjBhC,KAAM,QACNC,KAAM,kBACNC,MAAO+B,IAAIC,WAAWC,MAAM,iDAGvBL,G,EAcTzC,kBAAA,WACE,IAAMyC,EAAQ,IAAIC,IAQlB,OANAD,EAAME,IAAI,oBAAqB,CAC7BhC,KAAM,oBACNC,KAAM,oBACNC,MAAO+B,IAAIC,WAAWC,MAAM,yDAGvBL,G,GApMmCM,K,6BCCzBC,E,sGACnBxD,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEbC,KAAKuD,KAAKL,IAAIM,QAAQ9C,MAEtBwC,IAAIO,SAASP,IAAIC,WAAWC,MAAM,+B,EAGpCM,QAAA,WACE,OACE,SAAK/C,UAAU,gBACb,aAAKgD,OAAU3D,KAAK4D,gBAAgBzD,c,EAU1CyD,cAAA,WAAgB,WACRb,EAAQ,IAAIC,IAWlB,MATA,CAAC,UAAW,gBAAiB,WAAWP,SAAQ,SAACoB,GAC/Cd,EAAME,IACJY,EACA,EAACC,EAAA,EAAD,CAAUnD,UAAS,YAAckD,EAAW1C,MAAO+B,IAAIC,WAAWC,MAAf,uBAA4CS,EAA5C,aAChD,EAAQA,EAAJ,WAAsB1D,eAK1B4C,G,EAQTgB,aAAA,WACE,IAAMhB,EAAQ,IAAIC,IAgBlB,OAdAD,EAAME,IACJ,iBACA,EAACe,EAAA,EAAD,CAAQrD,UAAU,SAASG,QAAS,kBAAMoC,IAAIe,MAAMV,KAAKW,OACtDhB,IAAIC,WAAWC,MAAM,gDAI1BL,EAAME,IACJ,cACA,EAACe,EAAA,EAAD,CAAQrD,UAAU,SAASG,QAAS,kBAAMoC,IAAIe,MAAMV,KAAKY,OACtDjB,IAAIC,WAAWC,MAAM,6CAInBL,G,EAQTqB,mBAAA,WACE,IAAMrB,EAAQ,IAAIC,IAIlB,OAFAD,EAAME,IAAI,mBAAoB,EAACpD,EAAD,CAAkBa,KAAMV,KAAKU,QAEpDqC,G,EAQTsB,aAAA,WAAe,WACPtB,EAAQ,IAAIC,IAoBlB,OAlBAD,EAAME,IACJ,iBACA,EAACqB,EAAA,EAAD,CACE7C,MAAOzB,KAAKU,KAAKF,cAAc+D,eAC/B5C,SAAU,SAAC6C,GACT,EAAKC,uBAAwB,EAE7B,EAAK/D,KAAKgE,gBAAgB,CAAEH,eAAgBC,IAAS3B,MAAK,WACxD,EAAK4B,uBAAwB,EAC7B/B,EAAEC,aAGNvC,QAASJ,KAAKyE,uBAEbvB,IAAIC,WAAWC,MAAM,uDAInBL,G,GArG+B4B","file":"forum/components/SettingsPage.js","sourcesContent":["import Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport icon from '../../common/helpers/icon';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {Array}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Object}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {Array}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n\n  view() {\n    const preferences = this.attrs.user.preferences();\n\n    return (\n      <table className=\"NotificationGrid\">\n        <thead>\n          <tr>\n            <td />\n            {this.methods.map((method) => (\n              <th className=\"NotificationGrid-groupToggle\" onclick={this.toggleMethod.bind(this, method.name)}>\n                {icon(method.icon)} {method.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {this.types.map((type) => (\n            <tr>\n              <td className=\"NotificationGrid-groupToggle\" onclick={this.toggleType.bind(this, type.name)}>\n                {icon(type.icon)} {type.label}\n              </td>\n              {this.methods.map((method) => {\n                const key = this.preferenceKey(type.name, method.name);\n\n                return (\n                  <td className=\"NotificationGrid-checkbox\">\n                    <Checkbox\n                      state={!!preferences[key]}\n                      loading={this.loading[key]}\n                      disabled={!(key in preferences)}\n                      onchange={this.toggle.bind(this, [key])}\n                    />\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this)\n        .parents('table')\n        .find('td:nth-child(' + i + ')')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this)\n        .parent()\n        .find('td')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {Array} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n\n    keys.forEach((key) => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n\n    m.redraw();\n\n    user.save({ preferences }).then(() => {\n      keys.forEach((key) => (this.loading[key] = false));\n\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {String} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map((type) => this.preferenceKey(type.name, method)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {String} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map((method) => this.preferenceKey(type, method.name)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {String} type\n   * @param {String} method\n   * @return {String}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading'),\n    });\n\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading'),\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label'),\n    });\n\n    return items;\n  }\n}\n","import UserPage from './UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.show(app.session.user);\n\n    app.setTitle(app.translator.trans('core.forum.settings.title'));\n  }\n\n  content() {\n    return (\n      <div className=\"SettingsPage\">\n        <ul>{listItems(this.settingsItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   *\n   * @return {ItemList}\n   */\n  settingsItems() {\n    const items = new ItemList();\n\n    ['account', 'notifications', 'privacy'].forEach((section) => {\n      items.add(\n        section,\n        <FieldSet className={`Settings-${section}`} label={app.translator.trans(`core.forum.settings.${section}_heading`)}>\n          {this[`${section}Items`]().toArray()}\n        </FieldSet>\n      );\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   *\n   * @return {ItemList}\n   */\n  accountItems() {\n    const items = new ItemList();\n\n    items.add(\n      'changePassword',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangePasswordModal)}>\n        {app.translator.trans('core.forum.settings.change_password_button')}\n      </Button>\n    );\n\n    items.add(\n      'changeEmail',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangeEmailModal)}>\n        {app.translator.trans('core.forum.settings.change_email_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   *\n   * @return {ItemList}\n   */\n  notificationsItems() {\n    const items = new ItemList();\n\n    items.add('notificationGrid', <NotificationGrid user={this.user} />);\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   *\n   * @return {ItemList}\n   */\n  privacyItems() {\n    const items = new ItemList();\n\n    items.add(\n      'discloseOnline',\n      <Switch\n        state={this.user.preferences().discloseOnline}\n        onchange={(value) => {\n          this.discloseOnlineLoading = true;\n\n          this.user.savePreferences({ discloseOnline: value }).then(() => {\n            this.discloseOnlineLoading = false;\n            m.redraw();\n          });\n        }}\n        loading={this.discloseOnlineLoading}\n      >\n        {app.translator.trans('core.forum.settings.privacy_disclose_online_label')}\n      </Switch>\n    );\n\n    return items;\n  }\n}\n"],"sourceRoot":""}