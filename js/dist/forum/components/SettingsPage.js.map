{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/NotificationGrid.js","webpack://@flarum/core/./src/forum/components/ChangePasswordModal.js","webpack://@flarum/core/./src/forum/components/ChangeEmailModal.js","webpack://@flarum/core/./src/forum/components/SettingsPage.js"],"names":["NotificationGrid","oninit","vnode","this","methods","notificationMethods","toArray","loading","types","notificationTypes","view","preferences","attrs","user","className","map","method","onclick","toggleMethod","bind","name","icon","label","type","toggleType","key","preferenceKey","Checkbox","state","disabled","onchange","toggle","oncreate","$","e","i","parseInt","index","parents","find","toggleClass","parent","keys","enabled","forEach","m","redraw","save","then","filter","items","ItemList","add","app","translator","trans","Component","window","flreg","ChangePasswordModal","title","content","Button","onsubmit","preventDefault","request","url","forum","attribute","body","email","session","hide","loaded","Modal","ChangeEmailModal","success","Stream","password","placeholder","bidi","alertAttrs","errorHandler","onerror","meta","error","status","alert","SettingsPage","show","setTitle","listItems","settingsItems","section","FieldSet","accountItems","modal","notificationsItems","privacyItems","Switch","discloseOnline","value","discloseOnlineLoading","savePreferences","UserPage"],"mappings":"+OAaqBA,E,sGACnBC,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAObC,KAAKC,QAAUD,KAAKE,sBAAsBC,UAO1CH,KAAKI,QAAU,GAOfJ,KAAKK,MAAQL,KAAKM,oBAAoBH,W,EAGxCI,KAAA,WAAO,WACCC,EAAcR,KAAKS,MAAMC,KAAKF,cAEpC,OACE,WAAOG,UAAU,oBACf,eACE,YACE,aACCX,KAAKC,QAAQW,KAAI,SAACC,GAAD,OAChB,QAAIF,UAAU,+BAA+BG,QAAS,EAAKC,aAAaC,KAAK,EAAMH,EAAOI,QACvFC,OAAKL,EAAOK,MADf,IACuBL,EAAOM,YAMpC,eACGnB,KAAKK,MAAMO,KAAI,SAACQ,GAAD,OACd,YACE,QAAIT,UAAU,+BAA+BG,QAAS,EAAKO,WAAWL,KAAK,EAAMI,EAAKH,QACnFC,OAAKE,EAAKF,MADb,IACqBE,EAAKD,OAEzB,EAAKlB,QAAQW,KAAI,SAACC,GACjB,IAAMS,EAAM,EAAKC,cAAcH,EAAKH,KAAMJ,EAAOI,MAEjD,OACE,QAAIN,UAAU,6BACZ,EAACa,EAAA,EAAD,CACEC,QAASjB,EAAYc,GACrBlB,QAAS,EAAKA,QAAQkB,GACtBI,WAAYJ,KAAOd,GACnBmB,SAAU,EAAKC,OAAOZ,KAAK,EAAM,CAACM,iB,EAYtDO,SAAA,SAAS9B,GACP,YAAM8B,SAAN,UAAe9B,GAEfC,KAAK8B,EAAE,uCAAuCd,KAAK,yBAAyB,SAAUe,GACpF,IAAMC,EAAIC,SAASH,EAAE9B,MAAMkC,QAAS,IAAM,EAC1CJ,EAAE9B,MACCmC,QAAQ,SACRC,KAAK,gBAAkBJ,EAAI,KAC3BK,YAAY,cAA0B,eAAXN,EAAEX,SAGlCpB,KAAK8B,EAAE,uCAAuCd,KAAK,yBAAyB,SAAUe,GACpFD,EAAE9B,MACCsC,SACAF,KAAK,MACLC,YAAY,cAA0B,eAAXN,EAAEX,U,EAUpCQ,OAAA,SAAOW,GAAM,WACL7B,EAAOV,KAAKS,MAAMC,KAClBF,EAAcE,EAAKF,cACnBgC,GAAWhC,EAAY+B,EAAK,IAElCA,EAAKE,SAAQ,SAACnB,GACZ,EAAKlB,QAAQkB,IAAO,EACpBd,EAAYc,GAAOkB,KAGrBE,EAAEC,SAEFjC,EAAKkC,KAAK,CAAEpC,gBAAeqC,MAAK,WAC9BN,EAAKE,SAAQ,SAACnB,GAAD,OAAU,EAAKlB,QAAQkB,IAAO,KAE3CoB,EAAEC,a,EASN5B,aAAA,SAAaF,GAAQ,WACb0B,EAAOvC,KAAKK,MAAMO,KAAI,SAACQ,GAAD,OAAU,EAAKG,cAAcH,EAAKH,KAAMJ,MAASiC,QAAO,SAACxB,GAAD,OAASA,KAAO,EAAKb,MAAMC,KAAKF,iBAEpHR,KAAK4B,OAAOW,I,EAQdlB,WAAA,SAAWD,GAAM,WACTmB,EAAOvC,KAAKC,QAAQW,KAAI,SAACC,GAAD,OAAY,EAAKU,cAAcH,EAAMP,EAAOI,SAAO6B,QAAO,SAACxB,GAAD,OAASA,KAAO,EAAKb,MAAMC,KAAKF,iBAExHR,KAAK4B,OAAOW,I,EAWdhB,cAAA,SAAcH,EAAMP,GAClB,MAAO,UAAYO,EAAO,IAAMP,G,EAclCX,oBAAA,WACE,IAAM6C,EAAQ,IAAIC,IAclB,OAZAD,EAAME,IAAI,QAAS,CACjBhC,KAAM,QACNC,KAAM,cACNC,MAAO+B,IAAIC,WAAWC,MAAM,+CAG9BL,EAAME,IAAI,QAAS,CACjBhC,KAAM,QACNC,KAAM,kBACNC,MAAO+B,IAAIC,WAAWC,MAAM,iDAGvBL,G,EAcTzC,kBAAA,WACE,IAAMyC,EAAQ,IAAIC,IAQlB,OANAD,EAAME,IAAI,oBAAqB,CAC7BhC,KAAM,oBACNC,KAAM,oBACNC,MAAO+B,IAAIC,WAAWC,MAAM,yDAGvBL,G,GApMmCM,KAwM9CC,OAAOC,MAAMN,IAAI,8BAA+BpD,G,cC9M3B2D,E,sGACnB7C,UAAA,WACE,MAAO,oC,EAGT8C,MAAA,WACE,OAAOP,IAAIC,WAAWC,MAAM,qC,EAG9BM,QAAA,WACE,OACE,SAAK/C,UAAU,cACb,SAAKA,UAAU,uBACb,OAAGA,UAAU,YAAYuC,IAAIC,WAAWC,MAAM,oCAC9C,SAAKzC,UAAU,cACZgD,cACC,CACEhD,UAAW,uCACXS,KAAM,SACNhB,QAASJ,KAAKI,SAEhB8C,IAAIC,WAAWC,MAAM,+C,EAQjCQ,SAAA,SAAS7B,GACPA,EAAE8B,iBAEF7D,KAAKI,SAAU,EAEf8C,IACGY,QAAQ,CACPjD,OAAQ,OACRkD,IAAKb,IAAIc,MAAMC,UAAU,UAAY,UACrCC,KAAM,CAAEC,MAAOjB,IAAIkB,QAAQ1D,KAAKyD,WAEjCtB,KAAK7C,KAAKqE,KAAKrD,KAAKhB,MAAOA,KAAKsE,OAAOtD,KAAKhB,Q,GAxCFuE,KA4CjDjB,OAAOC,MAAMN,IAAI,iCAAkCO,G,cC3C9BgB,E,sGACnB1E,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAObC,KAAKyE,SAAU,EAOfzE,KAAKmE,OAAQO,OAAOxB,IAAIkB,QAAQ1D,KAAKyD,SAOrCnE,KAAK2E,UAAWD,OAAO,K,EAGzB/D,UAAA,WACE,MAAO,iC,EAGT8C,MAAA,WACE,OAAOP,IAAIC,WAAWC,MAAM,kC,EAG9BM,QAAA,WACE,OAAI1D,KAAKyE,QAEL,SAAK9D,UAAU,cACb,SAAKA,UAAU,uBACb,OAAGA,UAAU,YACVuC,IAAIC,WAAWC,MAAM,+CAAgD,CAAEe,MAAO,gBAASnE,KAAKmE,YAE/F,SAAKxD,UAAU,cACb,EAACgD,EAAA,EAAD,CAAQhD,UAAU,uCAAuCG,QAASd,KAAKqE,KAAKrD,KAAKhB,OAC9EkD,IAAIC,WAAWC,MAAM,8CAShC,SAAKzC,UAAU,cACb,SAAKA,UAAU,uBACb,SAAKA,UAAU,cACb,WACES,KAAK,QACLH,KAAK,QACLN,UAAU,cACViE,YAAa1B,IAAIkB,QAAQ1D,KAAKyD,QAC9BU,KAAM7E,KAAKmE,MACXzC,SAAU1B,KAAKI,WAGnB,SAAKO,UAAU,cACb,WACES,KAAK,WACLH,KAAK,WACLN,UAAU,cACViE,YAAa1B,IAAIC,WAAWC,MAAM,wDAClCyB,KAAM7E,KAAK2E,SACXjD,SAAU1B,KAAKI,WAGnB,SAAKO,UAAU,cACZgD,cACC,CACEhD,UAAW,uCACXS,KAAM,SACNhB,QAASJ,KAAKI,SAEhB8C,IAAIC,WAAWC,MAAM,8C,EAQjCQ,SAAA,SAAS7B,GAAG,WACVA,EAAE8B,iBAIE7D,KAAKmE,UAAYjB,IAAIkB,QAAQ1D,KAAKyD,SAKtCnE,KAAKI,SAAU,EACfJ,KAAK8E,WAAa,KAElB5B,IAAIkB,QAAQ1D,KACTkC,KACC,CAAEuB,MAAOnE,KAAKmE,SACd,CACEY,aAAc/E,KAAKgF,QAAQhE,KAAKhB,MAChCiF,KAAM,CAAEN,SAAU3E,KAAK2E,cAG1B9B,MAAK,WACJ,EAAK4B,SAAU,KATnB,OAWS,eACN5B,KAAK7C,KAAKsE,OAAOtD,KAAKhB,QAnBvBA,KAAKqE,Q,EAsBTW,QAAA,SAAQE,GACe,MAAjBA,EAAMC,SACRD,EAAME,MAAM1B,QAAUR,IAAIC,WAAWC,MAAM,uDAG7C,YAAM4B,QAAN,UAAcE,I,GA3H4BX,KA+H9CjB,OAAOC,MAAMN,IAAI,8BAA+BuB,G,cCzH3Ba,E,sGACnBvF,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEbC,KAAKsF,KAAKpC,IAAIkB,QAAQ1D,MAEtBwC,IAAIqC,SAASrC,IAAIC,WAAWC,MAAM,+B,EAGpCM,QAAA,WACE,OACE,SAAK/C,UAAU,gBACb,aAAK6E,OAAUxF,KAAKyF,gBAAgBtF,c,EAU1CsF,cAAA,WAAgB,WACR1C,EAAQ,IAAIC,IAWlB,MATA,CAAC,UAAW,gBAAiB,WAAWP,SAAQ,SAACiD,GAC/C3C,EAAME,IACJyC,EACA,EAACC,EAAA,EAAD,CAAUhF,UAAS,YAAc+E,EAAWvE,MAAO+B,IAAIC,WAAWC,MAAf,uBAA4CsC,EAA5C,aAChD,EAAQA,EAAJ,WAAsBvF,eAK1B4C,G,EAQT6C,aAAA,WACE,IAAM7C,EAAQ,IAAIC,IAgBlB,OAdAD,EAAME,IACJ,iBACA,EAACU,EAAA,EAAD,CAAQhD,UAAU,SAASG,QAAS,kBAAMoC,IAAI2C,MAAMP,KAAK9B,KACtDN,IAAIC,WAAWC,MAAM,gDAI1BL,EAAME,IACJ,cACA,EAACU,EAAA,EAAD,CAAQhD,UAAU,SAASG,QAAS,kBAAMoC,IAAI2C,MAAMP,KAAKd,KACtDtB,IAAIC,WAAWC,MAAM,6CAInBL,G,EAQT+C,mBAAA,WACE,IAAM/C,EAAQ,IAAIC,IAIlB,OAFAD,EAAME,IAAI,mBAAoB,EAACpD,EAAD,CAAkBa,KAAMV,KAAKU,QAEpDqC,G,EAQTgD,aAAA,WAAe,WACPhD,EAAQ,IAAIC,IAoBlB,OAlBAD,EAAME,IACJ,iBACA,EAAC+C,EAAA,EAAD,CACEvE,MAAOzB,KAAKU,KAAKF,cAAcyF,eAC/BtE,SAAU,SAACuE,GACT,EAAKC,uBAAwB,EAE7B,EAAKzF,KAAK0F,gBAAgB,CAAEH,eAAgBC,IAASrD,MAAK,WACxD,EAAKsD,uBAAwB,EAC7BzD,EAAEC,aAGNvC,QAASJ,KAAKmG,uBAEbjD,IAAIC,WAAWC,MAAM,uDAInBL,G,GArG+BsD","file":"forum/components/SettingsPage.js","sourcesContent":["import Component from '../../common/Component';\nimport Checkbox from '../../common/components/Checkbox';\nimport icon from '../../common/helpers/icon';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `NotificationGrid` component displays a table of notification types and\n * methods, allowing the user to toggle each combination.\n *\n * ### Attrs\n *\n * - `user`\n */\nexport default class NotificationGrid extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Information about the available notification methods.\n     *\n     * @type {Array}\n     */\n    this.methods = this.notificationMethods().toArray();\n\n    /**\n     * A map of which notification checkboxes are loading.\n     *\n     * @type {Object}\n     */\n    this.loading = {};\n\n    /**\n     * Information about the available notification types.\n     *\n     * @type {Array}\n     */\n    this.types = this.notificationTypes().toArray();\n  }\n\n  view() {\n    const preferences = this.attrs.user.preferences();\n\n    return (\n      <table className=\"NotificationGrid\">\n        <thead>\n          <tr>\n            <td />\n            {this.methods.map((method) => (\n              <th className=\"NotificationGrid-groupToggle\" onclick={this.toggleMethod.bind(this, method.name)}>\n                {icon(method.icon)} {method.label}\n              </th>\n            ))}\n          </tr>\n        </thead>\n\n        <tbody>\n          {this.types.map((type) => (\n            <tr>\n              <td className=\"NotificationGrid-groupToggle\" onclick={this.toggleType.bind(this, type.name)}>\n                {icon(type.icon)} {type.label}\n              </td>\n              {this.methods.map((method) => {\n                const key = this.preferenceKey(type.name, method.name);\n\n                return (\n                  <td className=\"NotificationGrid-checkbox\">\n                    <Checkbox\n                      state={!!preferences[key]}\n                      loading={this.loading[key]}\n                      disabled={!(key in preferences)}\n                      onchange={this.toggle.bind(this, [key])}\n                    />\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.$('thead .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      const i = parseInt($(this).index(), 10) + 1;\n      $(this)\n        .parents('table')\n        .find('td:nth-child(' + i + ')')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n\n    this.$('tbody .NotificationGrid-groupToggle').bind('mouseenter mouseleave', function (e) {\n      $(this)\n        .parent()\n        .find('td')\n        .toggleClass('highlighted', e.type === 'mouseenter');\n    });\n  }\n\n  /**\n   * Toggle the state of the given preferences, based on the value of the first\n   * one.\n   *\n   * @param {Array} keys\n   */\n  toggle(keys) {\n    const user = this.attrs.user;\n    const preferences = user.preferences();\n    const enabled = !preferences[keys[0]];\n\n    keys.forEach((key) => {\n      this.loading[key] = true;\n      preferences[key] = enabled;\n    });\n\n    m.redraw();\n\n    user.save({ preferences }).then(() => {\n      keys.forEach((key) => (this.loading[key] = false));\n\n      m.redraw();\n    });\n  }\n\n  /**\n   * Toggle all notification types for the given method.\n   *\n   * @param {String} method\n   */\n  toggleMethod(method) {\n    const keys = this.types.map((type) => this.preferenceKey(type.name, method)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Toggle all notification methods for the given type.\n   *\n   * @param {String} type\n   */\n  toggleType(type) {\n    const keys = this.methods.map((method) => this.preferenceKey(type, method.name)).filter((key) => key in this.attrs.user.preferences());\n\n    this.toggle(keys);\n  }\n\n  /**\n   * Get the name of the preference key for the given notification type-method\n   * combination.\n   *\n   * @param {String} type\n   * @param {String} method\n   * @return {String}\n   */\n  preferenceKey(type, method) {\n    return 'notify_' + type + '_' + method;\n  }\n\n  /**\n   * Build an item list for the notification methods to display in the grid.\n   *\n   * Each notification method is an object which has the following properties:\n   *\n   * - `name` The name of the notification method.\n   * - `icon` The icon to display in the column header.\n   * - `label` The label to display in the column header.\n   *\n   * @return {ItemList}\n   */\n  notificationMethods() {\n    const items = new ItemList();\n\n    items.add('alert', {\n      name: 'alert',\n      icon: 'fas fa-bell',\n      label: app.translator.trans('core.forum.settings.notify_by_web_heading'),\n    });\n\n    items.add('email', {\n      name: 'email',\n      icon: 'far fa-envelope',\n      label: app.translator.trans('core.forum.settings.notify_by_email_heading'),\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the notification types to display in the grid.\n   *\n   * Each notification type is an object which has the following properties:\n   *\n   * - `name` The name of the notification type.\n   * - `icon` The icon to display in the notification grid row.\n   * - `label` The label to display in the notification grid row.\n   *\n   * @return {ItemList}\n   */\n  notificationTypes() {\n    const items = new ItemList();\n\n    items.add('discussionRenamed', {\n      name: 'discussionRenamed',\n      icon: 'fas fa-pencil-alt',\n      label: app.translator.trans('core.forum.settings.notify_discussion_renamed_label'),\n    });\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/NotificationGrid', NotificationGrid)","import Modal from '../../common/components/Modal';\nimport Button from '../../common/components/Button';\n\n/**\n * The `ChangePasswordModal` component shows a modal dialog which allows the\n * user to send themself a password reset email.\n */\nexport default class ChangePasswordModal extends Modal {\n  className() {\n    return 'ChangePasswordModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('core.forum.change_password.title');\n  }\n\n  content() {\n    return (\n      <div className=\"Modal-body\">\n        <div className=\"Form Form--centered\">\n          <p className=\"helpText\">{app.translator.trans('core.forum.change_password.text')}</p>\n          <div className=\"Form-group\">\n            {Button.component(\n              {\n                className: 'Button Button--primary Button--block',\n                type: 'submit',\n                loading: this.loading,\n              },\n              app.translator.trans('core.forum.change_password.send_button')\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    app\n      .request({\n        method: 'POST',\n        url: app.forum.attribute('apiUrl') + '/forgot',\n        body: { email: app.session.user.email() },\n      })\n      .then(this.hide.bind(this), this.loaded.bind(this));\n  }\n}\n\nwindow.flreg.add('components/ChangePasswordModal', ChangePasswordModal)","import Modal from '../../common/components/Modal';\nimport Button from '../../common/components/Button';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `ChangeEmailModal` component shows a modal dialog which allows the user\n * to change their email address.\n */\nexport default class ChangeEmailModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not the email has been changed successfully.\n     *\n     * @type {Boolean}\n     */\n    this.success = false;\n\n    /**\n     * The value of the email input.\n     *\n     * @type {function}\n     */\n    this.email = Stream(app.session.user.email());\n\n    /**\n     * The value of the password input.\n     *\n     * @type {function}\n     */\n    this.password = Stream('');\n  }\n\n  className() {\n    return 'ChangeEmailModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('core.forum.change_email.title');\n  }\n\n  content() {\n    if (this.success) {\n      return (\n        <div className=\"Modal-body\">\n          <div className=\"Form Form--centered\">\n            <p className=\"helpText\">\n              {app.translator.trans('core.forum.change_email.confirmation_message', { email: <strong>{this.email()}</strong> })}\n            </p>\n            <div className=\"Form-group\">\n              <Button className=\"Button Button--primary Button--block\" onclick={this.hide.bind(this)}>\n                {app.translator.trans('core.forum.change_email.dismiss_button')}\n              </Button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"Modal-body\">\n        <div className=\"Form Form--centered\">\n          <div className=\"Form-group\">\n            <input\n              type=\"email\"\n              name=\"email\"\n              className=\"FormControl\"\n              placeholder={app.session.user.email()}\n              bidi={this.email}\n              disabled={this.loading}\n            />\n          </div>\n          <div className=\"Form-group\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              className=\"FormControl\"\n              placeholder={app.translator.trans('core.forum.change_email.confirm_password_placeholder')}\n              bidi={this.password}\n              disabled={this.loading}\n            />\n          </div>\n          <div className=\"Form-group\">\n            {Button.component(\n              {\n                className: 'Button Button--primary Button--block',\n                type: 'submit',\n                loading: this.loading,\n              },\n              app.translator.trans('core.forum.change_email.submit_button')\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    // If the user hasn't actually entered a different email address, we don't\n    // need to do anything. Woot!\n    if (this.email() === app.session.user.email()) {\n      this.hide();\n      return;\n    }\n\n    this.loading = true;\n    this.alertAttrs = null;\n\n    app.session.user\n      .save(\n        { email: this.email() },\n        {\n          errorHandler: this.onerror.bind(this),\n          meta: { password: this.password() },\n        }\n      )\n      .then(() => {\n        this.success = true;\n      })\n      .catch(() => {})\n      .then(this.loaded.bind(this));\n  }\n\n  onerror(error) {\n    if (error.status === 401) {\n      error.alert.content = app.translator.trans('core.forum.change_email.incorrect_password_message');\n    }\n\n    super.onerror(error);\n  }\n}\n\nwindow.flreg.add('components/ChangeEmailModal', ChangeEmailModal)","import UserPage from 'flarum/components/UserPage';\nimport ItemList from '../../common/utils/ItemList';\nimport Switch from '../../common/components/Switch';\nimport Button from '../../common/components/Button';\nimport FieldSet from '../../common/components/FieldSet';\nimport NotificationGrid from './NotificationGrid';\nimport ChangePasswordModal from './ChangePasswordModal';\nimport ChangeEmailModal from './ChangeEmailModal';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `SettingsPage` component displays the user's settings control panel, in\n * the context of their user profile.\n */\nexport default class SettingsPage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.show(app.session.user);\n\n    app.setTitle(app.translator.trans('core.forum.settings.title'));\n  }\n\n  content() {\n    return (\n      <div className=\"SettingsPage\">\n        <ul>{listItems(this.settingsItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Build an item list for the user's settings controls.\n   *\n   * @return {ItemList}\n   */\n  settingsItems() {\n    const items = new ItemList();\n\n    ['account', 'notifications', 'privacy'].forEach((section) => {\n      items.add(\n        section,\n        <FieldSet className={`Settings-${section}`} label={app.translator.trans(`core.forum.settings.${section}_heading`)}>\n          {this[`${section}Items`]().toArray()}\n        </FieldSet>\n      );\n    });\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's account settings.\n   *\n   * @return {ItemList}\n   */\n  accountItems() {\n    const items = new ItemList();\n\n    items.add(\n      'changePassword',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangePasswordModal)}>\n        {app.translator.trans('core.forum.settings.change_password_button')}\n      </Button>\n    );\n\n    items.add(\n      'changeEmail',\n      <Button className=\"Button\" onclick={() => app.modal.show(ChangeEmailModal)}>\n        {app.translator.trans('core.forum.settings.change_email_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's notification settings.\n   *\n   * @return {ItemList}\n   */\n  notificationsItems() {\n    const items = new ItemList();\n\n    items.add('notificationGrid', <NotificationGrid user={this.user} />);\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the user's privacy settings.\n   *\n   * @return {ItemList}\n   */\n  privacyItems() {\n    const items = new ItemList();\n\n    items.add(\n      'discloseOnline',\n      <Switch\n        state={this.user.preferences().discloseOnline}\n        onchange={(value) => {\n          this.discloseOnlineLoading = true;\n\n          this.user.savePreferences({ discloseOnline: value }).then(() => {\n            this.discloseOnlineLoading = false;\n            m.redraw();\n          });\n        }}\n        loading={this.discloseOnlineLoading}\n      >\n        {app.translator.trans('core.forum.settings.privacy_disclose_online_label')}\n      </Switch>\n    );\n\n    return items;\n  }\n}\n//Flarum Asynchronous Module\n"],"sourceRoot":""}