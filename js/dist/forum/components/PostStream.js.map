{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/CommentPost.js","webpack://@flarum/core/./src/forum/components/ComposerPostPreview.js","webpack://@flarum/core/./src/forum/components/DiscussionRenamedPost.js","webpack://@flarum/core/./src/forum/components/EventPost.js","webpack://@flarum/core/./src/forum/components/LoadingPost.js","webpack://@flarum/core/./src/forum/components/PostEdited.js","webpack://@flarum/core/./src/forum/components/PostMeta.js","webpack://@flarum/core/./src/forum/components/PostStream.js","webpack://@flarum/core/./src/forum/components/ReplyPlaceholder.js"],"names":["Post","PostUser","CommentPost","oninit","vnode","this","revealContent","cardVisible","subtree","check","isEditing","content","concat","className","listItems","headerItems","toArray","composer","app","m","trust","attrs","post","contentHtml","refreshContent","$","each","script","document","createElement","textContent","Array","from","attributes","forEach","attr","setAttribute","name","value","parentNode","replaceChild","oncreate","onupdate","then","EditPostComposer","bodyMatches","elementAttrs","classList","isHidden","isEdited","editing","toggleContent","items","ItemList","add","component","oncardshow","redraw","oncardhide","PostMeta","PostEdited","Button","icon","onclick","bind","window","flreg","ComposerPostPreview","initAttrs","surround","preview","view","updatePreview","isVisible","fields","s9e","TextFormatter","dom","updateInterval","setInterval","onremove","clearInterval","Component","DiscussionRenamedPost","description","data","renamed","translator","trans","oldName","title","extractText","descriptionData","oldTitle","newTitle","old","new","EventPost","ucfirst","contentType","user","username","usernameHelper","href","route","class","transChoice","descriptionKey","count","LoadingPost","avatar","shouldUpdateTooltip","oldEditedInfo","editedUser","editedInfo","ago","humanTime","editedAt","rebuildTooltip","tooltip","time","createdAt","permalink","getPermalink","touch","documentElement","e","setTimeout","parent","find","select","data-toggle","number","fullTime","ipAddress","stopPropagation","location","origin","PostStream","discussion","stream","scrollListener","ScrollListener","onscroll","postComponents","comment","discussionRenamed","lastTime","viewingEnd","posts","postIds","postFadeIn","addClass","removeClass","map","i","visibleStart","PostComponent","key","id","toISOString","dt","period","dayjs","fromNow","PostLoading","visibleEnd","push","loadNext","session","canReply","data-index","ReplyPlaceholder","triggerScroll","start","stop","clearTimeout","calculatePositionTimeout","needsScroll","target","targetPost","scrollToNumber","animateScroll","scrollToIndex","index","reply","top","pageYOffset","paused","pagesLoading","updateScrubber","loadPostsIfNeeded","calculatePosition","marginTop","getMarginTop","viewportHeight","height","viewportTop","$item","length","offset","loadPrevious","outerHeight","$items","visible","indexFromViewPort","$this","visibleTop","Math","max","visiblePost","min","parseFloat","format","startNumber","endNumber","$window","scrollTop","undefined","onPositionChange","headerId","screen","parseInt","css","animate","scrollToItem","flashItem","force","$container","itemTop","itemBottom","scrollBottom","computedHeight","is","updateScrubberHeight","forceUpdateScrubber","Promise","all","promise","loadPromise","itemOffset","sync","$placeholder","on","composingReplyTo","badges","anchorPreview","DiscussionControls","anchorToBottom"],"mappings":"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","file":"forum/components/PostStream.js","sourcesContent":["import classList from '../../common/utils/classList';\nimport PostMeta from './PostMeta';\nimport PostEdited from './PostEdited';\nimport ItemList from '../../common/utils/ItemList';\nimport listItems from '../../common/helpers/listItems';\nimport Button from '../../common/components/Button';\nimport ComposerPostPreview from './ComposerPostPreview';\n\nconst Post = await import(/* webpackChunkName: \"forum/components/Post\" */ './Post');\nconst PostUser = await import(/* webpackChunkName: \"forum/components/PostUser\" */ './PostUser');\n\n/**\n * The `CommentPost` component displays a standard `comment`-typed post. This\n * includes a number of item lists (controls, header, and footer) surrounding\n * the post's HTML content.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class CommentPost extends Post.default {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * If the post has been hidden, then this flag determines whether or not its\n     * content has been expanded.\n     *\n     * @type {Boolean}\n     */\n    this.revealContent = false;\n\n    /**\n     * Whether or not the user hover card inside of PostUser is visible.\n     * The property must be managed in CommentPost to be able to use it in the subtree check\n     *\n     * @type {Boolean}\n     */\n    this.cardVisible = false;\n\n    this.subtree.check(\n      () => this.cardVisible,\n      () => this.isEditing(),\n      () => this.revealContent\n    );\n  }\n\n  content() {\n    return super.content().concat([\n      <header className=\"Post-header\">\n        <ul>{listItems(this.headerItems().toArray())}</ul>\n      </header>,\n      <div className=\"Post-body\">\n        {this.isEditing() ? <ComposerPostPreview className=\"Post-preview\" composer={app.composer} /> : m.trust(this.attrs.post.contentHtml())}\n      </div>,\n    ]);\n  }\n\n  refreshContent() {\n    const contentHtml = this.isEditing() ? '' : this.attrs.post.contentHtml();\n\n    // If the post content has changed since the last render, we'll run through\n    // all of the <script> tags in the content and evaluate them. This is\n    // necessary because TextFormatter outputs them for e.g. syntax highlighting.\n    if (this.contentHtml !== contentHtml) {\n      this.$('.Post-body script').each(function () {\n        const script = document.createElement('script');\n        script.textContent = this.textContent;\n        Array.from(this.attributes).forEach((attr) => script.setAttribute(attr.name, attr.value));\n        this.parentNode.replaceChild(script, this);\n      });\n    }\n\n    this.contentHtml = contentHtml;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.refreshContent();\n  }\n\n  onupdate(vnode) {\n    super.onupdate(vnode);\n\n    this.refreshContent();\n  }\n\n  isEditing() {\n    import(/* webpackChunkName: \"forum/components/EditPostComposer\" */ './EditPostComposer').then((EditPostComposer) => {\n      return app.composer.bodyMatches(EditPostComposer.default, { post: this.attrs.post });\n    });\n  }\n\n  elementAttrs() {\n    const post = this.attrs.post;\n    const attrs = super.elementAttrs();\n\n    attrs.className =\n      (attrs.className || '') +\n      ' ' +\n      classList({\n        CommentPost: true,\n        'Post--hidden': post.isHidden(),\n        'Post--edited': post.isEdited(),\n        revealContent: this.revealContent,\n        editing: this.isEditing(),\n      });\n\n    return attrs;\n  }\n\n  /**\n   * Toggle the visibility of a hidden post's content.\n   */\n  toggleContent() {\n    this.revealContent = !this.revealContent;\n  }\n\n  /**\n   * Build an item list for the post's header.\n   *\n   * @return {ItemList}\n   */\n  headerItems() {\n    const items = new ItemList();\n    const post = this.attrs.post;\n\n    items.add(\n      'user',\n      PostUser.default.component({\n        post,\n        cardVisible: this.cardVisible,\n        oncardshow: () => {\n          this.cardVisible = true;\n          m.redraw();\n        },\n        oncardhide: () => {\n          this.cardVisible = false;\n          m.redraw();\n        },\n      }),\n      100\n    );\n    items.add('meta', PostMeta.component({ post }));\n\n    if (post.isEdited() && !post.isHidden()) {\n      items.add('edited', PostEdited.component({ post }));\n    }\n\n    // If the post is hidden, add a button that allows toggling the visibility\n    // of the post's content.\n    if (post.isHidden()) {\n      items.add(\n        'toggle',\n        Button.component({\n          className: 'Button Button--default Button--more',\n          icon: 'fas fa-ellipsis-h',\n          onclick: this.toggleContent.bind(this),\n        })\n      );\n    }\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/CommentPost', CommentPost)","/*global s9e*/\n\nimport Component from '../../common/Component';\n\n/**\n * The `ComposerPostPreview` component renders Markdown as HTML using the\n * TextFormatter library, polling a data source for changes every 50ms. This is\n * done to prevent expensive redraws on e.g. every single keystroke, while\n * still retaining the perception of live updates for the user.\n *\n * ### Attrs\n *\n * - `composer` The state of the composer controlling this preview.\n * - `className` A CSS class for the element surrounding the preview.\n * - `surround` A callback that can execute code before and after re-render, e.g. for scroll anchoring.\n */\nexport default class ComposerPostPreview extends Component {\n  static initAttrs(attrs) {\n    attrs.className = attrs.className || '';\n    attrs.surround = attrs.surround || ((preview) => preview());\n  }\n\n  view() {\n    return <div className={this.attrs.className} />;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // Every 50ms, if the composer content has changed, then update the post's\n    // body with a preview.\n    let preview;\n    const updatePreview = () => {\n      // Since we're polling, the composer may have been closed in the meantime,\n      // so we bail in that case.\n      if (!this.attrs.composer.isVisible()) return;\n\n      const content = this.attrs.composer.fields.content();\n\n      if (preview === content) return;\n\n      preview = content;\n\n      this.attrs.surround(() => s9e.TextFormatter.preview(preview || '', vnode.dom));\n    };\n    updatePreview();\n\n    this.updateInterval = setInterval(updatePreview, 50);\n  }\n\n  onremove() {\n    clearInterval(this.updateInterval);\n  }\n}\n\nwindow.flreg.add('components/ComposerPostPreview', ComposerPostPreview)","import EventPost from './EventPost';\nimport extractText from '../../common/utils/extractText';\n\n/**\n * The `DiscussionRenamedPost` component displays a discussion event post\n * indicating that the discussion has been renamed.\n *\n * ### Attrs\n *\n * - All of the attrs for EventPost\n */\nexport default class DiscussionRenamedPost extends EventPost {\n  icon() {\n    return 'fas fa-pencil-alt';\n  }\n\n  description(data) {\n    const renamed = app.translator.trans('core.forum.post_stream.discussion_renamed_text', data);\n    const oldName = app.translator.trans('core.forum.post_stream.discussion_renamed_old_tooltip', data);\n\n    return <span title={extractText(oldName)}>{renamed}</span>;\n  }\n\n  descriptionData() {\n    const post = this.attrs.post;\n    const oldTitle = post.content()[0];\n    const newTitle = post.content()[1];\n\n    return {\n      old: oldTitle,\n      new: <strong className=\"DiscussionRenamedPost-new\">{newTitle}</strong>,\n    };\n  }\n}\n\nwindow.flreg.add('components/DiscussionRenamedPost', DiscussionRenamedPost)","import { ucfirst } from '../../common/utils/string';\nimport usernameHelper from '../../common/helpers/username';\nimport icon from '../../common/helpers/icon';\nimport Link from '../../common/components/Link';\n\nconst Post = await import(/* webpackChunkName: \"forum/components/Post\" */ './Post');\n\n/**\n * The `EventPost` component displays a post which indicating a discussion\n * event, like a discussion being renamed or stickied. Subclasses must implement\n * the `icon` and `description` methods.\n *\n * ### Attrs\n *\n * - All of the attrs for `Post`\n *\n * @abstract\n */\nexport default class EventPost extends Post.default {\n  elementAttrs() {\n    const attrs = super.elementAttrs();\n\n    attrs.className = (attrs.className || '') + ' EventPost ' + ucfirst(this.attrs.post.contentType()) + 'Post';\n\n    return attrs;\n  }\n\n  content() {\n    const user = this.attrs.post.user();\n    const username = usernameHelper(user);\n    const data = Object.assign(this.descriptionData(), {\n      user,\n      username: user ? (\n        <Link className=\"EventPost-user\" href={app.route.user(user)}>\n          {username}\n        </Link>\n      ) : (\n        username\n      ),\n    });\n\n    return super.content().concat([icon(this.icon(), { className: 'EventPost-icon' }), <div class=\"EventPost-info\">{this.description(data)}</div>]);\n  }\n\n  /**\n   * Get the name of the event icon.\n   *\n   * @return {String}\n   */\n  icon() {\n    return '';\n  }\n\n  /**\n   * Get the description text for the event.\n   *\n   * @param {Object} data\n   * @return {String|Object} The description to render in the DOM\n   */\n  description(data) {\n    return app.translator.transChoice(this.descriptionKey(), data.count, data);\n  }\n\n  /**\n   * Get the translation key for the description of the event.\n   *\n   * @return {String}\n   */\n  descriptionKey() {\n    return '';\n  }\n\n  /**\n   * Get the translation data for the description of the event.\n   *\n   * @return {Object}\n   */\n  descriptionData() {\n    return {};\n  }\n}\n\nwindow.flreg.add('components/EventPost', EventPost)","import Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\n\n/**\n * The `LoadingPost` component shows a placeholder that looks like a post,\n * indicating that the post is loading.\n */\nexport default class LoadingPost extends Component {\n  view() {\n    return (\n      <div className=\"Post CommentPost LoadingPost\">\n        <header className=\"Post-header\">\n          {avatar(null, { className: 'PostUser-avatar' })}\n          <div className=\"fakeText\" />\n        </header>\n\n        <div className=\"Post-body\">\n          <div className=\"fakeText\" />\n          <div className=\"fakeText\" />\n          <div className=\"fakeText\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nwindow.flreg.add('components/LoadingPost', LoadingPost)","import Component from '../../common/Component';\nimport humanTime from '../../common/utils/humanTime';\nimport extractText from '../../common/utils/extractText';\n\n/**\n * The `PostEdited` component displays information about when and by whom a post\n * was edited.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class PostEdited extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.shouldUpdateTooltip = false;\n    this.oldEditedInfo = null;\n  }\n\n  view() {\n    const post = this.attrs.post;\n    const editedUser = post.editedUser();\n    const editedInfo = extractText(app.translator.trans('core.forum.post.edited_tooltip', { user: editedUser, ago: humanTime(post.editedAt()) }));\n    if (editedInfo !== this.oldEditedInfo) {\n      this.shouldUpdateTooltip = true;\n      this.oldEditedInfo = editedInfo;\n    }\n\n    return (\n      <span className=\"PostEdited\" title={editedInfo}>\n        {app.translator.trans('core.forum.post.edited_text')}\n      </span>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.rebuildTooltip();\n  }\n\n  onupdate() {\n    this.rebuildTooltip();\n  }\n\n  rebuildTooltip() {\n    if (this.shouldUpdateTooltip) {\n      this.$().tooltip('destroy').tooltip();\n      this.shouldUpdateTooltip = false;\n    }\n  }\n}\n\nwindow.flreg.add('components/PostEdited', PostEdited)","import Component from '../../common/Component';\nimport humanTime from '../../common/helpers/humanTime';\nimport fullTime from '../../common/helpers/fullTime';\n\n/**\n * The `PostMeta` component displays the time of a post, and when clicked, shows\n * a dropdown containing more information about the post (number, full time,\n * permalink).\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class PostMeta extends Component {\n  view() {\n    const post = this.attrs.post;\n    const time = post.createdAt();\n    const permalink = this.getPermalink(post);\n    const touch = 'ontouchstart' in document.documentElement;\n\n    // When the dropdown menu is shown, select the contents of the permalink\n    // input so that the user can quickly copy the URL.\n    const selectPermalink = function (e) {\n      setTimeout(() => $(this).parent().find('.PostMeta-permalink').select());\n\n      e.redraw = false;\n    };\n\n    return (\n      <div className=\"Dropdown PostMeta\">\n        <a className=\"Dropdown-toggle\" onclick={selectPermalink} data-toggle=\"dropdown\">\n          {humanTime(time)}\n        </a>\n\n        <div className=\"Dropdown-menu dropdown-menu\">\n          <span className=\"PostMeta-number\">{app.translator.trans('core.forum.post.number_tooltip', { number: post.number() })}</span>{' '}\n          <span className=\"PostMeta-time\">{fullTime(time)}</span> <span className=\"PostMeta-ip\">{post.data.attributes.ipAddress}</span>\n          {touch ? (\n            <a className=\"Button PostMeta-permalink\" href={permalink}>\n              {permalink}\n            </a>\n          ) : (\n            <input className=\"FormControl PostMeta-permalink\" value={permalink} onclick={(e) => e.stopPropagation()} />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Get the permalink for the given post.\n   *\n   * @param {Post} post\n   * @returns {String}\n   */\n  getPermalink(post) {\n    return window.location.origin + app.route.post(post);\n  }\n}\n\nwindow.flreg.add('components/PostMeta', PostMeta)","import Component from '../../common/Component';\nimport ScrollListener from '../../common/utils/ScrollListener';\nimport PostLoading from './LoadingPost';\nimport ReplyPlaceholder from './ReplyPlaceholder';\nimport Button from '../../common/components/Button';\nimport CommentPost from './CommentPost';\nimport DiscussionRenamedPost from './DiscussionRenamedPost';\n\n/**\n * The `PostStream` component displays an infinitely-scrollable wall of posts in\n * a discussion. Posts that have not loaded will be displayed as placeholders.\n *\n * ### Attrs\n *\n * - `discussion`\n * - `stream`\n * - `targetPost`\n * - `onPositionChange`\n */\nexport default class PostStream extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.discussion = this.attrs.discussion;\n    this.stream = this.attrs.stream;\n\n    this.scrollListener = new ScrollListener(this.onscroll.bind(this));\n  }\n\n  /**\n   * A map of post types to their components.\n   *\n   * @type {Object}\n   */\n  postComponents() {\n    return {\n      comment: CommentPost,\n      discussionRenamed: DiscussionRenamedPost,\n    };\n  }\n\n  view() {\n    let lastTime;\n\n    const viewingEnd = this.stream.viewingEnd();\n    const posts = this.stream.posts();\n    const postIds = this.discussion.postIds();\n\n    const postFadeIn = (vnode) => {\n      $(vnode.dom).addClass('fadeIn');\n      // 500 is the duration of the fadeIn CSS animation + 100ms,\n      // so the animation has time to complete\n      setTimeout(() => $(vnode.dom).removeClass('fadeIn'), 500);\n    };\n\n    const items = posts.map((post, i) => {\n      let content;\n      const attrs = { 'data-index': this.stream.visibleStart + i };\n\n      if (post) {\n        const time = post.createdAt();\n        const PostComponent = this.postComponents()[post.contentType()];\n        content = PostComponent ? PostComponent.component({ post }) : '';\n\n        attrs.key = 'post' + post.id();\n        attrs.oncreate = postFadeIn;\n        attrs['data-time'] = time.toISOString();\n        attrs['data-number'] = post.number();\n        attrs['data-id'] = post.id();\n        attrs['data-type'] = post.contentType();\n\n        // If the post before this one was more than 4 days ago, we will\n        // display a 'time gap' indicating how long it has been in between\n        // the posts.\n        const dt = time - lastTime;\n\n        if (dt > 1000 * 60 * 60 * 24 * 4) {\n          content = [\n            <div className=\"PostStream-timeGap\">\n              <span>{app.translator.trans('core.forum.post_stream.time_lapsed_text', { period: dayjs().add(dt, 'ms').fromNow(true) })}</span>\n            </div>,\n            content,\n          ];\n        }\n\n        lastTime = time;\n      } else {\n        attrs.key = 'post' + postIds[this.stream.visibleStart + i];\n\n        content = PostLoading.component();\n      }\n\n      return (\n        <div className=\"PostStream-item\" {...attrs}>\n          {content}\n        </div>\n      );\n    });\n\n    if (!viewingEnd && posts[this.stream.visibleEnd - this.stream.visibleStart - 1]) {\n      items.push(\n        <div className=\"PostStream-loadMore\" key=\"loadMore\">\n          <Button className=\"Button\" onclick={this.stream.loadNext.bind(this.stream)}>\n            {app.translator.trans('core.forum.post_stream.load_more_button')}\n          </Button>\n        </div>\n      );\n    }\n\n    // If we're viewing the end of the discussion, the user can reply, and\n    // is not already doing so, then show a 'write a reply' placeholder.\n    if (viewingEnd && (!app.session.user || this.discussion.canReply())) {\n      items.push(\n        <div className=\"PostStream-item\" key=\"reply\" data-index={this.stream.count()} oncreate={postFadeIn}>\n          {ReplyPlaceholder.component({ discussion: this.discussion })}\n        </div>\n      );\n    }\n\n    return <div className=\"PostStream\">{items}</div>;\n  }\n\n  onupdate() {\n    this.triggerScroll();\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.triggerScroll();\n\n    // This is wrapped in setTimeout due to the following Mithril issue:\n    // https://github.com/lhorie/mithril.js/issues/637\n    setTimeout(() => this.scrollListener.start());\n  }\n\n  onremove() {\n    this.scrollListener.stop();\n    clearTimeout(this.calculatePositionTimeout);\n  }\n\n  /**\n   * Start scrolling, if appropriate, to a newly-targeted post.\n   */\n  triggerScroll() {\n    if (!this.stream.needsScroll) return;\n\n    const target = this.stream.targetPost;\n    this.stream.needsScroll = false;\n\n    if ('number' in target) {\n      this.scrollToNumber(target.number, this.stream.animateScroll);\n    } else if ('index' in target) {\n      this.scrollToIndex(target.index, this.stream.animateScroll, target.reply);\n    }\n  }\n\n  /**\n   *\n   * @param {Integer} top\n   */\n  onscroll(top = window.pageYOffset) {\n    if (this.stream.paused || this.stream.pagesLoading) return;\n\n    this.updateScrubber(top);\n\n    this.loadPostsIfNeeded(top);\n\n    // Throttle calculation of our position (start/end numbers of posts in the\n    // viewport) to 100ms.\n    clearTimeout(this.calculatePositionTimeout);\n    this.calculatePositionTimeout = setTimeout(this.calculatePosition.bind(this, top), 100);\n  }\n\n  /**\n   * Check if either extreme of the post stream is in the viewport,\n   * and if so, trigger loading the next/previous page.\n   *\n   * @param {Integer} top\n   */\n  loadPostsIfNeeded(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n    const loadAheadDistance = 300;\n\n    if (this.stream.visibleStart > 0) {\n      const $item = this.$('.PostStream-item[data-index=' + this.stream.visibleStart + ']');\n\n      if ($item.length && $item.offset().top > viewportTop - loadAheadDistance) {\n        this.stream.loadPrevious();\n      }\n    }\n\n    if (this.stream.visibleEnd < this.stream.count()) {\n      const $item = this.$('.PostStream-item[data-index=' + (this.stream.visibleEnd - 1) + ']');\n\n      if ($item.length && $item.offset().top + $item.outerHeight(true) < viewportTop + viewportHeight + loadAheadDistance) {\n        this.stream.loadNext();\n      }\n    }\n  }\n\n  updateScrubber(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n\n    // Before looping through all of the posts, we reset the scrollbar\n    // properties to a 'default' state. These values reflect what would be\n    // seen if the browser were scrolled right up to the top of the page,\n    // and the viewport had a height of 0.\n    const $items = this.$('.PostStream-item[data-index]');\n    let visible = 0;\n    let period = '';\n    let indexFromViewPort = null;\n\n    // Now loop through each of the items in the discussion. An 'item' is\n    // either a single post or a 'gap' of one or more posts that haven't\n    // been loaded yet.\n    $items.each(function () {\n      const $this = $(this);\n      const top = $this.offset().top;\n      const height = $this.outerHeight(true);\n\n      // If this item is above the top of the viewport, skip to the next\n      // one. If it's below the bottom of the viewport, break out of the\n      // loop.\n      if (top + height < viewportTop) {\n        return true;\n      }\n      if (top > viewportTop + viewportHeight) {\n        return false;\n      }\n\n      // Work out how many pixels of this item are visible inside the viewport.\n      // Then add the proportion of this item's total height to the index.\n      const visibleTop = Math.max(0, viewportTop - top);\n      const visibleBottom = Math.min(height, viewportTop + viewportHeight - top);\n      const visiblePost = visibleBottom - visibleTop;\n\n      // We take the index of the first item that passed the previous checks.\n      // It is the item that is first visible in the viewport.\n      if (indexFromViewPort === null) {\n        indexFromViewPort = parseFloat($this.data('index')) + visibleTop / height;\n      }\n\n      if (visiblePost > 0) {\n        visible += visiblePost / height;\n      }\n\n      // If this item has a time associated with it, then set the\n      // scrollbar's current period to a formatted version of this time.\n      const time = $this.data('time');\n      if (time) period = time;\n    });\n\n    // If indexFromViewPort is null, it means no posts are visible in the\n    // viewport. This can happen, when drafting a long reply post. In that case\n    // set the index to the last post.\n    this.stream.index = indexFromViewPort !== null ? indexFromViewPort + 1 : this.stream.count();\n    this.stream.visible = visible;\n    if (period) this.stream.description = dayjs(period).format('MMMM YYYY');\n  }\n\n  /**\n   * Work out which posts (by number) are currently visible in the viewport, and\n   * fire an event with the information.\n   */\n  calculatePosition(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const $window = $(window);\n    const viewportHeight = $window.height() - marginTop;\n    const scrollTop = $window.scrollTop() + marginTop;\n    const viewportTop = top + marginTop;\n\n    let startNumber;\n    let endNumber;\n\n    this.$('.PostStream-item').each(function () {\n      const $item = $(this);\n      const top = $item.offset().top;\n      const height = $item.outerHeight(true);\n      const visibleTop = Math.max(0, viewportTop - top);\n\n      const threeQuartersVisible = visibleTop / height < 0.75;\n      const coversQuarterOfViewport = (height - visibleTop) / viewportHeight > 0.25;\n      if (startNumber === undefined && (threeQuartersVisible || coversQuarterOfViewport)) {\n        startNumber = $item.data('number');\n      }\n\n      if (top + height > scrollTop) {\n        if (top + height < scrollTop + viewportHeight) {\n          if ($item.data('number')) {\n            endNumber = $item.data('number');\n          }\n        } else return false;\n      }\n    });\n\n    if (startNumber) {\n      this.attrs.onPositionChange(startNumber || 1, endNumber, startNumber);\n    }\n  }\n\n  /**\n   * Get the distance from the top of the viewport to the point at which we\n   * would consider a post to be the first one visible.\n   *\n   * @return {Integer}\n   */\n  getMarginTop() {\n    const headerId = app.screen() === 'phone' ? '#app-navigation' : '#header';\n\n    return this.$() && $(headerId).outerHeight() + parseInt(this.$().css('margin-top'), 10);\n  }\n\n  /**\n   * Scroll down to a certain post by number and 'flash' it.\n   *\n   * @param {Integer} number\n   * @param {Boolean} animate\n   * @return {jQuery.Deferred}\n   */\n  scrollToNumber(number, animate) {\n    const $item = this.$(`.PostStream-item[data-number=${number}]`);\n\n    return this.scrollToItem($item, animate).then(this.flashItem.bind(this, $item));\n  }\n\n  /**\n   * Scroll down to a certain post by index.\n   *\n   * @param {Integer} index\n   * @param {Boolean} animate\n   * @param {Boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {jQuery.Deferred}\n   */\n  scrollToIndex(index, animate, reply) {\n    const $item = reply ? $('.PostStream-item:last-child') : this.$(`.PostStream-item[data-index=${index}]`);\n\n    this.scrollToItem($item, animate, true, reply);\n\n    if (reply) {\n      this.flashItem($item);\n    }\n  }\n\n  /**\n   * Scroll down to the given post.\n   *\n   * @param {jQuery} $item\n   * @param {Boolean} animate\n   * @param {Boolean} force Whether or not to force scrolling to the item, even\n   *     if it is already in the viewport.\n   * @param {Boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {jQuery.Deferred}\n   */\n  scrollToItem($item, animate, force, reply) {\n    const $container = $('html, body').stop(true);\n    const index = $item.data('index');\n\n    if ($item.length) {\n      const itemTop = $item.offset().top - this.getMarginTop();\n      const itemBottom = $item.offset().top + $item.height();\n      const scrollTop = $(document).scrollTop();\n      const scrollBottom = scrollTop + $(window).height();\n\n      // If the item is already in the viewport, we may not need to scroll.\n      // If we're scrolling to the reply placeholder, we'll make sure its\n      // bottom will line up with the top of the composer.\n      if (force || itemTop < scrollTop || itemBottom > scrollBottom) {\n        const top = reply ? itemBottom - $(window).height() + app.composer.computedHeight() : $item.is(':first-child') ? 0 : itemTop;\n\n        if (!animate) {\n          $container.scrollTop(top);\n        } else if (top !== scrollTop) {\n          $container.animate({ scrollTop: top }, 'fast');\n        }\n      }\n    }\n\n    const updateScrubberHeight = () => {\n      // We manually set the index because we want to display the index of the\n      // exact post we've scrolled to, not just that of the first post within viewport.\n      this.updateScrubber();\n      if (index !== undefined) this.stream.index = index + 1;\n    };\n\n    // If we don't update this before the scroll, the scrubber will start\n    // at the top, and animate down, which can be confusing\n    updateScrubberHeight();\n    this.stream.forceUpdateScrubber = true;\n\n    return Promise.all([$container.promise(), this.stream.loadPromise]).then(() => {\n      m.redraw.sync();\n\n      // Rendering post contents will probably throw off our position.\n      // To counter this, we'll scroll either:\n      //   - To the reply placeholder (aligned with composer top)\n      //   - To the top of the page if we're on the first post\n      //   - To the top of a post (if that post exists)\n      // If the post does not currently exist, it's probably\n      // outside of the range we loaded in, so we won't adjust anything,\n      // as it will soon be rendered by the \"load more\" system.\n      let itemOffset;\n      if (reply) {\n        const $placeholder = $('.PostStream-item:last-child');\n        $(window).scrollTop($placeholder.offset().top + $placeholder.height() - $(window).height() + app.composer.computedHeight());\n      } else if (index === 0) {\n        $(window).scrollTop(0);\n      } else if ((itemOffset = $(`.PostStream-item[data-index=${index}]`).offset())) {\n        $(window).scrollTop(itemOffset.top - this.getMarginTop());\n      }\n\n      // We want to adjust this again after posts have been loaded in\n      // and position adjusted so that the scrubber's height is accurate.\n      updateScrubberHeight();\n\n      this.calculatePosition();\n      this.stream.paused = false;\n      // Check if we need to load more posts after scrolling.\n      this.loadPostsIfNeeded();\n    });\n  }\n\n  /**\n   * 'Flash' the given post, drawing the user's attention to it.\n   *\n   * @param {jQuery} $item\n   */\n  flashItem($item) {\n    // This might execute before the fadeIn class has been removed in PostStreamItem's\n    // oncreate, so we remove it just to be safe and avoid a double animation.\n    $item.removeClass('fadeIn');\n    $item.addClass('flash').on('animationend webkitAnimationEnd', (e) => {\n      $item.removeClass('flash');\n    });\n  }\n}\n//Flarum Asynchronous Module\n","/*global s9e*/\n\nimport Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport username from '../../common/helpers/username';\nimport DiscussionControls from '../utils/DiscussionControls';\nimport ComposerPostPreview from './ComposerPostPreview';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `ReplyPlaceholder` component displays a placeholder for a reply, which,\n * when clicked, opens the reply composer.\n *\n * ### Attrs\n *\n * - `discussion`\n */\nexport default class ReplyPlaceholder extends Component {\n  view() {\n    if (app.composer.composingReplyTo(this.attrs.discussion)) {\n      return (\n        <article className=\"Post CommentPost editing\">\n          <header className=\"Post-header\">\n            <div className=\"PostUser\">\n              <h3>\n                {avatar(app.session.user, { className: 'PostUser-avatar' })}\n                {username(app.session.user)}\n              </h3>\n              <ul className=\"PostUser-badges badges\">{listItems(app.session.user.badges().toArray())}</ul>\n            </div>\n          </header>\n          <ComposerPostPreview className=\"Post-body\" composer={app.composer} surround={this.anchorPreview.bind(this)} />\n        </article>\n      );\n    }\n\n    const reply = () => {\n      DiscussionControls.replyAction.call(this.attrs.discussion, true).catch(() => {});\n    };\n\n    return (\n      <article className=\"Post ReplyPlaceholder\" onclick={reply}>\n        <header className=\"Post-header\">\n          {avatar(app.session.user, { className: 'PostUser-avatar' })} {app.translator.trans('core.forum.post_stream.reply_placeholder')}\n        </header>\n      </article>\n    );\n  }\n\n  anchorPreview(preview) {\n    const anchorToBottom = $(window).scrollTop() + $(window).height() >= $(document).height();\n\n    preview();\n\n    if (anchorToBottom) {\n      $(window).scrollTop($(document).height());\n    }\n  }\n}\n\nwindow.flreg.add('components/ReplyPlaceholder', ReplyPlaceholder)"],"sourceRoot":""}