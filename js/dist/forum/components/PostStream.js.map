{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/CommentPost.js","webpack://@flarum/core/./src/forum/components/ReplyPlaceholder.js","webpack://@flarum/core/./src/forum/components/DiscussionRenamedPost.js","webpack://@flarum/core/./src/forum/components/PostStream.js"],"names":["CommentPost","oninit","vnode","this","revealContent","cardVisible","subtree","check","isEditing","content","concat","className","listItems","headerItems","toArray","composer","app","m","trust","attrs","post","contentHtml","refreshContent","$","each","script","document","createElement","textContent","Array","from","attributes","forEach","attr","setAttribute","name","value","parentNode","replaceChild","oncreate","onupdate","then","EditPostComposer","bodyMatches","elementAttrs","classList","isHidden","isEdited","editing","toggleContent","items","ItemList","add","PostUser","oncardshow","redraw","oncardhide","PostMeta","PostEdited","Button","icon","onclick","bind","Post","ReplyPlaceholder","view","composingReplyTo","discussion","avatar","session","user","username","badges","ComposerPostPreview","surround","anchorPreview","DiscussionControls","translator","trans","preview","anchorToBottom","window","scrollTop","height","Component","DiscussionRenamedPost","description","data","renamed","oldName","title","extractText","descriptionData","oldTitle","newTitle","old","new","EventPost","PostStream","stream","scrollListener","ScrollListener","onscroll","postComponents","comment","discussionRenamed","lastTime","viewingEnd","posts","postIds","postFadeIn","dom","addClass","setTimeout","removeClass","map","i","visibleStart","time","createdAt","PostComponent","contentType","component","key","id","toISOString","number","dt","period","dayjs","fromNow","PostLoading","visibleEnd","push","loadNext","canReply","data-index","count","triggerScroll","start","onremove","stop","clearTimeout","calculatePositionTimeout","needsScroll","target","targetPost","scrollToNumber","animateScroll","scrollToIndex","index","reply","top","pageYOffset","paused","pagesLoading","updateScrubber","loadPostsIfNeeded","calculatePosition","marginTop","getMarginTop","viewportHeight","viewportTop","$item","length","offset","loadPrevious","outerHeight","$items","visible","indexFromViewPort","$this","visibleTop","Math","max","visiblePost","min","parseFloat","format","startNumber","endNumber","$window","undefined","onPositionChange","headerId","screen","parseInt","css","animate","scrollToItem","flashItem","force","$container","itemTop","itemBottom","scrollBottom","computedHeight","is","updateScrubberHeight","forceUpdateScrubber","Promise","all","promise","loadPromise","itemOffset","sync","$placeholder","on","e"],"mappings":"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","file":"forum/components/PostStream.js","sourcesContent":["import Post from './Post';\nimport classList from '../../common/utils/classList';\nimport PostUser from './PostUser';\nimport PostMeta from './PostMeta';\nimport PostEdited from './PostEdited';\nimport ItemList from '../../common/utils/ItemList';\nimport listItems from '../../common/helpers/listItems';\nimport Button from '../../common/components/Button';\nimport ComposerPostPreview from './ComposerPostPreview';\n\n/**\n * The `CommentPost` component displays a standard `comment`-typed post. This\n * includes a number of item lists (controls, header, and footer) surrounding\n * the post's HTML content.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class CommentPost extends Post {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * If the post has been hidden, then this flag determines whether or not its\n     * content has been expanded.\n     *\n     * @type {Boolean}\n     */\n    this.revealContent = false;\n\n    /**\n     * Whether or not the user hover card inside of PostUser is visible.\n     * The property must be managed in CommentPost to be able to use it in the subtree check\n     *\n     * @type {Boolean}\n     */\n    this.cardVisible = false;\n\n    this.subtree.check(\n      () => this.cardVisible,\n      () => this.isEditing(),\n      () => this.revealContent\n    );\n  }\n\n  content() {\n    return super.content().concat([\n      <header className=\"Post-header\">\n        <ul>{listItems(this.headerItems().toArray())}</ul>\n      </header>,\n      <div className=\"Post-body\">\n        {this.isEditing() ? <ComposerPostPreview className=\"Post-preview\" composer={app.composer} /> : m.trust(this.attrs.post.contentHtml())}\n      </div>,\n    ]);\n  }\n\n  refreshContent() {\n    const contentHtml = this.isEditing() ? '' : this.attrs.post.contentHtml();\n\n    // If the post content has changed since the last render, we'll run through\n    // all of the <script> tags in the content and evaluate them. This is\n    // necessary because TextFormatter outputs them for e.g. syntax highlighting.\n    if (this.contentHtml !== contentHtml) {\n      this.$('.Post-body script').each(function () {\n        const script = document.createElement('script');\n        script.textContent = this.textContent;\n        Array.from(this.attributes).forEach((attr) => script.setAttribute(attr.name, attr.value));\n        this.parentNode.replaceChild(script, this);\n      });\n    }\n\n    this.contentHtml = contentHtml;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.refreshContent();\n  }\n\n  onupdate(vnode) {\n    super.onupdate(vnode);\n\n    this.refreshContent();\n  }\n\n  isEditing() {\n    import(/* webpackChunkName: \"forum/components/EditPostComposer\" */ './EditPostComposer').then((EditPostComposer) => {\n      return app.composer.bodyMatches(EditPostComposer.default, { post: this.attrs.post });\n    });\n  }\n\n  elementAttrs() {\n    const post = this.attrs.post;\n    const attrs = super.elementAttrs();\n\n    attrs.className =\n      (attrs.className || '') +\n      ' ' +\n      classList({\n        CommentPost: true,\n        'Post--hidden': post.isHidden(),\n        'Post--edited': post.isEdited(),\n        revealContent: this.revealContent,\n        editing: this.isEditing(),\n      });\n\n    return attrs;\n  }\n\n  /**\n   * Toggle the visibility of a hidden post's content.\n   */\n  toggleContent() {\n    this.revealContent = !this.revealContent;\n  }\n\n  /**\n   * Build an item list for the post's header.\n   *\n   * @return {ItemList}\n   */\n  headerItems() {\n    const items = new ItemList();\n    const post = this.attrs.post;\n\n    items.add(\n      'user',\n      PostUser.component({\n        post,\n        cardVisible: this.cardVisible,\n        oncardshow: () => {\n          this.cardVisible = true;\n          m.redraw();\n        },\n        oncardhide: () => {\n          this.cardVisible = false;\n          m.redraw();\n        },\n      }),\n      100\n    );\n    items.add('meta', PostMeta.component({ post }));\n\n    if (post.isEdited() && !post.isHidden()) {\n      items.add('edited', PostEdited.component({ post }));\n    }\n\n    // If the post is hidden, add a button that allows toggling the visibility\n    // of the post's content.\n    if (post.isHidden()) {\n      items.add(\n        'toggle',\n        Button.component({\n          className: 'Button Button--default Button--more',\n          icon: 'fas fa-ellipsis-h',\n          onclick: this.toggleContent.bind(this),\n        })\n      );\n    }\n\n    return items;\n  }\n}\n","/*global s9e*/\n\nimport Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport username from '../../common/helpers/username';\nimport DiscussionControls from '../utils/DiscussionControls';\nimport ComposerPostPreview from './ComposerPostPreview';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `ReplyPlaceholder` component displays a placeholder for a reply, which,\n * when clicked, opens the reply composer.\n *\n * ### Attrs\n *\n * - `discussion`\n */\nexport default class ReplyPlaceholder extends Component {\n  view() {\n    if (app.composer.composingReplyTo(this.attrs.discussion)) {\n      return (\n        <article className=\"Post CommentPost editing\">\n          <header className=\"Post-header\">\n            <div className=\"PostUser\">\n              <h3>\n                {avatar(app.session.user, { className: 'PostUser-avatar' })}\n                {username(app.session.user)}\n              </h3>\n              <ul className=\"PostUser-badges badges\">{listItems(app.session.user.badges().toArray())}</ul>\n            </div>\n          </header>\n          <ComposerPostPreview className=\"Post-body\" composer={app.composer} surround={this.anchorPreview.bind(this)} />\n        </article>\n      );\n    }\n\n    const reply = () => {\n      DiscussionControls.replyAction.call(this.attrs.discussion, true).catch(() => {});\n    };\n\n    return (\n      <article className=\"Post ReplyPlaceholder\" onclick={reply}>\n        <header className=\"Post-header\">\n          {avatar(app.session.user, { className: 'PostUser-avatar' })} {app.translator.trans('core.forum.post_stream.reply_placeholder')}\n        </header>\n      </article>\n    );\n  }\n\n  anchorPreview(preview) {\n    const anchorToBottom = $(window).scrollTop() + $(window).height() >= $(document).height();\n\n    preview();\n\n    if (anchorToBottom) {\n      $(window).scrollTop($(document).height());\n    }\n  }\n}\n","import EventPost from './EventPost';\nimport extractText from '../../common/utils/extractText';\n\n/**\n * The `DiscussionRenamedPost` component displays a discussion event post\n * indicating that the discussion has been renamed.\n *\n * ### Attrs\n *\n * - All of the attrs for EventPost\n */\nexport default class DiscussionRenamedPost extends EventPost {\n  icon() {\n    return 'fas fa-pencil-alt';\n  }\n\n  description(data) {\n    const renamed = app.translator.trans('core.forum.post_stream.discussion_renamed_text', data);\n    const oldName = app.translator.trans('core.forum.post_stream.discussion_renamed_old_tooltip', data);\n\n    return <span title={extractText(oldName)}>{renamed}</span>;\n  }\n\n  descriptionData() {\n    const post = this.attrs.post;\n    const oldTitle = post.content()[0];\n    const newTitle = post.content()[1];\n\n    return {\n      old: oldTitle,\n      new: <strong className=\"DiscussionRenamedPost-new\">{newTitle}</strong>,\n    };\n  }\n}\n","import Component from '../../common/Component';\nimport ScrollListener from '../../common/utils/ScrollListener';\nimport PostLoading from './LoadingPost';\nimport ReplyPlaceholder from './ReplyPlaceholder';\nimport Button from '../../common/components/Button';\nimport CommentPost from './CommentPost';\nimport DiscussionRenamedPost from './DiscussionRenamedPost';\n\n/**\n * The `PostStream` component displays an infinitely-scrollable wall of posts in\n * a discussion. Posts that have not loaded will be displayed as placeholders.\n *\n * ### Attrs\n *\n * - `discussion`\n * - `stream`\n * - `targetPost`\n * - `onPositionChange`\n */\nexport default class PostStream extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.discussion = this.attrs.discussion;\n    this.stream = this.attrs.stream;\n\n    this.scrollListener = new ScrollListener(this.onscroll.bind(this));\n  }\n\n  /**\n   * A map of post types to their components.\n   *\n   * @type {Object}\n   */\n  postComponents() {\n    return {\n      comment: CommentPost,\n      discussionRenamed: DiscussionRenamedPost,\n    };\n  }\n\n  view() {\n    let lastTime;\n\n    const viewingEnd = this.stream.viewingEnd();\n    const posts = this.stream.posts();\n    const postIds = this.discussion.postIds();\n\n    const postFadeIn = (vnode) => {\n      $(vnode.dom).addClass('fadeIn');\n      // 500 is the duration of the fadeIn CSS animation + 100ms,\n      // so the animation has time to complete\n      setTimeout(() => $(vnode.dom).removeClass('fadeIn'), 500);\n    };\n\n    const items = posts.map((post, i) => {\n      let content;\n      const attrs = { 'data-index': this.stream.visibleStart + i };\n\n      if (post) {\n        const time = post.createdAt();\n        const PostComponent = this.postComponents()[post.contentType()];\n        content = PostComponent ? PostComponent.component({ post }) : '';\n\n        attrs.key = 'post' + post.id();\n        attrs.oncreate = postFadeIn;\n        attrs['data-time'] = time.toISOString();\n        attrs['data-number'] = post.number();\n        attrs['data-id'] = post.id();\n        attrs['data-type'] = post.contentType();\n\n        // If the post before this one was more than 4 days ago, we will\n        // display a 'time gap' indicating how long it has been in between\n        // the posts.\n        const dt = time - lastTime;\n\n        if (dt > 1000 * 60 * 60 * 24 * 4) {\n          content = [\n            <div className=\"PostStream-timeGap\">\n              <span>{app.translator.trans('core.forum.post_stream.time_lapsed_text', { period: dayjs().add(dt, 'ms').fromNow(true) })}</span>\n            </div>,\n            content,\n          ];\n        }\n\n        lastTime = time;\n      } else {\n        attrs.key = 'post' + postIds[this.stream.visibleStart + i];\n\n        content = PostLoading.component();\n      }\n\n      return (\n        <div className=\"PostStream-item\" {...attrs}>\n          {content}\n        </div>\n      );\n    });\n\n    if (!viewingEnd && posts[this.stream.visibleEnd - this.stream.visibleStart - 1]) {\n      items.push(\n        <div className=\"PostStream-loadMore\" key=\"loadMore\">\n          <Button className=\"Button\" onclick={this.stream.loadNext.bind(this.stream)}>\n            {app.translator.trans('core.forum.post_stream.load_more_button')}\n          </Button>\n        </div>\n      );\n    }\n\n    // If we're viewing the end of the discussion, the user can reply, and\n    // is not already doing so, then show a 'write a reply' placeholder.\n    if (viewingEnd && (!app.session.user || this.discussion.canReply())) {\n      items.push(\n        <div className=\"PostStream-item\" key=\"reply\" data-index={this.stream.count()} oncreate={postFadeIn}>\n          {ReplyPlaceholder.component({ discussion: this.discussion })}\n        </div>\n      );\n    }\n\n    return <div className=\"PostStream\">{items}</div>;\n  }\n\n  onupdate() {\n    this.triggerScroll();\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.triggerScroll();\n\n    // This is wrapped in setTimeout due to the following Mithril issue:\n    // https://github.com/lhorie/mithril.js/issues/637\n    setTimeout(() => this.scrollListener.start());\n  }\n\n  onremove() {\n    this.scrollListener.stop();\n    clearTimeout(this.calculatePositionTimeout);\n  }\n\n  /**\n   * Start scrolling, if appropriate, to a newly-targeted post.\n   */\n  triggerScroll() {\n    if (!this.stream.needsScroll) return;\n\n    const target = this.stream.targetPost;\n    this.stream.needsScroll = false;\n\n    if ('number' in target) {\n      this.scrollToNumber(target.number, this.stream.animateScroll);\n    } else if ('index' in target) {\n      this.scrollToIndex(target.index, this.stream.animateScroll, target.reply);\n    }\n  }\n\n  /**\n   *\n   * @param {Integer} top\n   */\n  onscroll(top = window.pageYOffset) {\n    if (this.stream.paused || this.stream.pagesLoading) return;\n\n    this.updateScrubber(top);\n\n    this.loadPostsIfNeeded(top);\n\n    // Throttle calculation of our position (start/end numbers of posts in the\n    // viewport) to 100ms.\n    clearTimeout(this.calculatePositionTimeout);\n    this.calculatePositionTimeout = setTimeout(this.calculatePosition.bind(this, top), 100);\n  }\n\n  /**\n   * Check if either extreme of the post stream is in the viewport,\n   * and if so, trigger loading the next/previous page.\n   *\n   * @param {Integer} top\n   */\n  loadPostsIfNeeded(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n    const loadAheadDistance = 300;\n\n    if (this.stream.visibleStart > 0) {\n      const $item = this.$('.PostStream-item[data-index=' + this.stream.visibleStart + ']');\n\n      if ($item.length && $item.offset().top > viewportTop - loadAheadDistance) {\n        this.stream.loadPrevious();\n      }\n    }\n\n    if (this.stream.visibleEnd < this.stream.count()) {\n      const $item = this.$('.PostStream-item[data-index=' + (this.stream.visibleEnd - 1) + ']');\n\n      if ($item.length && $item.offset().top + $item.outerHeight(true) < viewportTop + viewportHeight + loadAheadDistance) {\n        this.stream.loadNext();\n      }\n    }\n  }\n\n  updateScrubber(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const viewportHeight = $(window).height() - marginTop;\n    const viewportTop = top + marginTop;\n\n    // Before looping through all of the posts, we reset the scrollbar\n    // properties to a 'default' state. These values reflect what would be\n    // seen if the browser were scrolled right up to the top of the page,\n    // and the viewport had a height of 0.\n    const $items = this.$('.PostStream-item[data-index]');\n    let visible = 0;\n    let period = '';\n    let indexFromViewPort = null;\n\n    // Now loop through each of the items in the discussion. An 'item' is\n    // either a single post or a 'gap' of one or more posts that haven't\n    // been loaded yet.\n    $items.each(function () {\n      const $this = $(this);\n      const top = $this.offset().top;\n      const height = $this.outerHeight(true);\n\n      // If this item is above the top of the viewport, skip to the next\n      // one. If it's below the bottom of the viewport, break out of the\n      // loop.\n      if (top + height < viewportTop) {\n        return true;\n      }\n      if (top > viewportTop + viewportHeight) {\n        return false;\n      }\n\n      // Work out how many pixels of this item are visible inside the viewport.\n      // Then add the proportion of this item's total height to the index.\n      const visibleTop = Math.max(0, viewportTop - top);\n      const visibleBottom = Math.min(height, viewportTop + viewportHeight - top);\n      const visiblePost = visibleBottom - visibleTop;\n\n      // We take the index of the first item that passed the previous checks.\n      // It is the item that is first visible in the viewport.\n      if (indexFromViewPort === null) {\n        indexFromViewPort = parseFloat($this.data('index')) + visibleTop / height;\n      }\n\n      if (visiblePost > 0) {\n        visible += visiblePost / height;\n      }\n\n      // If this item has a time associated with it, then set the\n      // scrollbar's current period to a formatted version of this time.\n      const time = $this.data('time');\n      if (time) period = time;\n    });\n\n    // If indexFromViewPort is null, it means no posts are visible in the\n    // viewport. This can happen, when drafting a long reply post. In that case\n    // set the index to the last post.\n    this.stream.index = indexFromViewPort !== null ? indexFromViewPort + 1 : this.stream.count();\n    this.stream.visible = visible;\n    if (period) this.stream.description = dayjs(period).format('MMMM YYYY');\n  }\n\n  /**\n   * Work out which posts (by number) are currently visible in the viewport, and\n   * fire an event with the information.\n   */\n  calculatePosition(top = window.pageYOffset) {\n    const marginTop = this.getMarginTop();\n    const $window = $(window);\n    const viewportHeight = $window.height() - marginTop;\n    const scrollTop = $window.scrollTop() + marginTop;\n    const viewportTop = top + marginTop;\n\n    let startNumber;\n    let endNumber;\n\n    this.$('.PostStream-item').each(function () {\n      const $item = $(this);\n      const top = $item.offset().top;\n      const height = $item.outerHeight(true);\n      const visibleTop = Math.max(0, viewportTop - top);\n\n      const threeQuartersVisible = visibleTop / height < 0.75;\n      const coversQuarterOfViewport = (height - visibleTop) / viewportHeight > 0.25;\n      if (startNumber === undefined && (threeQuartersVisible || coversQuarterOfViewport)) {\n        startNumber = $item.data('number');\n      }\n\n      if (top + height > scrollTop) {\n        if (top + height < scrollTop + viewportHeight) {\n          if ($item.data('number')) {\n            endNumber = $item.data('number');\n          }\n        } else return false;\n      }\n    });\n\n    if (startNumber) {\n      this.attrs.onPositionChange(startNumber || 1, endNumber, startNumber);\n    }\n  }\n\n  /**\n   * Get the distance from the top of the viewport to the point at which we\n   * would consider a post to be the first one visible.\n   *\n   * @return {Integer}\n   */\n  getMarginTop() {\n    const headerId = app.screen() === 'phone' ? '#app-navigation' : '#header';\n\n    return this.$() && $(headerId).outerHeight() + parseInt(this.$().css('margin-top'), 10);\n  }\n\n  /**\n   * Scroll down to a certain post by number and 'flash' it.\n   *\n   * @param {Integer} number\n   * @param {Boolean} animate\n   * @return {jQuery.Deferred}\n   */\n  scrollToNumber(number, animate) {\n    const $item = this.$(`.PostStream-item[data-number=${number}]`);\n\n    return this.scrollToItem($item, animate).then(this.flashItem.bind(this, $item));\n  }\n\n  /**\n   * Scroll down to a certain post by index.\n   *\n   * @param {Integer} index\n   * @param {Boolean} animate\n   * @param {Boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {jQuery.Deferred}\n   */\n  scrollToIndex(index, animate, reply) {\n    const $item = reply ? $('.PostStream-item:last-child') : this.$(`.PostStream-item[data-index=${index}]`);\n\n    this.scrollToItem($item, animate, true, reply);\n\n    if (reply) {\n      this.flashItem($item);\n    }\n  }\n\n  /**\n   * Scroll down to the given post.\n   *\n   * @param {jQuery} $item\n   * @param {Boolean} animate\n   * @param {Boolean} force Whether or not to force scrolling to the item, even\n   *     if it is already in the viewport.\n   * @param {Boolean} reply Whether or not to scroll to the reply placeholder.\n   * @return {jQuery.Deferred}\n   */\n  scrollToItem($item, animate, force, reply) {\n    const $container = $('html, body').stop(true);\n    const index = $item.data('index');\n\n    if ($item.length) {\n      const itemTop = $item.offset().top - this.getMarginTop();\n      const itemBottom = $item.offset().top + $item.height();\n      const scrollTop = $(document).scrollTop();\n      const scrollBottom = scrollTop + $(window).height();\n\n      // If the item is already in the viewport, we may not need to scroll.\n      // If we're scrolling to the reply placeholder, we'll make sure its\n      // bottom will line up with the top of the composer.\n      if (force || itemTop < scrollTop || itemBottom > scrollBottom) {\n        const top = reply ? itemBottom - $(window).height() + app.composer.computedHeight() : $item.is(':first-child') ? 0 : itemTop;\n\n        if (!animate) {\n          $container.scrollTop(top);\n        } else if (top !== scrollTop) {\n          $container.animate({ scrollTop: top }, 'fast');\n        }\n      }\n    }\n\n    const updateScrubberHeight = () => {\n      // We manually set the index because we want to display the index of the\n      // exact post we've scrolled to, not just that of the first post within viewport.\n      this.updateScrubber();\n      if (index !== undefined) this.stream.index = index + 1;\n    };\n\n    // If we don't update this before the scroll, the scrubber will start\n    // at the top, and animate down, which can be confusing\n    updateScrubberHeight();\n    this.stream.forceUpdateScrubber = true;\n\n    return Promise.all([$container.promise(), this.stream.loadPromise]).then(() => {\n      m.redraw.sync();\n\n      // Rendering post contents will probably throw off our position.\n      // To counter this, we'll scroll either:\n      //   - To the reply placeholder (aligned with composer top)\n      //   - To the top of the page if we're on the first post\n      //   - To the top of a post (if that post exists)\n      // If the post does not currently exist, it's probably\n      // outside of the range we loaded in, so we won't adjust anything,\n      // as it will soon be rendered by the \"load more\" system.\n      let itemOffset;\n      if (reply) {\n        const $placeholder = $('.PostStream-item:last-child');\n        $(window).scrollTop($placeholder.offset().top + $placeholder.height() - $(window).height() + app.composer.computedHeight());\n      } else if (index === 0) {\n        $(window).scrollTop(0);\n      } else if ((itemOffset = $(`.PostStream-item[data-index=${index}]`).offset())) {\n        $(window).scrollTop(itemOffset.top - this.getMarginTop());\n      }\n\n      // We want to adjust this again after posts have been loaded in\n      // and position adjusted so that the scrubber's height is accurate.\n      updateScrubberHeight();\n\n      this.calculatePosition();\n      this.stream.paused = false;\n      // Check if we need to load more posts after scrolling.\n      this.loadPostsIfNeeded();\n    });\n  }\n\n  /**\n   * 'Flash' the given post, drawing the user's attention to it.\n   *\n   * @param {jQuery} $item\n   */\n  flashItem($item) {\n    // This might execute before the fadeIn class has been removed in PostStreamItem's\n    // oncreate, so we remove it just to be safe and avoid a double animation.\n    $item.removeClass('fadeIn');\n    $item.addClass('flash').on('animationend webkitAnimationEnd', (e) => {\n      $item.removeClass('flash');\n    });\n  }\n}\n"],"sourceRoot":""}