{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/AffixedSidebar.js","webpack://@flarum/core/./src/forum/components/UserPage.js","webpack://@flarum/core/./src/forum/utils/UserControls.js","webpack://@flarum/core/./src/forum/components/AvatarEditor.js","webpack://@flarum/core/./src/forum/components/UserCard.js","webpack://@flarum/core/./src/common/helpers/userOnline.tsx","webpack://@flarum/core/./src/forum/components/PostUser.js"],"names":["AffixedSidebar","view","vnode","children","oncreate","this","boundOnresize","onresize","bind","$","window","on","resize","onremove","off","$sidebar","$header","$footer","$affixElement","find","removeClass","removeData","outerHeight","height","affix","offset","top","parseInt","css","bottom","Component","flreg","add","UserPage","oninit","user","bodyClass","className","UserCard","editable","canEdit","app","session","controlsButtonClassName","listItems","sidebarItems","toArray","content","LoadingIndicator","show","current","set","setTitle","displayName","m","redraw","loadUser","username","lowercaseUsername","toLowerCase","preloadedApiDocument","store","all","some","id","joinTime","bySlug","then","items","ItemList","SelectDropdown","buttonClassName","navItems","LinkButton","href","route","icon","translator","trans","commentCount","discussionCount","Separator","Page","UserControls","controls","context","forEach","section","length","item","itemName","userControls","moderationControls","canEditCredentials","canEditGroups","Button","onclick","editAction","destructiveControls","canDelete","deleteAction","confirm","showDeletionAlert","matches","history","back","location","reload","type","data","attributes","email","message","success","error","alerts","modal","AvatarEditor","loading","isDraggedOver","attrs","classList","avatar","avatarUrl","title","data-toggle","quickUpload","ondragover","enableDragover","ondragenter","ondragleave","disableDragover","ondragend","ondrop","dropUpload","controlItems","openPicker","remove","e","preventDefault","stopPropagation","upload","dataTransfer","files","appendTo","hide","click","target","file","FormData","append","request","method","url","forum","attribute","serialize","raw","body","failure","response","pushPayload","avatarColor","color","badges","style","backgroundColor","Dropdown","menuClassName","label","accessibleToggleLabel","component","Link","infoItems","lastSeenAt","online","isOnline","humanTime","ago","userOnline","PostUser","post","card","isHidden","cardVisible","timeout","clearTimeout","setTimeout","showCard","hideCard","oncardshow","addClass","one","oncardhide"],"mappings":"oQAaqBA,E,sGACnBC,KAAA,SAAKC,GACH,OAAOA,EAAMC,SAAS,I,EAGxBC,SAAA,SAASF,GACP,YAAME,SAAN,UAAeF,GAGfG,KAAKC,cAAgBD,KAAKE,SAASC,KAAKH,MACxCI,EAAEC,QAAQC,GAAG,SAAUN,KAAKC,eAAeM,U,EAG7CC,SAAA,WACEJ,EAAEC,QAAQI,IAAI,SAAUT,KAAKC,gB,EAG/BC,SAAA,WAAW,WACHQ,EAAWV,KAAKI,IAChBO,EAAUP,EAAE,WACZQ,EAAUR,EAAE,WACZS,EAAgBH,EAASI,KAAK,QAEpCV,EAAEC,QAAQI,IAAI,UACdI,EAAcE,YAAY,gCAAgCC,WAAW,YAIjEN,EAASO,aAAY,GAAQb,EAAEC,QAAQa,SAAWP,EAAQM,aAAY,IAE1EJ,EAAcM,MAAM,CAClBC,OAAQ,CACNC,IAAK,kBAAMX,EAASU,SAASC,IAAMV,EAAQM,aAAY,GAAQK,SAASZ,EAASa,IAAI,cAAe,KACpGC,OAAQ,kBAAO,EAAKA,OAASZ,EAAQK,aAAY,Q,GAjCbQ,KAuC5CpB,OAAOqB,MAAMC,IAAI,4BAA6BhC,G,ICnCzBiC,E,sGACnBC,OAAA,SAAOhC,GACL,YAAMgC,OAAN,UAAahC,GAObG,KAAK8B,KAAO,KAEZ9B,KAAK+B,UAAY,a,EAGnBnC,KAAA,WACE,OACE,SAAKoC,UAAU,YACZhC,KAAK8B,KACF,CACE,EAACG,EAAD,CACEH,KAAM9B,KAAK8B,KACXE,UAAU,gBACVE,SAAUlC,KAAK8B,KAAKK,WAAanC,KAAK8B,OAASM,IAAIC,QAAQP,KAC3DQ,wBAAwB,WAE1B,SAAKN,UAAU,aACb,SAAKA,UAAU,oBACb,EAACrC,EAAD,KACE,SAAKqC,UAAU,wBACb,aAAKO,OAAUvC,KAAKwC,eAAeC,cAGvC,SAAKT,UAAU,kCAAkChC,KAAK0C,cAI5D,CAAC,EAACC,EAAA,EAAD,CAAkBX,UAAU,+B,EAUvCU,QAAA,a,EASAE,KAAA,SAAKd,GACH9B,KAAK8B,KAAOA,EAEZM,IAAIS,QAAQC,IAAI,OAAQhB,GAExBM,IAAIW,SAASjB,EAAKkB,eAElBC,EAAEC,U,EASJC,SAAA,SAASC,GAAU,WACXC,EAAoBD,EAASE,cAKnClB,IAAImB,uBAEJnB,IAAIoB,MAAMC,IAAI,SAASC,MAAK,SAAC5B,GAC3B,IAAKA,EAAKsB,WAAWE,gBAAkBD,GAAqBvB,EAAK6B,OAASP,IAAatB,EAAK8B,WAE1F,OADA,EAAKhB,KAAKd,IACH,KAIN9B,KAAK8B,MACRM,IAAIoB,MAAM1C,KAAK,QAASsC,EAAU,CAAES,QAAQ,IAAQC,KAAK9D,KAAK4C,KAAKzC,KAAKH,Q,EAS5EwC,aAAA,WACE,IAAMuB,EAAQ,IAAIC,IASlB,OAPAD,EAAMpC,IACJ,MACA,EAACsC,EAAA,EAAD,CAAgBjC,UAAU,mBAAmBkC,gBAAgB,UAC1DlE,KAAKmE,WAAW1B,YAIdsB,G,EAQTI,SAAA,WACE,IAAMJ,EAAQ,IAAIC,IACZlC,EAAO9B,KAAK8B,KA6BlB,OA3BAiC,EAAMpC,IACJ,QACA,EAACyC,EAAA,EAAD,CAAYC,KAAMjC,IAAIkC,MAAM,aAAc,CAAElB,SAAUtB,EAAKsB,aAAemB,KAAK,kBAC5EnC,IAAIoC,WAAWC,MAAM,8BADxB,IACuD,UAAMzC,UAAU,gBAAgBF,EAAK4C,iBAE5F,KAGFX,EAAMpC,IACJ,cACA,EAACyC,EAAA,EAAD,CAAYC,KAAMjC,IAAIkC,MAAM,mBAAoB,CAAElB,SAAUtB,EAAKsB,aAAemB,KAAK,eAClFnC,IAAIoC,WAAWC,MAAM,oCADxB,IAC6D,UAAMzC,UAAU,gBAAgBF,EAAK6C,oBAElG,IAGEvC,IAAIC,QAAQP,OAASA,IACvBiC,EAAMpC,IAAI,YAAa,EAACiD,EAAA,EAAD,OAAgB,IACvCb,EAAMpC,IACJ,WACA,EAACyC,EAAA,EAAD,CAAYC,KAAMjC,IAAIkC,MAAM,YAAaC,KAAK,cAC3CnC,IAAIoC,WAAWC,MAAM,mCAEvB,MAIEV,G,GAjJ2Bc,KAqJtCxE,OAAOqB,MAAMC,IAAI,sBAAuBC,G,IC7JnBkD,E,oDAUnBC,SAAA,SAASjD,EAAMkD,GAAS,WAChBjB,EAAQ,IAAIC,IAUlB,MARA,CAAC,OAAQ,aAAc,eAAeiB,SAAQ,SAACC,GAC7C,IAAMH,EAAW,EAAKG,EAAU,YAAYpD,EAAMkD,GAASvC,UACvDsC,EAASI,SACXJ,EAASE,SAAQ,SAACG,GAAD,OAAUrB,EAAMpC,IAAIyD,EAAKC,SAAUD,MACpDrB,EAAMpC,IAAIuD,EAAU,YAAa,EAACN,EAAA,EAAD,WAI9Bb,G,EAYTuB,aAAA,WACE,OAAO,IAAItB,K,EAYbuB,mBAAA,SAAmBzD,GACjB,IAAMiC,EAAQ,IAAIC,IAWlB,OATIlC,EAAKK,WAAaL,EAAK0D,sBAAwB1D,EAAK2D,kBACtD1B,EAAMpC,IACJ,OACA,EAAC+D,EAAA,EAAD,CAAQnB,KAAK,oBAAoBoB,QAAS3F,KAAK4F,WAAWzF,KAAKH,KAAM8B,IAClEM,IAAIoC,WAAWC,MAAM,0CAKrBV,G,EAYT8B,oBAAA,SAAoB/D,GAClB,IAAMiC,EAAQ,IAAIC,IAWlB,MATkB,MAAdlC,EAAK6B,MAAgB7B,EAAKgE,aAC5B/B,EAAMpC,IACJ,SACA,EAAC+D,EAAA,EAAD,CAAQnB,KAAK,eAAeoB,QAAS3F,KAAK+F,aAAa5F,KAAKH,KAAM8B,IAC/DM,IAAIoC,WAAWC,MAAM,4CAKrBV,G,EAQTgC,aAAA,SAAajE,GAAM,WACZkE,QAAQ5D,IAAIoC,WAAWC,MAAM,kDAIlC3C,EAAI,SAEDgC,MAAK,WACJ,EAAKmC,kBAAkBnE,EAAM,WACzBM,IAAIS,QAAQqD,QAAQtE,EAAU,CAAEE,SAClCM,IAAI+D,QAAQC,OAEZ/F,OAAOgG,SAASC,YAPtB,OAUS,kBAAM,EAAKL,kBAAkBnE,EAAM,a,EAS9CmE,kBAAA,SAAkBnE,EAAMyE,GAAM,MACAzE,EAAK0E,KAAKC,WAA9BrD,EADoB,EACpBA,SAAUsD,EADU,EACVA,MACZC,EAAU,CACdC,QAAS,kDACTC,MAAO,iDACPN,GAEFnE,IAAI0E,OAAOlE,KAAK,CAAE2D,QAAQnE,IAAIoC,WAAWC,MAAMkC,EAAS,CAAEvD,WAAUsD,Y,EAQtEd,WAAA,SAAW9D,GAGTM,IAAI2E,MAAMnE,MAFY,kBAAM,gCAEE,CAAEd,U,KAIpCzB,OAAOqB,MAAMC,IAAI,qBAAsBmD,G,qDC/HlBkC,E,sGACnBnF,OAAA,SAAOhC,GACL,YAAMgC,OAAN,UAAahC,GAObG,KAAKiH,SAAU,EAOfjH,KAAKkH,eAAgB,G,EAGvBtH,KAAA,WACE,IAAMkC,EAAO9B,KAAKmH,MAAMrF,KAExB,OACE,SAAKE,WAAWoF,OAAU,CAAC,eAAgB,WAAYpH,KAAKmH,MAAMnF,UAAWhC,KAAKiH,SAAW,UAAWjH,KAAKkH,eAAiB,eAC3HG,OAAOvF,GACR,OACEE,UAAWF,EAAKwF,YAAc,kBAAoB,yCAClDC,MAAOnF,IAAIoC,WAAWC,MAAM,yCAC5B+C,cAAY,WACZ7B,QAAS3F,KAAKyH,YAAYtH,KAAKH,MAC/B0H,WAAY1H,KAAK2H,eAAexH,KAAKH,MACrC4H,YAAa5H,KAAK2H,eAAexH,KAAKH,MACtC6H,YAAa7H,KAAK8H,gBAAgB3H,KAAKH,MACvC+H,UAAW/H,KAAK8H,gBAAgB3H,KAAKH,MACrCgI,OAAQhI,KAAKiI,WAAW9H,KAAKH,OAE5BA,KAAKiH,QAAU,EAACtE,EAAA,EAAD,MAAuBb,EAAKwF,aAAc/C,OAAK,sBAAuBA,OAAK,uBAE7F,QAAIvC,UAAU,uBAAsBO,OAAUvC,KAAKkI,eAAezF,c,EAUxEyF,aAAA,WACE,IAAMnE,EAAQ,IAAIC,IAgBlB,OAdAD,EAAMpC,IACJ,SACA,EAAC+D,EAAA,EAAD,CAAQnB,KAAK,gBAAgBoB,QAAS3F,KAAKmI,WAAWhI,KAAKH,OACxDoC,IAAIoC,WAAWC,MAAM,0CAI1BV,EAAMpC,IACJ,SACA,EAAC+D,EAAA,EAAD,CAAQnB,KAAK,eAAeoB,QAAS3F,KAAKoI,OAAOjI,KAAKH,OACnDoC,IAAIoC,WAAWC,MAAM,0CAInBV,G,EAQT4D,eAAA,SAAeU,GACbA,EAAEC,iBACFD,EAAEE,kBACFvI,KAAKkH,eAAgB,G,EAQvBY,gBAAA,SAAgBO,GACdA,EAAEC,iBACFD,EAAEE,kBACFvI,KAAKkH,eAAgB,G,EAQvBe,WAAA,SAAWI,GACTA,EAAEC,iBACFD,EAAEE,kBACFvI,KAAKkH,eAAgB,EACrBlH,KAAKwI,OAAOH,EAAEI,aAAaC,MAAM,K,EAWnCjB,YAAA,SAAYY,GACLrI,KAAKmH,MAAMrF,KAAKwF,cACnBe,EAAEC,iBACFD,EAAEE,kBACFvI,KAAKmI,e,EAOTA,WAAA,WAAa,WACPnI,KAAKiH,SAIM7G,EAAE,uBAGduI,SAAS,QACTC,OACAC,QACAvI,GAAG,SAAS,SAAC+H,GACZ,EAAKG,OAAOpI,EAAEiI,EAAES,QAAQ,GAAGJ,MAAM,Q,EASvCF,OAAA,SAAOO,GACL,IAAI/I,KAAKiH,QAAT,CAEA,IAAMnF,EAAO9B,KAAKmH,MAAMrF,KAClB0E,EAAO,IAAIwC,SACjBxC,EAAKyC,OAAO,SAAUF,GAEtB/I,KAAKiH,SAAU,EACfhE,EAAEC,SAEFd,IACG8G,QAAQ,CACPC,OAAQ,OACRC,IAAQhH,IAAIiH,MAAMC,UAAU,UAAzB,UAA4CxH,EAAK6B,KAAjD,UACH4F,UAAW,SAACC,GAAD,OAASA,GACpBC,KAAMjD,IAEP1C,KAAK9D,KAAK4G,QAAQzG,KAAKH,MAAOA,KAAK0J,QAAQvJ,KAAKH,S,EAMrDoI,OAAA,WACE,IAAMtG,EAAO9B,KAAKmH,MAAMrF,KAExB9B,KAAKiH,SAAU,EACfhE,EAAEC,SAEFd,IACG8G,QAAQ,CACPC,OAAQ,SACRC,IAAQhH,IAAIiH,MAAMC,UAAU,UAAzB,UAA4CxH,EAAK6B,KAAjD,YAEJG,KAAK9D,KAAK4G,QAAQzG,KAAKH,MAAOA,KAAK0J,QAAQvJ,KAAKH,Q,EAUrD4G,QAAA,SAAQ+C,GACNvH,IAAIoB,MAAMoG,YAAYD,UACf3J,KAAKmH,MAAMrF,KAAK+H,YAEvB7J,KAAKiH,SAAU,EACfhE,EAAEC,U,EASJwG,QAAA,SAAQC,GACN3J,KAAKiH,SAAU,EACfhE,EAAEC,U,GA1MoCzB,KA8M1CpB,OAAOqB,MAAMC,IAAI,0BAA2BqF,G,ICxMvB/E,E,sGACnBrC,KAAA,WACE,IAAMkC,EAAO9B,KAAKmH,MAAMrF,KAClBiD,GAAW,IAAID,GAAeC,SAASjD,EAAM9B,MAAMyC,UACnDqH,EAAQhI,EAAKgI,QACbC,EAASjI,EAAKiI,SAAStH,UAE7B,OACE,SAAKT,UAAW,aAAehC,KAAKmH,MAAMnF,WAAa,IAAKgI,MAAOF,EAAQ,CAAEG,gBAAiBH,GAAU,IACtG,SAAK9H,UAAU,oBACb,SAAKA,UAAU,aACZ+C,EAASI,OACN+E,cACE,CACElI,UAAW,uCACXmI,cAAe,uBACfjG,gBAAiBlE,KAAKmH,MAAM7E,wBAC5B8H,MAAOhI,IAAIoC,WAAWC,MAAM,mCAC5B4F,sBAAuBjI,IAAIoC,WAAWC,MAAM,6DAC5CF,KAAM,qBAERQ,GAEF,GAEJ,SAAK/C,UAAU,oBACb,QAAIA,UAAU,qBACXhC,KAAKmH,MAAMjF,SACV,CAAC8E,EAAasD,UAAU,CAAExI,OAAME,UAAW,qBAAsBoB,OAAStB,IAE1E,EAACyI,EAAA,EAAD,CAAMlG,KAAMjC,IAAIkC,MAAMxC,KAAKA,IACzB,SAAKE,UAAU,oBAAmBqF,OAAOvF,KACxCsB,OAAStB,KAKfiI,EAAO5E,OAAS,QAAInD,UAAU,2BAA0BO,OAAUwH,IAAgB,GAEnF,QAAI/H,UAAU,kBAAiBO,OAAUvC,KAAKwK,YAAY/H,iB,EAatE+H,UAAA,WACE,IAAMzG,EAAQ,IAAIC,IACZlC,EAAO9B,KAAKmH,MAAMrF,KAClB2I,EAAa3I,EAAK2I,aAExB,GAAIA,EAAY,CACd,IAAMC,EAAS5I,EAAK6I,WAEpB5G,EAAMpC,IACJ,WACA,UAAMK,UAAW,qBAAuB0I,EAAS,UAAY,KAC1DA,EACG,EAACnG,OAAK,iBAAkB,IAAKnC,IAAIoC,WAAWC,MAAM,gCAClD,EAACF,OAAK,gBAAiB,KAAKqG,OAAUH,MAUhD,OALA1G,EAAMpC,IACJ,SACA,UAAMK,UAAU,qBAAqBI,IAAIoC,WAAWC,MAAM,mCAAoC,CAAEoG,KAAKD,OAAU9I,EAAK8B,gBAG/GG,G,GA3E2BtC,KCjBvB,SAASqJ,EAAWhJ,GACjC,GAAIA,EAAK2I,cAAgB3I,EAAK6I,WAC5B,OAAO,UAAM3I,UAAU,eAAcuC,OAAK,kBD8F9ClE,OAAOqB,MAAMC,IAAI,sBAAuBM,GC1FxC5B,OAAOqB,MAAMC,IAAI,qBAAsBmJ,G,ICElBC,E,sGACnBnL,KAAA,WACE,IAAMoL,EAAOhL,KAAKmH,MAAM6D,KAClBlJ,EAAOkJ,EAAKlJ,OAElB,IAAKA,EACH,OACE,SAAKE,UAAU,YACb,aACGqF,OAAOvF,EAAM,CAAEE,UAAW,oBAD7B,KACoDoB,OAAStB,KAMnE,IAAImJ,EAAO,GAUX,OARKD,EAAKE,YAAclL,KAAKmH,MAAMgE,cACjCF,EAAOhJ,EAASqI,UAAU,CACxBxI,OACAE,UAAW,oBACXM,wBAAyB,sCAK3B,SAAKN,UAAU,YACb,YACE,EAACuI,EAAA,EAAD,CAAMlG,KAAMjC,IAAIkC,MAAMxC,KAAKA,KACxBuF,OAAOvF,EAAM,CAAEE,UAAW,oBAC1B8I,EAAWhJ,IACXsB,OAAStB,KAGd,QAAIE,UAAU,2BAA0BO,OAAUT,EAAKiI,SAAStH,YAC/DwI,I,EAKPlL,SAAA,SAASF,GAAO,IAGVuL,EAHU,OACd,YAAMrL,SAAN,UAAeF,GAIfG,KAAKI,IACFE,GAAG,YAAa,mBAAmB,WAClC+K,aAAaD,GACbA,EAAUE,WAAW,EAAKC,SAASpL,KAAK,GAAO,QAEhDG,GAAG,WAAY,mBAAmB,WACjC+K,aAAaD,GACbA,EAAUE,WAAW,EAAKE,SAASrL,KAAK,GAAO,S,EAOrDoL,SAAA,WAAW,WACTvL,KAAKmH,MAAMsE,aAEXH,YAAW,kBAAM,EAAKlL,EAAE,aAAasL,SAAS,U,EAMhDF,SAAA,WAAW,WACTxL,KAAKI,EAAE,aACJW,YAAY,MACZ4K,IAAI,oDAAoD,WACvD,EAAKxE,MAAMyE,iB,GAxEmBnK,KA6EtCpB,OAAOqB,MAAMC,IAAI,sBAAuBoJ","file":"forum/components/PostUser.js","sourcesContent":["import Component from '../../common/Component';\n\n/**\n * The `AffixedSidebar` component uses Bootstrap's \"affix\" plugin to keep a\n * sidebar navigation at the top of the viewport when scrolling.\n *\n * ### Children\n *\n * The component must wrap an element that itself wraps an <ul> element, which\n * will be \"affixed\".\n *\n * @see https://getbootstrap.com/docs/3.4/javascript/#affix\n */\nexport default class AffixedSidebar extends Component {\n  view(vnode) {\n    return vnode.children[0];\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // Register the affix plugin to execute on every window resize (and trigger)\n    this.boundOnresize = this.onresize.bind(this);\n    $(window).on('resize', this.boundOnresize).resize();\n  }\n\n  onremove() {\n    $(window).off('resize', this.boundOnresize);\n  }\n\n  onresize() {\n    const $sidebar = this.$();\n    const $header = $('#header');\n    const $footer = $('#footer');\n    const $affixElement = $sidebar.find('> ul');\n\n    $(window).off('.affix');\n    $affixElement.removeClass('affix affix-top affix-bottom').removeData('bs.affix');\n\n    // Don't affix the sidebar if it is taller than the viewport (otherwise\n    // there would be no way to scroll through its content).\n    if ($sidebar.outerHeight(true) > $(window).height() - $header.outerHeight(true)) return;\n\n    $affixElement.affix({\n      offset: {\n        top: () => $sidebar.offset().top - $header.outerHeight(true) - parseInt($sidebar.css('margin-top'), 10),\n        bottom: () => (this.bottom = $footer.outerHeight(true)),\n      },\n    });\n  }\n}\n\nwindow.flreg.add('components/AffixedSidebar', AffixedSidebar)","import Page from '../../common/components/Page';\nimport ItemList from '../../common/utils/ItemList';\nimport UserCard from './UserCard';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport SelectDropdown from '../../common/components/SelectDropdown';\nimport LinkButton from '../../common/components/LinkButton';\nimport Separator from '../../common/components/Separator';\nimport listItems from '../../common/helpers/listItems';\nimport AffixedSidebar from './AffixedSidebar';\n\n/**\n * The `UserPage` component shows a user's profile. It can be extended to show\n * content inside of the content area. See `ActivityPage` and `SettingsPage` for\n * examples.\n *\n * @abstract\n */\nexport default class UserPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The user this page is for.\n     *\n     * @type {User}\n     */\n    this.user = null;\n\n    this.bodyClass = 'App--user';\n  }\n\n  view() {\n    return (\n      <div className=\"UserPage\">\n        {this.user\n          ? [\n              <UserCard\n                user={this.user}\n                className=\"Hero UserHero\"\n                editable={this.user.canEdit() || this.user === app.session.user}\n                controlsButtonClassName=\"Button\"\n              />,\n              <div className=\"container\">\n                <div className=\"sideNavContainer\">\n                  <AffixedSidebar>\n                    <nav className=\"sideNav UserPage-nav\">\n                      <ul>{listItems(this.sidebarItems().toArray())}</ul>\n                    </nav>\n                  </AffixedSidebar>\n                  <div className=\"sideNavOffset UserPage-content\">{this.content()}</div>\n                </div>\n              </div>,\n            ]\n          : [<LoadingIndicator className=\"LoadingIndicator--block\" />]}\n      </div>\n    );\n  }\n\n  /**\n   * Get the content to display in the user page.\n   *\n   * @return {VirtualElement}\n   */\n  content() {}\n\n  /**\n   * Initialize the component with a user, and trigger the loading of their\n   * activity feed.\n   *\n   * @param {User} user\n   * @protected\n   */\n  show(user) {\n    this.user = user;\n\n    app.current.set('user', user);\n\n    app.setTitle(user.displayName());\n\n    m.redraw();\n  }\n\n  /**\n   * Given a username, load the user's profile from the store, or make a request\n   * if we don't have it yet. Then initialize the profile page with that user.\n   *\n   * @param {String} username\n   */\n  loadUser(username) {\n    const lowercaseUsername = username.toLowerCase();\n\n    // Load the preloaded user object, if any, into the global app store\n    // We don't use the output of the method because it returns raw JSON\n    // instead of the parsed models\n    app.preloadedApiDocument();\n\n    app.store.all('users').some((user) => {\n      if ((user.username().toLowerCase() === lowercaseUsername || user.id() === username) && user.joinTime()) {\n        this.show(user);\n        return true;\n      }\n    });\n\n    if (!this.user) {\n      app.store.find('users', username, { bySlug: true }).then(this.show.bind(this));\n    }\n  }\n\n  /**\n   * Build an item list for the content of the sidebar.\n   *\n   * @return {ItemList}\n   */\n  sidebarItems() {\n    const items = new ItemList();\n\n    items.add(\n      'nav',\n      <SelectDropdown className=\"App-titleControl\" buttonClassName=\"Button\">\n        {this.navItems().toArray()}\n      </SelectDropdown>\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the navigation in the sidebar.\n   *\n   * @return {ItemList}\n   */\n  navItems() {\n    const items = new ItemList();\n    const user = this.user;\n\n    items.add(\n      'posts',\n      <LinkButton href={app.route('user.posts', { username: user.username() })} icon=\"far fa-comment\">\n        {app.translator.trans('core.forum.user.posts_link')} <span className=\"Button-badge\">{user.commentCount()}</span>\n      </LinkButton>,\n      100\n    );\n\n    items.add(\n      'discussions',\n      <LinkButton href={app.route('user.discussions', { username: user.username() })} icon=\"fas fa-bars\">\n        {app.translator.trans('core.forum.user.discussions_link')} <span className=\"Button-badge\">{user.discussionCount()}</span>\n      </LinkButton>,\n      90\n    );\n\n    if (app.session.user === user) {\n      items.add('separator', <Separator />, -90);\n      items.add(\n        'settings',\n        <LinkButton href={app.route('settings')} icon=\"fas fa-cog\">\n          {app.translator.trans('core.forum.user.settings_link')}\n        </LinkButton>,\n        -100\n      );\n    }\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/UserPage', UserPage)","import Button from '../../common/components/Button';\nimport Separator from '../../common/components/Separator';\nimport UserPage from '../components/UserPage';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `UserControls` utility constructs a list of buttons for a user which\n * perform actions on it.\n */\nexport default class UserControls {\n  /**\n   * Get a list of controls for a user.\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @public\n   */\n  controls(user, context) {\n    const items = new ItemList();\n\n    ['user', 'moderation', 'destructive'].forEach((section) => {\n      const controls = this[section + 'Controls'](user, context).toArray();\n      if (controls.length) {\n        controls.forEach((item) => items.add(item.itemName, item));\n        items.add(section + 'Separator', <Separator />);\n      }\n    });\n\n    return items;\n  }\n\n  /**\n   * Get controls for a user pertaining to the current user (e.g. poke, follow).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  userControls() {\n    return new ItemList();\n  }\n\n  /**\n   * Get controls for a user pertaining to moderation (e.g. suspend, edit).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  moderationControls(user) {\n    const items = new ItemList();\n\n    if (user.canEdit() || user.canEditCredentials() || user.canEditGroups()) {\n      items.add(\n        'edit',\n        <Button icon=\"fas fa-pencil-alt\" onclick={this.editAction.bind(this, user)}>\n          {app.translator.trans('core.forum.user_controls.edit_button')}\n        </Button>\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Get controls for a user which are destructive (e.g. delete).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  destructiveControls(user) {\n    const items = new ItemList();\n\n    if (user.id() !== '1' && user.canDelete()) {\n      items.add(\n        'delete',\n        <Button icon=\"fas fa-times\" onclick={this.deleteAction.bind(this, user)}>\n          {app.translator.trans('core.forum.user_controls.delete_button')}\n        </Button>\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Delete the user.\n   *\n   * @param {User} user\n   */\n  deleteAction(user) {\n    if (!confirm(app.translator.trans('core.forum.user_controls.delete_confirmation'))) {\n      return;\n    }\n\n    user\n      .delete()\n      .then(() => {\n        this.showDeletionAlert(user, 'success');\n        if (app.current.matches(UserPage, { user })) {\n          app.history.back();\n        } else {\n          window.location.reload();\n        }\n      })\n      .catch(() => this.showDeletionAlert(user, 'error'));\n  }\n\n  /**\n   * Show deletion alert of user.\n   *\n   * @param {User} user\n   * @param {string} type\n   */\n  showDeletionAlert(user, type) {\n    const { username, email } = user.data.attributes;\n    const message = {\n      success: 'core.forum.user_controls.delete_success_message',\n      error: 'core.forum.user_controls.delete_error_message',\n    }[type];\n\n    app.alerts.show({ type }, app.translator.trans(message, { username, email }));\n  }\n\n  /**\n   * Edit the user.\n   *\n   * @param {User} user\n   */\n  editAction(user) {\n    const EditUserModal = () => import(/* webpackChunkName: \"forum/components/EditUserModal\" */ '../components/EditUserModal');\n\n    app.modal.show(EditUserModal, { user });\n  }\n}\n\nwindow.flreg.add('utils/UserControls', UserControls)","import Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport icon from '../../common/helpers/icon';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Button from '../../common/components/Button';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\n\n/**\n * The `AvatarEditor` component displays a user's avatar along with a dropdown\n * menu which allows the user to upload/remove the avatar.\n *\n * ### Attrs\n *\n * - `className`\n * - `user`\n */\nexport default class AvatarEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not an avatar upload is in progress.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    /**\n     * Whether or not an image has been dragged over the dropzone.\n     *\n     * @type {Boolean}\n     */\n    this.isDraggedOver = false;\n  }\n\n  view() {\n    const user = this.attrs.user;\n\n    return (\n      <div className={classList(['AvatarEditor', 'Dropdown', this.attrs.className, this.loading && 'loading', this.isDraggedOver && 'dragover'])}>\n        {avatar(user)}\n        <a\n          className={user.avatarUrl() ? 'Dropdown-toggle' : 'Dropdown-toggle AvatarEditor--noAvatar'}\n          title={app.translator.trans('core.forum.user.avatar_upload_tooltip')}\n          data-toggle=\"dropdown\"\n          onclick={this.quickUpload.bind(this)}\n          ondragover={this.enableDragover.bind(this)}\n          ondragenter={this.enableDragover.bind(this)}\n          ondragleave={this.disableDragover.bind(this)}\n          ondragend={this.disableDragover.bind(this)}\n          ondrop={this.dropUpload.bind(this)}\n        >\n          {this.loading ? <LoadingIndicator /> : user.avatarUrl() ? icon('fas fa-pencil-alt') : icon('fas fa-plus-circle')}\n        </a>\n        <ul className=\"Dropdown-menu Menu\">{listItems(this.controlItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Get the items in the edit avatar dropdown menu.\n   *\n   * @return {ItemList}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'upload',\n      <Button icon=\"fas fa-upload\" onclick={this.openPicker.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_upload_button')}\n      </Button>\n    );\n\n    items.add(\n      'remove',\n      <Button icon=\"fas fa-times\" onclick={this.remove.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_remove_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Enable dragover style\n   *\n   * @param {Event} e\n   */\n  enableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = true;\n  }\n\n  /**\n   * Disable dragover style\n   *\n   * @param {Event} e\n   */\n  disableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n  }\n\n  /**\n   * Upload avatar when file is dropped into dropzone.\n   *\n   * @param {Event} e\n   */\n  dropUpload(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n    this.upload(e.dataTransfer.files[0]);\n  }\n\n  /**\n   * If the user doesn't have an avatar, there's no point in showing the\n   * controls dropdown, because only one option would be viable: uploading.\n   * Thus, when the avatar editor's dropdown toggle button is clicked, we prompt\n   * the user to upload an avatar immediately.\n   *\n   * @param {Event} e\n   */\n  quickUpload(e) {\n    if (!this.attrs.user.avatarUrl()) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.openPicker();\n    }\n  }\n\n  /**\n   * Upload avatar using file picker\n   */\n  openPicker() {\n    if (this.loading) return;\n\n    // Create a hidden HTML input element and click on it so the user can select\n    // an avatar file. Once they have, we will upload it via the API.\n    const $input = $('<input type=\"file\">');\n\n    $input\n      .appendTo('body')\n      .hide()\n      .click()\n      .on('input', (e) => {\n        this.upload($(e.target)[0].files[0]);\n      });\n  }\n\n  /**\n   * Upload avatar\n   *\n   * @param {File} file\n   */\n  upload(file) {\n    if (this.loading) return;\n\n    const user = this.attrs.user;\n    const data = new FormData();\n    data.append('avatar', file);\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'POST',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n        serialize: (raw) => raw,\n        body: data,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * Remove the user's avatar.\n   */\n  remove() {\n    const user = this.attrs.user;\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'DELETE',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * After a successful upload/removal, push the updated user data into the\n   * store, and force a recomputation of the user's avatar color.\n   *\n   * @param {Object} response\n   * @protected\n   */\n  success(response) {\n    app.store.pushPayload(response);\n    delete this.attrs.user.avatarColor;\n\n    this.loading = false;\n    m.redraw();\n  }\n\n  /**\n   * If avatar upload/removal fails, stop loading.\n   *\n   * @param {Object} response\n   * @protected\n   */\n  failure(response) {\n    this.loading = false;\n    m.redraw();\n  }\n}\n\nwindow.flreg.add('components/AvatarEditor', AvatarEditor)","import Component from '../../common/Component';\nimport humanTime from '../../common/utils/humanTime';\nimport ItemList from '../../common/utils/ItemList';\nimport UserControls from '../utils/UserControls';\nimport avatar from '../../common/helpers/avatar';\nimport username from '../../common/helpers/username';\nimport icon from '../../common/helpers/icon';\nimport Dropdown from '../../common/components/Dropdown';\nimport Link from '../../common/components/Link';\nimport AvatarEditor from './AvatarEditor';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `UserCard` component displays a user's profile card. This is used both on\n * the `UserPage` (in the hero) and in discussions, shown when hovering over a\n * post author.\n *\n * ### Attrs\n *\n * - `user`\n * - `className`\n * - `editable`\n * - `controlsButtonClassName`\n */\nexport default class UserCard extends Component {\n  view() {\n    const user = this.attrs.user;\n    const controls = new UserControls().controls(user, this).toArray();\n    const color = user.color();\n    const badges = user.badges().toArray();\n\n    return (\n      <div className={'UserCard ' + (this.attrs.className || '')} style={color ? { backgroundColor: color } : ''}>\n        <div className=\"darkenBackground\">\n          <div className=\"container\">\n            {controls.length\n              ? Dropdown.component(\n                  {\n                    className: 'UserCard-controls App-primaryControl',\n                    menuClassName: 'Dropdown-menu--right',\n                    buttonClassName: this.attrs.controlsButtonClassName,\n                    label: app.translator.trans('core.forum.user_controls.button'),\n                    accessibleToggleLabel: app.translator.trans('core.forum.user_controls.toggle_dropdown_accessible_label'),\n                    icon: 'fas fa-ellipsis-v',\n                  },\n                  controls\n                )\n              : ''}\n\n            <div className=\"UserCard-profile\">\n              <h2 className=\"UserCard-identity\">\n                {this.attrs.editable ? (\n                  [AvatarEditor.component({ user, className: 'UserCard-avatar' }), username(user)]\n                ) : (\n                  <Link href={app.route.user(user)}>\n                    <div className=\"UserCard-avatar\">{avatar(user)}</div>\n                    {username(user)}\n                  </Link>\n                )}\n              </h2>\n\n              {badges.length ? <ul className=\"UserCard-badges badges\">{listItems(badges)}</ul> : ''}\n\n              <ul className=\"UserCard-info\">{listItems(this.infoItems().toArray())}</ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Build an item list of tidbits of info to show on this user's profile.\n   *\n   * @return {ItemList}\n   */\n  infoItems() {\n    const items = new ItemList();\n    const user = this.attrs.user;\n    const lastSeenAt = user.lastSeenAt();\n\n    if (lastSeenAt) {\n      const online = user.isOnline();\n\n      items.add(\n        'lastSeen',\n        <span className={'UserCard-lastSeen' + (online ? ' online' : '')}>\n          {online\n            ? [icon('fas fa-circle'), ' ', app.translator.trans('core.forum.user.online_text')]\n            : [icon('far fa-clock'), ' ', humanTime(lastSeenAt)]}\n        </span>\n      );\n    }\n\n    items.add(\n      'joined',\n      <span className=\"UserCard-joinedAt\">{app.translator.trans('core.forum.user.joined_date_text', { ago: humanTime(user.joinTime()) })}</span>\n    );\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/UserCard', UserCard)","import * as Mithril from 'mithril';\nimport User from '../models/User';\nimport icon from './icon';\n\n/**\n * The `useronline` helper displays a green circle if the user is online\n */\nexport default function userOnline(user: User): Mithril.Vnode {\n  if (user.lastSeenAt() && user.isOnline()) {\n    return <span className=\"UserOnline\">{icon('fas fa-circle')}</span>;\n  }\n}\n\nwindow.flreg.add('helpers/userOnline', userOnline)","import Component from '../../common/Component';\nimport Link from '../../common/components/Link';\nimport UserCard from './UserCard';\nimport avatar from '../../common/helpers/avatar';\nimport username from '../../common/helpers/username';\nimport userOnline from '../../common/helpers/userOnline';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `PostUser` component shows the avatar and username of a post's author.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class PostUser extends Component {\n  view() {\n    const post = this.attrs.post;\n    const user = post.user();\n\n    if (!user) {\n      return (\n        <div className=\"PostUser\">\n          <h3>\n            {avatar(user, { className: 'PostUser-avatar' })} {username(user)}\n          </h3>\n        </div>\n      );\n    }\n\n    let card = '';\n\n    if (!post.isHidden() && this.attrs.cardVisible) {\n      card = UserCard.component({\n        user,\n        className: 'UserCard--popover',\n        controlsButtonClassName: 'Button Button--icon Button--flat',\n      });\n    }\n\n    return (\n      <div className=\"PostUser\">\n        <h3>\n          <Link href={app.route.user(user)}>\n            {avatar(user, { className: 'PostUser-avatar' })}\n            {userOnline(user)}\n            {username(user)}\n          </Link>\n        </h3>\n        <ul className=\"PostUser-badges badges\">{listItems(user.badges().toArray())}</ul>\n        {card}\n      </div>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    let timeout;\n\n    this.$()\n      .on('mouseover', 'h3 a, .UserCard', () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(this.showCard.bind(this), 500);\n      })\n      .on('mouseout', 'h3 a, .UserCard', () => {\n        clearTimeout(timeout);\n        timeout = setTimeout(this.hideCard.bind(this), 250);\n      });\n  }\n\n  /**\n   * Show the user card.\n   */\n  showCard() {\n    this.attrs.oncardshow();\n\n    setTimeout(() => this.$('.UserCard').addClass('in'));\n  }\n\n  /**\n   * Hide the user card.\n   */\n  hideCard() {\n    this.$('.UserCard')\n      .removeClass('in')\n      .one('transitionend webkitTransitionEnd oTransitionEnd', () => {\n        this.attrs.oncardhide();\n      });\n  }\n}\n\nwindow.flreg.add('components/PostUser', PostUser)"],"sourceRoot":""}