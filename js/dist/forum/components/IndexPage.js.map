{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/IndexPage.js"],"names":["IndexPage","oninit","vnode","app","previous","matches","DiscussionPage","this","lastDiscussion","get","discussions","clear","refreshParams","search","params","history","push","translator","trans","bodyClass","scrollTopOnCreate","view","className","hero","listItems","sidebarItems","toArray","viewItems","actionItems","state","setTitle","setTitleCount","oncreate","oldHeroHeight","cache","heroHeight","$","outerHeight","scrollTop","css","window","height","type","screen","$discussion","id","length","indexTop","indexBottom","discussionTop","offset","top","discussionBottom","onbeforeremove","onremove","WelcomeHero","items","ItemList","canStartDiscussion","forum","attribute","session","user","add","Button","icon","itemClassName","onclick","newDiscussionAction","disabled","SelectDropdown","buttonClassName","accessibleToggleLabel","navItems","stickyParams","LinkButton","href","route","sortMap","sortOptions","i","Dropdown","label","sort","Object","keys","map","key","value","active","changeSort","bind","title","refresh","store","find","m","redraw","markAllAsRead","LogInModal","DiscussionComposer","Promise","resolve","reject","composer","load","show","modal","confirm","save","markedAllAsReadAt","Date","Page"],"mappings":"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","file":"forum/components/IndexPage.js","sourcesContent":["import { extend } from '../../common/extend';\nimport Page from '../../common/components/Page';\nimport ItemList from '../../common/utils/ItemList';\nimport listItems from '../../common/helpers/listItems';\nimport DiscussionList from './DiscussionList';\nimport WelcomeHero from './WelcomeHero';\nimport DiscussionPage from './DiscussionPage';\nimport Dropdown from '../../common/components/Dropdown';\nimport Button from '../../common/components/Button';\nimport LinkButton from '../../common/components/LinkButton';\nimport SelectDropdown from '../../common/components/SelectDropdown';\n\n/**\n * The `IndexPage` component displays the index page, including the welcome\n * hero, the sidebar, and the discussion list.\n */\nexport default class IndexPage extends Page {\n  static providesInitialSearch = true;\n\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    // If the user is returning from a discussion page, then take note of which\n    // discussion they have just visited. After the view is rendered, we will\n    // scroll down so that this discussion is in view.\n    if (app.previous.matches(DiscussionPage)) {\n      this.lastDiscussion = app.previous.get('discussion');\n    }\n\n    // If the user is coming from the discussion list, then they have either\n    // just switched one of the parameters (filter, sort, search) or they\n    // probably want to refresh the results. We will clear the discussion list\n    // cache so that results are reloaded.\n    if (app.previous.matches(IndexPage)) {\n      app.discussions.clear();\n    }\n\n    app.discussions.refreshParams(app.search.params());\n\n    app.history.push('index', app.translator.trans('core.forum.header.back_to_index_tooltip'));\n\n    this.bodyClass = 'App--index';\n    this.scrollTopOnCreate = false;\n  }\n\n  view() {\n    return (\n      <div className=\"IndexPage\">\n        {this.hero()}\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(this.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <div className=\"IndexPage-toolbar\">\n                <ul className=\"IndexPage-toolbar-view\">{listItems(this.viewItems().toArray())}</ul>\n                <ul className=\"IndexPage-toolbar-action\">{listItems(this.actionItems().toArray())}</ul>\n              </div>\n              <DiscussionList state={app.discussions} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  setTitle() {\n    app.setTitle(app.translator.trans('core.forum.index.meta_title_text'));\n    app.setTitleCount(0);\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.setTitle();\n\n    // Work out the difference between the height of this hero and that of the\n    // previous hero. Maintain the same scroll position relative to the bottom\n    // of the hero so that the sidebar doesn't jump around.\n    const oldHeroHeight = app.cache.heroHeight;\n    const heroHeight = (app.cache.heroHeight = this.$('.Hero').outerHeight() || 0);\n    const scrollTop = app.cache.scrollTop;\n\n    $('#app').css('min-height', $(window).height() + heroHeight);\n\n    // Let browser handle scrolling on page reload.\n    if (app.previous.type == null) return;\n\n    // When on mobile, only retain scroll if we're coming from a discussion page.\n    // Otherwise, we've just changed the filter, so we should go to the top of the page.\n    if (app.screen() == 'desktop' || app.screen() == 'desktop-hd' || this.lastDiscussion) {\n      $(window).scrollTop(scrollTop - oldHeroHeight + heroHeight);\n    } else {\n      $(window).scrollTop(0);\n    }\n\n    // If we've just returned from a discussion page, then the constructor will\n    // have set the `lastDiscussion` property. If this is the case, we want to\n    // scroll down to that discussion so that it's in view.\n    if (this.lastDiscussion) {\n      const $discussion = this.$(`li[data-id=\"${this.lastDiscussion.id()}\"] .DiscussionListItem`);\n\n      if ($discussion.length) {\n        const indexTop = $('#header').outerHeight();\n        const indexBottom = $(window).height();\n        const discussionTop = $discussion.offset().top;\n        const discussionBottom = discussionTop + $discussion.outerHeight();\n\n        if (discussionTop < scrollTop + indexTop || discussionBottom > scrollTop + indexBottom) {\n          $(window).scrollTop(discussionTop - indexTop);\n        }\n      }\n    }\n  }\n\n  onbeforeremove() {\n    // Save the scroll position so we can restore it when we return to the\n    // discussion list.\n    app.cache.scrollTop = $(window).scrollTop();\n  }\n\n  onremove() {\n    super.onremove();\n\n    $('#app').css('min-height', '');\n  }\n\n  /**\n   * Get the component to display as the hero.\n   *\n   * @return {MithrilComponent}\n   */\n  hero() {\n    return WelcomeHero.component();\n  }\n\n  /**\n   * Build an item list for the sidebar of the index page. By default this is a\n   * \"New Discussion\" button, and then a DropdownSelect component containing a\n   * list of navigation items.\n   *\n   * @return {ItemList}\n   */\n  sidebarItems() {\n    const items = new ItemList();\n    const canStartDiscussion = app.forum.attribute('canStartDiscussion') || !app.session.user;\n\n    items.add(\n      'newDiscussion',\n      Button.component(\n        {\n          icon: 'fas fa-edit',\n          className: 'Button Button--primary IndexPage-newDiscussion',\n          itemClassName: 'App-primaryControl',\n          onclick: () => {\n            // If the user is not logged in, the promise rejects, and a login modal shows up.\n            // Since that's already handled, we dont need to show an error message in the console.\n            return this.newDiscussionAction().catch(() => {});\n          },\n          disabled: !canStartDiscussion,\n        },\n        app.translator.trans(canStartDiscussion ? 'core.forum.index.start_discussion_button' : 'core.forum.index.cannot_start_discussion_button')\n      )\n    );\n\n    items.add(\n      'nav',\n      SelectDropdown.component(\n        {\n          buttonClassName: 'Button',\n          className: 'App-titleControl',\n          accessibleToggleLabel: app.translator.trans('core.forum.index.toggle_sidenav_dropdown_accessible_label'),\n        },\n        this.navItems(this).toArray()\n      )\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the navigation in the sidebar of the index page. By\n   * default this is just the 'All Discussions' link.\n   *\n   * @return {ItemList}\n   */\n  navItems() {\n    const items = new ItemList();\n    const params = app.search.stickyParams();\n\n    items.add(\n      'allDiscussions',\n      LinkButton.component(\n        {\n          href: app.route('index', params),\n          icon: 'far fa-comments',\n        },\n        app.translator.trans('core.forum.index.all_discussions_link')\n      ),\n      100\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the part of the toolbar which is concerned with how\n   * the results are displayed. By default this is just a select box to change\n   * the way discussions are sorted.\n   *\n   * @return {ItemList}\n   */\n  viewItems() {\n    const items = new ItemList();\n    const sortMap = app.discussions.sortMap();\n\n    const sortOptions = {};\n    for (const i in sortMap) {\n      sortOptions[i] = app.translator.trans('core.forum.index_sort.' + i + '_button');\n    }\n\n    items.add(\n      'sort',\n      Dropdown.component(\n        {\n          buttonClassName: 'Button',\n          label: sortOptions[app.search.params().sort] || Object.keys(sortMap).map((key) => sortOptions[key])[0],\n          accessibleToggleLabel: app.translator.trans('core.forum.index_sort.toggle_dropdown_accessible_label'),\n        },\n        Object.keys(sortOptions).map((value) => {\n          const label = sortOptions[value];\n          const active = (app.search.params().sort || Object.keys(sortMap)[0]) === value;\n\n          return Button.component(\n            {\n              icon: active ? 'fas fa-check' : true,\n              onclick: app.search.changeSort.bind(app.search, value),\n              active: active,\n            },\n            label\n          );\n        })\n      )\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the part of the toolbar which is about taking action\n   * on the results. By default this is just a \"mark all as read\" button.\n   *\n   * @return {ItemList}\n   */\n  actionItems() {\n    const items = new ItemList();\n\n    items.add(\n      'refresh',\n      Button.component({\n        title: app.translator.trans('core.forum.index.refresh_tooltip'),\n        icon: 'fas fa-sync',\n        className: 'Button Button--icon',\n        onclick: () => {\n          app.discussions.refresh();\n          if (app.session.user) {\n            app.store.find('users', app.session.user.id());\n            m.redraw();\n          }\n        },\n      })\n    );\n\n    if (app.session.user) {\n      items.add(\n        'markAllAsRead',\n        Button.component({\n          title: app.translator.trans('core.forum.index.mark_all_as_read_tooltip'),\n          icon: 'fas fa-check',\n          className: 'Button Button--icon',\n          onclick: this.markAllAsRead.bind(this),\n        })\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Open the composer for a new discussion or prompt the user to login.\n   *\n   * @return {Promise}\n   */\n  newDiscussionAction() {\n    const LogInModal = () => import(/* webpackChunkName: \"forum/components/LogInModal\" */ './LogInModal');\n    const DiscussionComposer = () => import(/* webpackChunkName: \"forum/components/DiscussionComposer\" */ './DiscussionComposer');\n\n    return new Promise((resolve, reject) => {\n      if (app.session.user) {\n        app.composer.load(DiscussionComposer, { user: app.session.user });\n        app.composer.show();\n\n        return resolve(app.composer);\n      } else {\n        app.modal.show(LogInModal);\n\n        return reject();\n      }\n    });\n  }\n\n  /**\n   * Mark all discussions as read.\n   *\n   * @return void\n   */\n  markAllAsRead() {\n    const confirmation = confirm(app.translator.trans('core.forum.index.mark_all_as_read_confirmation'));\n\n    if (confirmation) {\n      app.session.user.save({ markedAllAsReadAt: new Date() });\n    }\n  }\n}\n"],"sourceRoot":""}