{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/EditPostComposer.js"],"names":["minimizeComposerIfFullScreen","e","app","composer","isFullScreen","minimize","stopPropagation","EditPostComposer","initAttrs","attrs","submitLabel","translator","trans","confirmExit","originalContent","post","content","user","editedContent","headerItems","items","this","add","icon","href","route","discussion","number","onclick","title","jumpToPreview","m","set","data","fields","onsubmit","loading","save","then","viewingDiscussion","current","get","goToNumber","alert","viewButton","Button","className","alerts","dismiss","show","type","controls","hide","loaded","bind","ComposerBody","window","flreg"],"mappings":"iLAKA,SAASA,EAA6BC,GAChCC,IAAIC,SAASC,iBACfF,IAAIC,SAASE,WACbJ,EAAEK,mB,IAceC,E,6EACZC,UAAP,SAAiBC,GACf,EAAMD,UAAN,UAAgBC,GAEhBA,EAAMC,YAAcD,EAAMC,aAAeR,IAAIS,WAAWC,MAAM,0CAC9DH,EAAMI,YAAcJ,EAAMI,aAAeX,IAAIS,WAAWC,MAAM,iDAC9DH,EAAMK,gBAAkBL,EAAMK,iBAAmBL,EAAMM,KAAKC,UAC5DP,EAAMQ,KAAOR,EAAMQ,MAAQR,EAAMM,KAAKE,OAEtCR,EAAMM,KAAKG,cAAgBT,EAAMK,iB,2BAGnCK,YAAA,WACE,IAAMC,EAAQ,EAAH,UAASD,YAAT,WACLJ,EAAOM,KAAKZ,MAAMM,KAYxB,OAVAK,EAAME,IACJ,QACA,aACGC,OAAK,qBAAsB,IAC5B,EAAC,IAAD,CAAMC,KAAMtB,IAAIuB,MAAMC,WAAWX,EAAKW,aAAcX,EAAKY,UAAWC,QAAS5B,GAC1EE,IAAIS,WAAWC,MAAM,qCAAsC,CAAEe,OAAQZ,EAAKY,SAAUD,WAAYX,EAAKW,aAAaG,aAKlHT,G,EAMTU,cAAA,SAAc7B,GACZD,EAA6BC,GAE7B8B,EAAEN,MAAMO,IAAI9B,IAAIuB,MAAMV,KAAKM,KAAKZ,MAAMM,Q,EAQxCkB,KAAA,WACE,MAAO,CACLjB,QAASK,KAAKlB,SAAS+B,OAAOlB,Y,EAIlCmB,SAAA,WAAW,WACHT,EAAaL,KAAKZ,MAAMM,KAAKW,aAEnCL,KAAKe,SAAU,EAEf,IAAMH,EAAOZ,KAAKY,OAElBZ,KAAKZ,MAAMM,KAAKsB,KAAKJ,GAAMK,MAAK,SAACvB,GAG/B,GAAIb,IAAIqC,kBAAkBb,GACxBxB,IAAIsC,QAAQC,IAAI,UAAUC,WAAW3B,EAAKY,cACrC,CAIL,IAAIgB,EACEC,EAAaC,cACjB,CACEC,UAAW,sBACXlB,QAAS,WACPG,EAAEN,MAAMO,IAAI9B,IAAIuB,MAAMV,KAAKA,IAC3Bb,IAAI6C,OAAOC,QAAQL,KAGvBzC,IAAIS,WAAWC,MAAM,yCAEvB+B,EAAQzC,IAAI6C,OAAOE,KACjB,CACEC,KAAM,UACNC,SAAU,CAACP,IAEb1C,IAAIS,WAAWC,MAAM,4CAIzB,EAAKT,SAASiD,SACb/B,KAAKgC,OAAOC,KAAKjC,Q,GAtFsBkC,KA0F9CC,OAAOC,MAAMnC,IAAI,8BAA+Bf","file":"forum/components/EditPostComposer.js","sourcesContent":["import ComposerBody from './ComposerBody';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport icon from '../../common/helpers/icon';\n\nfunction minimizeComposerIfFullScreen(e) {\n  if (app.composer.isFullScreen()) {\n    app.composer.minimize();\n    e.stopPropagation();\n  }\n}\n\n/**\n * The `EditPostComposer` component displays the composer content for editing a\n * post. It sets the initial content to the content of the post that is being\n * edited, and adds a header control to indicate which post is being edited.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `post`\n */\nexport default class EditPostComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_edit.submit_button');\n    attrs.confirmExit = attrs.confirmExit || app.translator.trans('core.forum.composer_edit.discard_confirmation');\n    attrs.originalContent = attrs.originalContent || attrs.post.content();\n    attrs.user = attrs.user || attrs.post.user();\n\n    attrs.post.editedContent = attrs.originalContent;\n  }\n\n  headerItems() {\n    const items = super.headerItems();\n    const post = this.attrs.post;\n\n    items.add(\n      'title',\n      <h3>\n        {icon('fas fa-pencil-alt')}{' '}\n        <Link href={app.route.discussion(post.discussion(), post.number())} onclick={minimizeComposerIfFullScreen}>\n          {app.translator.trans('core.forum.composer_edit.post_link', { number: post.number(), discussion: post.discussion().title() })}\n        </Link>\n      </h3>\n    );\n\n    return items;\n  }\n\n  /**\n   * Jump to the preview when triggered by the text editor.\n   */\n  jumpToPreview(e) {\n    minimizeComposerIfFullScreen(e);\n\n    m.route.set(app.route.post(this.attrs.post));\n  }\n\n  /**\n   * Get the data to submit to the server when the post is saved.\n   *\n   * @return {Object}\n   */\n  data() {\n    return {\n      content: this.composer.fields.content(),\n    };\n  }\n\n  onsubmit() {\n    const discussion = this.attrs.post.discussion();\n\n    this.loading = true;\n\n    const data = this.data();\n\n    this.attrs.post.save(data).then((post) => {\n      // If we're currently viewing the discussion which this edit was made\n      // in, then we can scroll to the post.\n      if (app.viewingDiscussion(discussion)) {\n        app.current.get('stream').goToNumber(post.number());\n      } else {\n        // Otherwise, we'll create an alert message to inform the user that\n        // their edit has been made, containing a button which will\n        // transition to their edited post when clicked.\n        let alert;\n        const viewButton = Button.component(\n          {\n            className: 'Button Button--link',\n            onclick: () => {\n              m.route.set(app.route.post(post));\n              app.alerts.dismiss(alert);\n            },\n          },\n          app.translator.trans('core.forum.composer_edit.view_button')\n        );\n        alert = app.alerts.show(\n          {\n            type: 'success',\n            controls: [viewButton],\n          },\n          app.translator.trans('core.forum.composer_edit.edited_message')\n        );\n      }\n\n      this.composer.hide();\n    }, this.loaded.bind(this));\n  }\n}\n\nwindow.flreg.add('components/EditPostComposer', EditPostComposer)"],"sourceRoot":""}