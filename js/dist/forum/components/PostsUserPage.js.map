{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/CommentPost.js","webpack://@flarum/core/./src/forum/components/ComposerPostPreview.js","webpack://@flarum/core/./src/forum/components/PostEdited.js","webpack://@flarum/core/./src/forum/components/PostMeta.js","webpack://@flarum/core/./src/forum/components/PostsUserPage.js"],"names":["Post","PostUser","CommentPost","oninit","vnode","this","revealContent","cardVisible","subtree","check","isEditing","content","concat","className","listItems","headerItems","toArray","composer","app","m","trust","attrs","post","contentHtml","refreshContent","$","each","script","document","createElement","textContent","Array","from","attributes","forEach","attr","setAttribute","name","value","parentNode","replaceChild","oncreate","onupdate","then","EditPostComposer","bodyMatches","elementAttrs","classList","isHidden","isEdited","editing","toggleContent","items","ItemList","add","component","oncardshow","redraw","oncardhide","PostMeta","PostEdited","Button","icon","onclick","bind","window","flreg","ComposerPostPreview","initAttrs","surround","preview","view","updatePreview","isVisible","fields","s9e","TextFormatter","dom","updateInterval","setInterval","onremove","clearInterval","Component","shouldUpdateTooltip","oldEditedInfo","editedUser","editedInfo","extractText","translator","trans","user","ago","humanTime","editedAt","title","rebuildTooltip","tooltip","time","createdAt","permalink","getPermalink","touch","documentElement","e","setTimeout","parent","find","select","data-toggle","number","fullTime","data","ipAddress","href","stopPropagation","location","origin","route","PostsUserPage","loading","moreResults","posts","loadLimit","loadUser","param","length","footer","loadMore","map","discussion","text","show","refresh","loadResults","parseResults","offset","store","filter","author","username","type","page","limit","sort","results","push","apply","UserPage"],"mappings":"+NAQMA,QAAa,8BACbC,QAAiB,8BAWFC,E,sGACnBC,OAAA,SAAOC,GAAO,WACZ,YAAMD,OAAN,UAAaC,GAQbC,KAAKC,eAAgB,EAQrBD,KAAKE,aAAc,EAEnBF,KAAKG,QAAQC,OACX,kBAAM,EAAKF,eACX,kBAAM,EAAKG,eACX,kBAAM,EAAKJ,kB,EAIfK,QAAA,WACE,OAAO,YAAMA,QAAN,WAAgBC,OAAO,CAC5B,YAAQC,UAAU,eAChB,aAAKC,OAAUT,KAAKU,cAAcC,aAEpC,SAAKH,UAAU,aACZR,KAAKK,YAAc,EAAC,IAAD,CAAqBG,UAAU,eAAeI,SAAUC,IAAID,WAAeE,EAAEC,MAAMf,KAAKgB,MAAMC,KAAKC,mB,EAK7HC,eAAA,WACE,IAAMD,EAAclB,KAAKK,YAAc,GAAKL,KAAKgB,MAAMC,KAAKC,cAKxDlB,KAAKkB,cAAgBA,GACvBlB,KAAKoB,EAAE,qBAAqBC,MAAK,WAC/B,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,YAAczB,KAAKyB,YAC1BC,MAAMC,KAAK3B,KAAK4B,YAAYC,SAAQ,SAACC,GAAD,OAAUR,EAAOS,aAAaD,EAAKE,KAAMF,EAAKG,UAClFjC,KAAKkC,WAAWC,aAAab,EAAQtB,SAIzCA,KAAKkB,YAAcA,G,EAGrBkB,SAAA,SAASrC,GACP,YAAMqC,SAAN,UAAerC,GAEfC,KAAKmB,kB,EAGPkB,SAAA,SAAStC,GACP,YAAMsC,SAAN,UAAetC,GAEfC,KAAKmB,kB,EAGPd,UAAA,WAAY,WACV,6BAAyFiC,MAAK,SAACC,GAC7F,OAAO1B,IAAID,SAAS4B,YAAYD,EAAgB,QAAU,CAAEtB,KAAM,EAAKD,MAAMC,W,EAIjFwB,aAAA,WACE,IAAMxB,EAAOjB,KAAKgB,MAAMC,KAClBD,EAAQ,EAAH,UAASyB,aAAT,WAaX,OAXAzB,EAAMR,WACHQ,EAAMR,WAAa,IACpB,KACAkC,OAAU,CACR7C,aAAa,EACb,eAAgBoB,EAAK0B,WACrB,eAAgB1B,EAAK2B,WACrB3C,cAAeD,KAAKC,cACpB4C,QAAS7C,KAAKK,cAGXW,G,EAMT8B,cAAA,WACE9C,KAAKC,eAAiBD,KAAKC,e,EAQ7BS,YAAA,WAAc,WACNqC,EAAQ,IAAIC,IACZ/B,EAAOjB,KAAKgB,MAAMC,KAqCxB,OAnCA8B,EAAME,IACJ,OACArD,EAAQ,QAASsD,UAAU,CACzBjC,OACAf,YAAaF,KAAKE,YAClBiD,WAAY,WACV,EAAKjD,aAAc,EACnBY,EAAEsC,UAEJC,WAAY,WACV,EAAKnD,aAAc,EACnBY,EAAEsC,YAGN,KAEFL,EAAME,IAAI,OAAQK,cAAmB,CAAErC,UAEnCA,EAAK2B,aAAe3B,EAAK0B,YAC3BI,EAAME,IAAI,SAAUM,cAAqB,CAAEtC,UAKzCA,EAAK0B,YACPI,EAAME,IACJ,SACAO,cAAiB,CACfhD,UAAW,sCACXiD,KAAM,oBACNC,QAAS1D,KAAK8C,cAAca,KAAK3D,SAKhC+C,G,GA/I8BpD,EAAI,SAmJ7CiE,OAAOC,MAAMZ,IAAI,yBAA0BpD,G,qECvJtBiE,E,6EACZC,UAAP,SAAiB/C,GACfA,EAAMR,UAAYQ,EAAMR,WAAa,GACrCQ,EAAMgD,SAAWhD,EAAMgD,UAAa,SAACC,GAAD,OAAaA,M,2BAGnDC,KAAA,WACE,OAAO,SAAK1D,UAAWR,KAAKgB,MAAMR,a,EAGpC4B,SAAA,SAASrC,GAAO,IAKVkE,EALU,OACd,YAAM7B,SAAN,UAAerC,GAKf,IAAMoE,EAAgB,WAGpB,GAAK,EAAKnD,MAAMJ,SAASwD,YAAzB,CAEA,IAAM9D,EAAU,EAAKU,MAAMJ,SAASyD,OAAO/D,UAEvC2D,IAAY3D,IAEhB2D,EAAU3D,EAEV,EAAKU,MAAMgD,UAAS,kBAAMM,IAAIC,cAAcN,QAAQA,GAAW,GAAIlE,EAAMyE,WAE3EL,IAEAnE,KAAKyE,eAAiBC,YAAYP,EAAe,K,EAGnDQ,SAAA,WACEC,cAAc5E,KAAKyE,iB,WAnC0BI,GAuCjDjB,OAAOC,MAAMZ,IAAI,iCAAkCa,I,wFC3C9BP,E,sGACnBzD,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEbC,KAAK8E,qBAAsB,EAC3B9E,KAAK+E,cAAgB,M,EAGvBb,KAAA,WACE,IAAMjD,EAAOjB,KAAKgB,MAAMC,KAClB+D,EAAa/D,EAAK+D,aAClBC,GAAaC,OAAYrE,IAAIsE,WAAWC,MAAM,iCAAkC,CAAEC,KAAML,EAAYM,KAAKC,OAAUtE,EAAKuE,eAM9H,OALIP,IAAejF,KAAK+E,gBACtB/E,KAAK8E,qBAAsB,EAC3B9E,KAAK+E,cAAgBE,GAIrB,UAAMzE,UAAU,aAAaiF,MAAOR,GACjCpE,IAAIsE,WAAWC,MAAM,iC,EAK5BhD,SAAA,SAASrC,GACP,YAAMqC,SAAN,UAAerC,GAEfC,KAAK0F,kB,EAGPrD,SAAA,WACErC,KAAK0F,kB,EAGPA,eAAA,WACM1F,KAAK8E,sBACP9E,KAAKoB,IAAIuE,QAAQ,WAAWA,UAC5B3F,KAAK8E,qBAAsB,I,GArCOD,KA0CxCjB,OAAOC,MAAMZ,IAAI,wBAAyBM,I,yFCzCrBD,E,sGACnBY,KAAA,WACE,IAAMjD,EAAOjB,KAAKgB,MAAMC,KAClB2E,EAAO3E,EAAK4E,YACZC,EAAY9F,KAAK+F,aAAa9E,GAC9B+E,EAAQ,iBAAkBzE,SAAS0E,gBAUzC,OACE,SAAKzF,UAAU,qBACb,OAAGA,UAAU,kBAAkBkD,QARX,SAAUwC,GAAG,WACnCC,YAAW,kBAAM/E,EAAE,GAAMgF,SAASC,KAAK,uBAAuBC,YAE9DJ,EAAE9C,QAAS,GAKgDmD,cAAY,aAClEhB,OAAUK,IAGb,SAAKpF,UAAU,+BACb,UAAMA,UAAU,mBAAmBK,IAAIsE,WAAWC,MAAM,iCAAkC,CAAEoB,OAAQvF,EAAKuF,YAAoB,IAC7H,UAAMhG,UAAU,kBAAiBiG,OAASb,IAF5C,IAE0D,UAAMpF,UAAU,eAAeS,EAAKyF,KAAK9E,WAAW+E,WAC3GX,EACC,OAAGxF,UAAU,4BAA4BoG,KAAMd,GAC5CA,GAGH,WAAOtF,UAAU,iCAAiCyB,MAAO6D,EAAWpC,QAAS,SAACwC,GAAD,OAAOA,EAAEW,wB,EAahGd,aAAA,SAAa9E,GACX,OAAO2C,OAAOkD,SAASC,OAASlG,IAAImG,MAAM/F,KAAKA,I,GA3Cb4D,KA+CtCjB,OAAOC,MAAMZ,IAAI,sBAAuBK,I,mMCjDnB2D,E,sGACnBnH,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAObC,KAAKkH,SAAU,EAOflH,KAAKmH,aAAc,EAOnBnH,KAAKoH,MAAQ,GAObpH,KAAKqH,UAAY,GAEjBrH,KAAKsH,SAASxG,EAAEkG,MAAMO,MAAM,c,EAG9BjH,QAAA,WACE,OAA0B,IAAtBN,KAAKoH,MAAMI,QAAiBxH,KAAKkH,SAUjClH,KAAKkH,QACPO,EAAS,EAAC,IAAD,MACAzH,KAAKmH,cACdM,EACE,SAAKjH,UAAU,0BACb,EAAC,IAAD,CAAQA,UAAU,SAASkD,QAAS1D,KAAK0H,SAAS/D,KAAK3D,OACpDa,IAAIsE,WAAWC,MAAM,6CAO5B,SAAK5E,UAAU,iBACb,QAAIA,UAAU,sBACXR,KAAKoH,MAAMO,KAAI,SAAC1G,GAAD,OACd,YACE,SAAKT,UAAU,4BACZK,IAAIsE,WAAWC,MAAM,qCAAsC,CAC1DwC,WAAY,EAAC,IAAD,CAAMhB,KAAM/F,IAAImG,MAAM/F,KAAKA,IAAQA,EAAK2G,aAAanC,YAIrE,EAAC,IAAD,CAAaxE,KAAMA,SAIzB,SAAKT,UAAU,0BAA0BiH,KAnCzC,SAAKjH,UAAU,iBACb,EAAC,IAAD,CAAaqH,KAAMhH,IAAIsE,WAAWC,MAAM,uCAK9C,IAAIqC,G,EAsCNK,KAAA,SAAKzC,GACH,YAAMyC,KAAN,UAAWzC,GAEXrF,KAAK+H,W,EAQPA,QAAA,WACE/H,KAAKkH,SAAU,EACflH,KAAKoH,MAAQ,GAEbtG,EAAEsC,SAEFpD,KAAKgI,cAAc1F,KAAKtC,KAAKiI,aAAatE,KAAK3D,Q,EAUjDgI,YAAA,SAAYE,GACV,OAAOrH,IAAIsH,MAAM9B,KAAK,QAAS,CAC7B+B,OAAQ,CACNC,OAAQrI,KAAKqF,KAAKiD,WAClBC,KAAM,WAERC,KAAM,CAAEN,SAAQO,MAAOzI,KAAKqH,WAC5BqB,KAAM,gB,EASVhB,SAAA,WACE1H,KAAKkH,SAAU,EACflH,KAAKgI,YAAYhI,KAAKoH,MAAMI,QAAQlF,KAAKtC,KAAKiI,aAAatE,KAAK3D,Q,EASlEiI,aAAA,SAAaU,GAQX,OAPA3I,KAAKkH,SAAU,EAEf,GAAG0B,KAAKC,MAAM7I,KAAKoH,MAAOuB,GAE1B3I,KAAKmH,YAAcwB,EAAQnB,QAAUxH,KAAKqH,UAC1CvG,EAAEsC,SAEKuF,G,GAhJgCG","file":"forum/components/PostsUserPage.js","sourcesContent":["import classList from '../../common/utils/classList';\nimport PostMeta from './PostMeta';\nimport PostEdited from './PostEdited';\nimport ItemList from '../../common/utils/ItemList';\nimport listItems from '../../common/helpers/listItems';\nimport Button from '../../common/components/Button';\nimport ComposerPostPreview from './ComposerPostPreview';\n\nconst Post = await import(/* webpackChunkName: \"forum/components/Post\" */ './Post');\nconst PostUser = await import(/* webpackChunkName: \"forum/components/PostUser\" */ './PostUser');\n\n/**\n * The `CommentPost` component displays a standard `comment`-typed post. This\n * includes a number of item lists (controls, header, and footer) surrounding\n * the post's HTML content.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class CommentPost extends Post.default {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * If the post has been hidden, then this flag determines whether or not its\n     * content has been expanded.\n     *\n     * @type {Boolean}\n     */\n    this.revealContent = false;\n\n    /**\n     * Whether or not the user hover card inside of PostUser is visible.\n     * The property must be managed in CommentPost to be able to use it in the subtree check\n     *\n     * @type {Boolean}\n     */\n    this.cardVisible = false;\n\n    this.subtree.check(\n      () => this.cardVisible,\n      () => this.isEditing(),\n      () => this.revealContent\n    );\n  }\n\n  content() {\n    return super.content().concat([\n      <header className=\"Post-header\">\n        <ul>{listItems(this.headerItems().toArray())}</ul>\n      </header>,\n      <div className=\"Post-body\">\n        {this.isEditing() ? <ComposerPostPreview className=\"Post-preview\" composer={app.composer} /> : m.trust(this.attrs.post.contentHtml())}\n      </div>,\n    ]);\n  }\n\n  refreshContent() {\n    const contentHtml = this.isEditing() ? '' : this.attrs.post.contentHtml();\n\n    // If the post content has changed since the last render, we'll run through\n    // all of the <script> tags in the content and evaluate them. This is\n    // necessary because TextFormatter outputs them for e.g. syntax highlighting.\n    if (this.contentHtml !== contentHtml) {\n      this.$('.Post-body script').each(function () {\n        const script = document.createElement('script');\n        script.textContent = this.textContent;\n        Array.from(this.attributes).forEach((attr) => script.setAttribute(attr.name, attr.value));\n        this.parentNode.replaceChild(script, this);\n      });\n    }\n\n    this.contentHtml = contentHtml;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.refreshContent();\n  }\n\n  onupdate(vnode) {\n    super.onupdate(vnode);\n\n    this.refreshContent();\n  }\n\n  isEditing() {\n    import(/* webpackChunkName: \"forum/components/EditPostComposer\" */ './EditPostComposer').then((EditPostComposer) => {\n      return app.composer.bodyMatches(EditPostComposer.default, { post: this.attrs.post });\n    });\n  }\n\n  elementAttrs() {\n    const post = this.attrs.post;\n    const attrs = super.elementAttrs();\n\n    attrs.className =\n      (attrs.className || '') +\n      ' ' +\n      classList({\n        CommentPost: true,\n        'Post--hidden': post.isHidden(),\n        'Post--edited': post.isEdited(),\n        revealContent: this.revealContent,\n        editing: this.isEditing(),\n      });\n\n    return attrs;\n  }\n\n  /**\n   * Toggle the visibility of a hidden post's content.\n   */\n  toggleContent() {\n    this.revealContent = !this.revealContent;\n  }\n\n  /**\n   * Build an item list for the post's header.\n   *\n   * @return {ItemList}\n   */\n  headerItems() {\n    const items = new ItemList();\n    const post = this.attrs.post;\n\n    items.add(\n      'user',\n      PostUser.default.component({\n        post,\n        cardVisible: this.cardVisible,\n        oncardshow: () => {\n          this.cardVisible = true;\n          m.redraw();\n        },\n        oncardhide: () => {\n          this.cardVisible = false;\n          m.redraw();\n        },\n      }),\n      100\n    );\n    items.add('meta', PostMeta.component({ post }));\n\n    if (post.isEdited() && !post.isHidden()) {\n      items.add('edited', PostEdited.component({ post }));\n    }\n\n    // If the post is hidden, add a button that allows toggling the visibility\n    // of the post's content.\n    if (post.isHidden()) {\n      items.add(\n        'toggle',\n        Button.component({\n          className: 'Button Button--default Button--more',\n          icon: 'fas fa-ellipsis-h',\n          onclick: this.toggleContent.bind(this),\n        })\n      );\n    }\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/CommentPost', CommentPost)","/*global s9e*/\n\nimport Component from '../../common/Component';\n\n/**\n * The `ComposerPostPreview` component renders Markdown as HTML using the\n * TextFormatter library, polling a data source for changes every 50ms. This is\n * done to prevent expensive redraws on e.g. every single keystroke, while\n * still retaining the perception of live updates for the user.\n *\n * ### Attrs\n *\n * - `composer` The state of the composer controlling this preview.\n * - `className` A CSS class for the element surrounding the preview.\n * - `surround` A callback that can execute code before and after re-render, e.g. for scroll anchoring.\n */\nexport default class ComposerPostPreview extends Component {\n  static initAttrs(attrs) {\n    attrs.className = attrs.className || '';\n    attrs.surround = attrs.surround || ((preview) => preview());\n  }\n\n  view() {\n    return <div className={this.attrs.className} />;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // Every 50ms, if the composer content has changed, then update the post's\n    // body with a preview.\n    let preview;\n    const updatePreview = () => {\n      // Since we're polling, the composer may have been closed in the meantime,\n      // so we bail in that case.\n      if (!this.attrs.composer.isVisible()) return;\n\n      const content = this.attrs.composer.fields.content();\n\n      if (preview === content) return;\n\n      preview = content;\n\n      this.attrs.surround(() => s9e.TextFormatter.preview(preview || '', vnode.dom));\n    };\n    updatePreview();\n\n    this.updateInterval = setInterval(updatePreview, 50);\n  }\n\n  onremove() {\n    clearInterval(this.updateInterval);\n  }\n}\n\nwindow.flreg.add('components/ComposerPostPreview', ComposerPostPreview)","import Component from '../../common/Component';\nimport humanTime from '../../common/utils/humanTime';\nimport extractText from '../../common/utils/extractText';\n\n/**\n * The `PostEdited` component displays information about when and by whom a post\n * was edited.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class PostEdited extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.shouldUpdateTooltip = false;\n    this.oldEditedInfo = null;\n  }\n\n  view() {\n    const post = this.attrs.post;\n    const editedUser = post.editedUser();\n    const editedInfo = extractText(app.translator.trans('core.forum.post.edited_tooltip', { user: editedUser, ago: humanTime(post.editedAt()) }));\n    if (editedInfo !== this.oldEditedInfo) {\n      this.shouldUpdateTooltip = true;\n      this.oldEditedInfo = editedInfo;\n    }\n\n    return (\n      <span className=\"PostEdited\" title={editedInfo}>\n        {app.translator.trans('core.forum.post.edited_text')}\n      </span>\n    );\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.rebuildTooltip();\n  }\n\n  onupdate() {\n    this.rebuildTooltip();\n  }\n\n  rebuildTooltip() {\n    if (this.shouldUpdateTooltip) {\n      this.$().tooltip('destroy').tooltip();\n      this.shouldUpdateTooltip = false;\n    }\n  }\n}\n\nwindow.flreg.add('components/PostEdited', PostEdited)","import Component from '../../common/Component';\nimport humanTime from '../../common/helpers/humanTime';\nimport fullTime from '../../common/helpers/fullTime';\n\n/**\n * The `PostMeta` component displays the time of a post, and when clicked, shows\n * a dropdown containing more information about the post (number, full time,\n * permalink).\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class PostMeta extends Component {\n  view() {\n    const post = this.attrs.post;\n    const time = post.createdAt();\n    const permalink = this.getPermalink(post);\n    const touch = 'ontouchstart' in document.documentElement;\n\n    // When the dropdown menu is shown, select the contents of the permalink\n    // input so that the user can quickly copy the URL.\n    const selectPermalink = function (e) {\n      setTimeout(() => $(this).parent().find('.PostMeta-permalink').select());\n\n      e.redraw = false;\n    };\n\n    return (\n      <div className=\"Dropdown PostMeta\">\n        <a className=\"Dropdown-toggle\" onclick={selectPermalink} data-toggle=\"dropdown\">\n          {humanTime(time)}\n        </a>\n\n        <div className=\"Dropdown-menu dropdown-menu\">\n          <span className=\"PostMeta-number\">{app.translator.trans('core.forum.post.number_tooltip', { number: post.number() })}</span>{' '}\n          <span className=\"PostMeta-time\">{fullTime(time)}</span> <span className=\"PostMeta-ip\">{post.data.attributes.ipAddress}</span>\n          {touch ? (\n            <a className=\"Button PostMeta-permalink\" href={permalink}>\n              {permalink}\n            </a>\n          ) : (\n            <input className=\"FormControl PostMeta-permalink\" value={permalink} onclick={(e) => e.stopPropagation()} />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Get the permalink for the given post.\n   *\n   * @param {Post} post\n   * @returns {String}\n   */\n  getPermalink(post) {\n    return window.location.origin + app.route.post(post);\n  }\n}\n\nwindow.flreg.add('components/PostMeta', PostMeta)","import UserPage from 'flarum/components/UserPage';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport Placeholder from '../../common/components/Placeholder';\nimport CommentPost from './CommentPost';\n\n/**\n * The `PostsUserPage` component shows a user's activity feed inside of their\n * profile.\n */\nexport default class PostsUserPage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not the activity feed is currently loading.\n     *\n     * @type {Boolean}\n     */\n    this.loading = true;\n\n    /**\n     * Whether or not there are any more activity items that can be loaded.\n     *\n     * @type {Boolean}\n     */\n    this.moreResults = false;\n\n    /**\n     * The Post models in the feed.\n     *\n     * @type {Post[]}\n     */\n    this.posts = [];\n\n    /**\n     * The number of activity items to load per request.\n     *\n     * @type {Integer}\n     */\n    this.loadLimit = 20;\n\n    this.loadUser(m.route.param('username'));\n  }\n\n  content() {\n    if (this.posts.length === 0 && !this.loading) {\n      return (\n        <div className=\"PostsUserPage\">\n          <Placeholder text={app.translator.trans('core.forum.user.posts_empty_text')} />\n        </div>\n      );\n    }\n\n    let footer;\n\n    if (this.loading) {\n      footer = <LoadingIndicator />;\n    } else if (this.moreResults) {\n      footer = (\n        <div className=\"PostsUserPage-loadMore\">\n          <Button className=\"Button\" onclick={this.loadMore.bind(this)}>\n            {app.translator.trans('core.forum.user.posts_load_more_button')}\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"PostsUserPage\">\n        <ul className=\"PostsUserPage-list\">\n          {this.posts.map((post) => (\n            <li>\n              <div className=\"PostsUserPage-discussion\">\n                {app.translator.trans('core.forum.user.in_discussion_text', {\n                  discussion: <Link href={app.route.post(post)}>{post.discussion().title()}</Link>,\n                })}\n              </div>\n\n              <CommentPost post={post} />\n            </li>\n          ))}\n        </ul>\n        <div className=\"PostsUserPage-loadMore\">{footer}</div>\n      </div>\n    );\n  }\n\n  /**\n   * Initialize the component with a user, and trigger the loading of their\n   * activity feed.\n   */\n  show(user) {\n    super.show(user);\n\n    this.refresh();\n  }\n\n  /**\n   * Clear and reload the user's activity feed.\n   *\n   * @public\n   */\n  refresh() {\n    this.loading = true;\n    this.posts = [];\n\n    m.redraw();\n\n    this.loadResults().then(this.parseResults.bind(this));\n  }\n\n  /**\n   * Load a new page of the user's activity feed.\n   *\n   * @param {Integer} [offset] The position to start getting results from.\n   * @return {Promise}\n   * @protected\n   */\n  loadResults(offset) {\n    return app.store.find('posts', {\n      filter: {\n        author: this.user.username(),\n        type: 'comment',\n      },\n      page: { offset, limit: this.loadLimit },\n      sort: '-createdAt',\n    });\n  }\n\n  /**\n   * Load the next page of results.\n   *\n   * @public\n   */\n  loadMore() {\n    this.loading = true;\n    this.loadResults(this.posts.length).then(this.parseResults.bind(this));\n  }\n\n  /**\n   * Parse results and append them to the activity feed.\n   *\n   * @param {Post[]} results\n   * @return {Post[]}\n   */\n  parseResults(results) {\n    this.loading = false;\n\n    [].push.apply(this.posts, results);\n\n    this.moreResults = results.length >= this.loadLimit;\n    m.redraw();\n\n    return results;\n  }\n}\n//Flarum Asynchronous Module\n"],"sourceRoot":""}