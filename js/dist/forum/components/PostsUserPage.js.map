{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/CommentPost.js","webpack://@flarum/core/./src/forum/components/PostsUserPage.js"],"names":["CommentPost","oninit","vnode","this","revealContent","cardVisible","subtree","check","isEditing","content","concat","className","listItems","headerItems","toArray","composer","app","m","trust","attrs","post","contentHtml","refreshContent","$","each","script","document","createElement","textContent","Array","from","attributes","forEach","attr","setAttribute","name","value","parentNode","replaceChild","oncreate","onupdate","then","EditPostComposer","bodyMatches","elementAttrs","classList","isHidden","isEdited","editing","toggleContent","items","ItemList","add","PostUser","oncardshow","redraw","oncardhide","PostMeta","PostEdited","Button","icon","onclick","bind","Post","PostsUserPage","loading","moreResults","posts","loadLimit","loadUser","route","param","length","footer","loadMore","translator","trans","map","discussion","href","title","text","show","user","refresh","loadResults","parseResults","offset","store","find","filter","author","username","type","page","limit","sort","results","push","apply","UserPage"],"mappings":"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","file":"forum/components/PostsUserPage.js","sourcesContent":["import Post from './Post';\nimport classList from '../../common/utils/classList';\nimport PostUser from './PostUser';\nimport PostMeta from './PostMeta';\nimport PostEdited from './PostEdited';\nimport ItemList from '../../common/utils/ItemList';\nimport listItems from '../../common/helpers/listItems';\nimport Button from '../../common/components/Button';\nimport ComposerPostPreview from './ComposerPostPreview';\n\n/**\n * The `CommentPost` component displays a standard `comment`-typed post. This\n * includes a number of item lists (controls, header, and footer) surrounding\n * the post's HTML content.\n *\n * ### Attrs\n *\n * - `post`\n */\nexport default class CommentPost extends Post {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * If the post has been hidden, then this flag determines whether or not its\n     * content has been expanded.\n     *\n     * @type {Boolean}\n     */\n    this.revealContent = false;\n\n    /**\n     * Whether or not the user hover card inside of PostUser is visible.\n     * The property must be managed in CommentPost to be able to use it in the subtree check\n     *\n     * @type {Boolean}\n     */\n    this.cardVisible = false;\n\n    this.subtree.check(\n      () => this.cardVisible,\n      () => this.isEditing(),\n      () => this.revealContent\n    );\n  }\n\n  content() {\n    return super.content().concat([\n      <header className=\"Post-header\">\n        <ul>{listItems(this.headerItems().toArray())}</ul>\n      </header>,\n      <div className=\"Post-body\">\n        {this.isEditing() ? <ComposerPostPreview className=\"Post-preview\" composer={app.composer} /> : m.trust(this.attrs.post.contentHtml())}\n      </div>,\n    ]);\n  }\n\n  refreshContent() {\n    const contentHtml = this.isEditing() ? '' : this.attrs.post.contentHtml();\n\n    // If the post content has changed since the last render, we'll run through\n    // all of the <script> tags in the content and evaluate them. This is\n    // necessary because TextFormatter outputs them for e.g. syntax highlighting.\n    if (this.contentHtml !== contentHtml) {\n      this.$('.Post-body script').each(function () {\n        const script = document.createElement('script');\n        script.textContent = this.textContent;\n        Array.from(this.attributes).forEach((attr) => script.setAttribute(attr.name, attr.value));\n        this.parentNode.replaceChild(script, this);\n      });\n    }\n\n    this.contentHtml = contentHtml;\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.refreshContent();\n  }\n\n  onupdate(vnode) {\n    super.onupdate(vnode);\n\n    this.refreshContent();\n  }\n\n  isEditing() {\n    import(/* webpackChunkName: \"forum/components/EditPostComposer\" */ './EditPostComposer').then((EditPostComposer) => {\n      return app.composer.bodyMatches(EditPostComposer.default, { post: this.attrs.post });\n    });\n  }\n\n  elementAttrs() {\n    const post = this.attrs.post;\n    const attrs = super.elementAttrs();\n\n    attrs.className =\n      (attrs.className || '') +\n      ' ' +\n      classList({\n        CommentPost: true,\n        'Post--hidden': post.isHidden(),\n        'Post--edited': post.isEdited(),\n        revealContent: this.revealContent,\n        editing: this.isEditing(),\n      });\n\n    return attrs;\n  }\n\n  /**\n   * Toggle the visibility of a hidden post's content.\n   */\n  toggleContent() {\n    this.revealContent = !this.revealContent;\n  }\n\n  /**\n   * Build an item list for the post's header.\n   *\n   * @return {ItemList}\n   */\n  headerItems() {\n    const items = new ItemList();\n    const post = this.attrs.post;\n\n    items.add(\n      'user',\n      PostUser.component({\n        post,\n        cardVisible: this.cardVisible,\n        oncardshow: () => {\n          this.cardVisible = true;\n          m.redraw();\n        },\n        oncardhide: () => {\n          this.cardVisible = false;\n          m.redraw();\n        },\n      }),\n      100\n    );\n    items.add('meta', PostMeta.component({ post }));\n\n    if (post.isEdited() && !post.isHidden()) {\n      items.add('edited', PostEdited.component({ post }));\n    }\n\n    // If the post is hidden, add a button that allows toggling the visibility\n    // of the post's content.\n    if (post.isHidden()) {\n      items.add(\n        'toggle',\n        Button.component({\n          className: 'Button Button--default Button--more',\n          icon: 'fas fa-ellipsis-h',\n          onclick: this.toggleContent.bind(this),\n        })\n      );\n    }\n\n    return items;\n  }\n}\n","import UserPage from './UserPage';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport Placeholder from '../../common/components/Placeholder';\nimport CommentPost from './CommentPost';\n\n/**\n * The `PostsUserPage` component shows a user's activity feed inside of their\n * profile.\n */\nexport default class PostsUserPage extends UserPage {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not the activity feed is currently loading.\n     *\n     * @type {Boolean}\n     */\n    this.loading = true;\n\n    /**\n     * Whether or not there are any more activity items that can be loaded.\n     *\n     * @type {Boolean}\n     */\n    this.moreResults = false;\n\n    /**\n     * The Post models in the feed.\n     *\n     * @type {Post[]}\n     */\n    this.posts = [];\n\n    /**\n     * The number of activity items to load per request.\n     *\n     * @type {Integer}\n     */\n    this.loadLimit = 20;\n\n    this.loadUser(m.route.param('username'));\n  }\n\n  content() {\n    if (this.posts.length === 0 && !this.loading) {\n      return (\n        <div className=\"PostsUserPage\">\n          <Placeholder text={app.translator.trans('core.forum.user.posts_empty_text')} />\n        </div>\n      );\n    }\n\n    let footer;\n\n    if (this.loading) {\n      footer = <LoadingIndicator />;\n    } else if (this.moreResults) {\n      footer = (\n        <div className=\"PostsUserPage-loadMore\">\n          <Button className=\"Button\" onclick={this.loadMore.bind(this)}>\n            {app.translator.trans('core.forum.user.posts_load_more_button')}\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"PostsUserPage\">\n        <ul className=\"PostsUserPage-list\">\n          {this.posts.map((post) => (\n            <li>\n              <div className=\"PostsUserPage-discussion\">\n                {app.translator.trans('core.forum.user.in_discussion_text', {\n                  discussion: <Link href={app.route.post(post)}>{post.discussion().title()}</Link>,\n                })}\n              </div>\n\n              <CommentPost post={post} />\n            </li>\n          ))}\n        </ul>\n        <div className=\"PostsUserPage-loadMore\">{footer}</div>\n      </div>\n    );\n  }\n\n  /**\n   * Initialize the component with a user, and trigger the loading of their\n   * activity feed.\n   */\n  show(user) {\n    super.show(user);\n\n    this.refresh();\n  }\n\n  /**\n   * Clear and reload the user's activity feed.\n   *\n   * @public\n   */\n  refresh() {\n    this.loading = true;\n    this.posts = [];\n\n    m.redraw();\n\n    this.loadResults().then(this.parseResults.bind(this));\n  }\n\n  /**\n   * Load a new page of the user's activity feed.\n   *\n   * @param {Integer} [offset] The position to start getting results from.\n   * @return {Promise}\n   * @protected\n   */\n  loadResults(offset) {\n    return app.store.find('posts', {\n      filter: {\n        author: this.user.username(),\n        type: 'comment',\n      },\n      page: { offset, limit: this.loadLimit },\n      sort: '-createdAt',\n    });\n  }\n\n  /**\n   * Load the next page of results.\n   *\n   * @public\n   */\n  loadMore() {\n    this.loading = true;\n    this.loadResults(this.posts.length).then(this.parseResults.bind(this));\n  }\n\n  /**\n   * Parse results and append them to the activity feed.\n   *\n   * @param {Post[]} results\n   * @return {Post[]}\n   */\n  parseResults(results) {\n    this.loading = false;\n\n    [].push.apply(this.posts, results);\n\n    this.moreResults = results.length >= this.loadLimit;\n    m.redraw();\n\n    return results;\n  }\n}\n"],"sourceRoot":""}