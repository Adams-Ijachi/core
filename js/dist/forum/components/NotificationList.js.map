{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/DiscussionRenamedNotification.js","webpack://@flarum/core/./src/forum/components/Notification.js","webpack://@flarum/core/./src/forum/components/NotificationList.js"],"names":["DiscussionRenamedNotification","icon","href","notification","this","attrs","app","route","discussion","subject","content","postNumber","translator","trans","user","fromUser","view","Link","className","contentType","isRead","external","includes","onclick","markAsRead","bind","Button","title","e","preventDefault","stopPropagation","avatar","humanTime","createdAt","excerpt","session","pushAttributes","unreadNotificationCount","save","Component","NotificationList","state","pages","getNotificationPages","markAllAsRead","length","map","notifications","groups","discussions","forEach","Discussion","key","id","push","indexOf","group","badges","toArray","listItems","forum","attribute","NotificationComponent","notificationComponents","component","isLoading","LoadingIndicator","discussionRenamed","oncreate","vnode","$notifications","$","$scrollParent","inPanel","window","boundScrollHandler","scrollHandler","on","onremove","off","scrollParent","document","documentElement","atBottom","Math","abs","scrollHeight","scrollTop","clientHeight","hasMoreResults","loadMore","css"],"mappings":"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","file":"forum/components/NotificationList.js","sourcesContent":["import Notification from './Notification';\n\n/**\n * The `DiscussionRenamedNotification` component displays a notification which\n * indicates that a discussion has had its title changed.\n *\n * ### Attrs\n *\n * - All of the attrs for Notification\n */\nexport default class DiscussionRenamedNotification extends Notification {\n  icon() {\n    return 'fas fa-pencil-alt';\n  }\n\n  href() {\n    const notification = this.attrs.notification;\n\n    return app.route.discussion(notification.subject(), notification.content().postNumber);\n  }\n\n  content() {\n    return app.translator.trans('core.forum.notifications.discussion_renamed_text', { user: this.attrs.notification.fromUser() });\n  }\n}\n","import Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport icon from '../../common/helpers/icon';\nimport humanTime from '../../common/helpers/humanTime';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\n\n/**\n * The `Notification` component abstract displays a single notification.\n * Subclasses should implement the `icon`, `href`, and `content` methods.\n *\n * ### Attrs\n *\n * - `notification`\n *\n * @abstract\n */\nexport default class Notification extends Component {\n  view() {\n    const notification = this.attrs.notification;\n    const href = this.href();\n\n    return (\n      <Link\n        className={'Notification Notification--' + notification.contentType() + ' ' + (!notification.isRead() ? 'unread' : '')}\n        href={href}\n        external={href.includes('://')}\n        onclick={this.markAsRead.bind(this)}\n      >\n        {!notification.isRead() &&\n          Button.component({\n            className: 'Notification-action Button Button--icon Button--link',\n            icon: 'fas fa-check',\n            title: app.translator.trans('core.forum.notifications.mark_as_read_tooltip'),\n            onclick: (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n\n              this.markAsRead();\n            },\n          })}\n        {avatar(notification.fromUser())}\n        {icon(this.icon(), { className: 'Notification-icon' })}\n        <span className=\"Notification-content\">{this.content()}</span>\n        {humanTime(notification.createdAt())}\n        <div className=\"Notification-excerpt\">{this.excerpt()}</div>\n      </Link>\n    );\n  }\n\n  /**\n   * Get the name of the icon that should be displayed in the notification.\n   *\n   * @return {String}\n   * @abstract\n   */\n  icon() {}\n\n  /**\n   * Get the URL that the notification should link to.\n   *\n   * @return {String}\n   * @abstract\n   */\n  href() {}\n\n  /**\n   * Get the content of the notification.\n   *\n   * @return {VirtualElement}\n   * @abstract\n   */\n  content() {}\n\n  /**\n   * Get the excerpt of the notification.\n   *\n   * @return {VirtualElement}\n   * @abstract\n   */\n  excerpt() {}\n\n  /**\n   * Mark the notification as read.\n   */\n  markAsRead() {\n    if (this.attrs.notification.isRead()) return;\n\n    app.session.user.pushAttributes({ unreadNotificationCount: app.session.user.unreadNotificationCount() - 1 });\n\n    this.attrs.notification.save({ isRead: true });\n  }\n}\n","import Component from '../../common/Component';\nimport listItems from '../../common/helpers/listItems';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport Discussion from '../../common/models/Discussion';\nimport DiscussionRenamedNotification from './DiscussionRenamedNotification';\n\n/**\n * The `NotificationList` component displays a list of the logged-in user's\n * notifications, grouped by discussion.\n */\nexport default class NotificationList extends Component {\n  view() {\n    const state = this.attrs.state;\n    const pages = state.getNotificationPages();\n\n    return (\n      <div className=\"NotificationList\">\n        <div className=\"NotificationList-header\">\n          <div className=\"App-primaryControl\">\n            {Button.component({\n              className: 'Button Button--icon Button--link',\n              icon: 'fas fa-check',\n              title: app.translator.trans('core.forum.notifications.mark_all_as_read_tooltip'),\n              onclick: state.markAllAsRead.bind(state),\n            })}\n          </div>\n\n          <h4 className=\"App-titleControl App-titleControl--text\">{app.translator.trans('core.forum.notifications.title')}</h4>\n        </div>\n\n        <div className=\"NotificationList-content\">\n          {pages.length\n            ? pages.map((notifications) => {\n                const groups = [];\n                const discussions = {};\n\n                notifications.forEach((notification) => {\n                  const subject = notification.subject();\n\n                  if (typeof subject === 'undefined') return;\n\n                  // Get the discussion that this notification is related to. If it's not\n                  // directly related to a discussion, it may be related to a post or\n                  // other entity which is related to a discussion.\n                  let discussion = false;\n                  if (subject instanceof Discussion) discussion = subject;\n                  else if (subject && subject.discussion) discussion = subject.discussion();\n\n                  // If the notification is not related to a discussion directly or\n                  // indirectly, then we will assign it to a neutral group.\n                  const key = discussion ? discussion.id() : 0;\n                  discussions[key] = discussions[key] || { discussion: discussion, notifications: [] };\n                  discussions[key].notifications.push(notification);\n\n                  if (groups.indexOf(discussions[key]) === -1) {\n                    groups.push(discussions[key]);\n                  }\n                });\n\n                return groups.map((group) => {\n                  const badges = group.discussion && group.discussion.badges().toArray();\n\n                  return (\n                    <div className=\"NotificationGroup\">\n                      {group.discussion ? (\n                        <Link className=\"NotificationGroup-header\" href={app.route.discussion(group.discussion)}>\n                          {badges && badges.length ? <ul className=\"NotificationGroup-badges badges\">{listItems(badges)}</ul> : ''}\n                          {group.discussion.title()}\n                        </Link>\n                      ) : (\n                        <div className=\"NotificationGroup-header\">{app.forum.attribute('title')}</div>\n                      )}\n\n                      <ul className=\"NotificationGroup-content\">\n                        {group.notifications.map((notification) => {\n                          const NotificationComponent = this.notificationComponents()[notification.contentType()];\n                          return NotificationComponent ? <li>{NotificationComponent.component({ notification })}</li> : '';\n                        })}\n                      </ul>\n                    </div>\n                  );\n                });\n              })\n            : ''}\n          {state.isLoading() ? (\n            <LoadingIndicator className=\"LoadingIndicator--block\" />\n          ) : pages.length ? (\n            ''\n          ) : (\n            <div className=\"NotificationList-empty\">{app.translator.trans('core.forum.notifications.empty_text')}</div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * A map of notification types to their components.\n   *\n   * @type {Object}\n   */\n  notificationComponents() {\n    return {\n      discussionRenamed: DiscussionRenamedNotification,\n    };\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    this.$notifications = this.$('.NotificationList-content');\n\n    // If we are on the notifications page, the window will be scrolling and not the $notifications element.\n    this.$scrollParent = this.inPanel() ? this.$notifications : $(window);\n\n    this.boundScrollHandler = this.scrollHandler.bind(this);\n    this.$scrollParent.on('scroll', this.boundScrollHandler);\n  }\n\n  onremove() {\n    this.$scrollParent.off('scroll', this.boundScrollHandler);\n  }\n\n  scrollHandler() {\n    const state = this.attrs.state;\n\n    // Whole-page scroll events are listened to on `window`, but we need to get the actual\n    // scrollHeight, scrollTop, and clientHeight from the document element.\n    const scrollParent = this.inPanel() ? this.$scrollParent[0] : document.documentElement;\n\n    // On very short screens, the scrollHeight + scrollTop might not reach the clientHeight\n    // by a fraction of a pixel, so we compensate for that.\n    const atBottom = Math.abs(scrollParent.scrollHeight - scrollParent.scrollTop - scrollParent.clientHeight) <= 1;\n\n    if (state.hasMoreResults() && !state.isLoading() && atBottom) {\n      state.loadMore();\n    }\n  }\n\n  /**\n   * If the NotificationList component isn't in a panel (e.g. on NotificationPage when mobile),\n   * we need to listen to scroll events on the window, and get scroll state from the body.\n   */\n  inPanel() {\n    return this.$notifications.css('overflow') === 'auto';\n  }\n}\n"],"sourceRoot":""}