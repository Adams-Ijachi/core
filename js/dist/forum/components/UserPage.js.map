{"version":3,"sources":["webpack://@flarum/core/./src/forum/utils/UserControls.js","webpack://@flarum/core/./src/forum/components/AvatarEditor.js","webpack://@flarum/core/./src/forum/components/UserCard.js","webpack://@flarum/core/./src/forum/components/AffixedSidebar.js","webpack://@flarum/core/./src/forum/components/UserPage.js"],"names":["UserControls","controls","user","context","items","ItemList","forEach","section","toArray","length","item","add","itemName","Separator","userControls","moderationControls","canEdit","canEditCredentials","canEditGroups","Button","icon","onclick","this","editAction","bind","app","translator","trans","destructiveControls","id","canDelete","deleteAction","confirm","then","showDeletionAlert","current","matches","UserPage","history","back","window","location","reload","type","data","attributes","username","email","message","success","error","alerts","show","modal","flreg","AvatarEditor","oninit","vnode","loading","isDraggedOver","view","attrs","className","classList","avatar","avatarUrl","title","data-toggle","quickUpload","ondragover","enableDragover","ondragenter","ondragleave","disableDragover","ondragend","ondrop","dropUpload","LoadingIndicator","listItems","controlItems","openPicker","remove","e","preventDefault","stopPropagation","upload","dataTransfer","files","$","appendTo","hide","trigger","on","target","file","FormData","append","m","redraw","request","method","url","forum","attribute","serialize","raw","body","failure","response","store","pushPayload","avatarColor","Component","UserCard","color","badges","style","backgroundColor","Dropdown","menuClassName","buttonClassName","controlsButtonClassName","label","accessibleToggleLabel","editable","component","Link","href","route","infoItems","lastSeenAt","online","isOnline","humanTime","ago","joinTime","AffixedSidebar","children","oncreate","boundOnresize","onresize","resize","onremove","off","$sidebar","$header","$footer","$affixElement","find","removeClass","removeData","outerHeight","height","affix","offset","top","parseInt","css","bottom","bodyClass","session","sidebarItems","content","set","setTitle","displayName","loadUser","lowercaseUsername","toLowerCase","preloadedApiDocument","all","some","bySlug","SelectDropdown","navItems","LinkButton","commentCount","discussionCount","Page"],"mappings":"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","file":"forum/components/UserPage.js","sourcesContent":["import Button from '../../common/components/Button';\nimport Separator from '../../common/components/Separator';\nimport UserPage from '../components/UserPage';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `UserControls` utility constructs a list of buttons for a user which\n * perform actions on it.\n */\nexport default class UserControls {\n  /**\n   * Get a list of controls for a user.\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @public\n   */\n  controls(user, context) {\n    const items = new ItemList();\n\n    ['user', 'moderation', 'destructive'].forEach((section) => {\n      const controls = this[section + 'Controls'](user, context).toArray();\n      if (controls.length) {\n        controls.forEach((item) => items.add(item.itemName, item));\n        items.add(section + 'Separator', <Separator />);\n      }\n    });\n\n    return items;\n  }\n\n  /**\n   * Get controls for a user pertaining to the current user (e.g. poke, follow).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  userControls() {\n    return new ItemList();\n  }\n\n  /**\n   * Get controls for a user pertaining to moderation (e.g. suspend, edit).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  moderationControls(user) {\n    const items = new ItemList();\n\n    if (user.canEdit() || user.canEditCredentials() || user.canEditGroups()) {\n      items.add(\n        'edit',\n        <Button icon=\"fas fa-pencil-alt\" onclick={this.editAction.bind(this, user)}>\n          {app.translator.trans('core.forum.user_controls.edit_button')}\n        </Button>\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Get controls for a user which are destructive (e.g. delete).\n   *\n   * @param {User} user\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  destructiveControls(user) {\n    const items = new ItemList();\n\n    if (user.id() !== '1' && user.canDelete()) {\n      items.add(\n        'delete',\n        <Button icon=\"fas fa-times\" onclick={this.deleteAction.bind(this, user)}>\n          {app.translator.trans('core.forum.user_controls.delete_button')}\n        </Button>\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Delete the user.\n   *\n   * @param {User} user\n   */\n  deleteAction(user) {\n    if (!confirm(app.translator.trans('core.forum.user_controls.delete_confirmation'))) {\n      return;\n    }\n\n    user\n      .delete()\n      .then(() => {\n        this.showDeletionAlert(user, 'success');\n        if (app.current.matches(UserPage, { user })) {\n          app.history.back();\n        } else {\n          window.location.reload();\n        }\n      })\n      .catch(() => this.showDeletionAlert(user, 'error'));\n  }\n\n  /**\n   * Show deletion alert of user.\n   *\n   * @param {User} user\n   * @param {string} type\n   */\n  showDeletionAlert(user, type) {\n    const { username, email } = user.data.attributes;\n    const message = {\n      success: 'core.forum.user_controls.delete_success_message',\n      error: 'core.forum.user_controls.delete_error_message',\n    }[type];\n\n    app.alerts.show({ type }, app.translator.trans(message, { username, email }));\n  }\n\n  /**\n   * Edit the user.\n   *\n   * @param {User} user\n   */\n  editAction(user) {\n    const EditUserModal = () => import(/* webpackChunkName: \"forum/components/EditUserModal\" */ '../components/EditUserModal');\n\n    app.modal.show(EditUserModal, { user });\n  }\n}\n\nwindow.flreg.add('utils/UserControls', UserControls)","import Component from '../../common/Component';\nimport avatar from '../../common/helpers/avatar';\nimport icon from '../../common/helpers/icon';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\nimport classList from '../../common/utils/classList';\nimport Button from '../../common/components/Button';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\n\n/**\n * The `AvatarEditor` component displays a user's avatar along with a dropdown\n * menu which allows the user to upload/remove the avatar.\n *\n * ### Attrs\n *\n * - `className`\n * - `user`\n */\nexport default class AvatarEditor extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * Whether or not an avatar upload is in progress.\n     *\n     * @type {Boolean}\n     */\n    this.loading = false;\n\n    /**\n     * Whether or not an image has been dragged over the dropzone.\n     *\n     * @type {Boolean}\n     */\n    this.isDraggedOver = false;\n  }\n\n  view() {\n    const user = this.attrs.user;\n\n    return (\n      <div className={classList(['AvatarEditor', 'Dropdown', this.attrs.className, this.loading && 'loading', this.isDraggedOver && 'dragover'])}>\n        {avatar(user)}\n        <a\n          className={user.avatarUrl() ? 'Dropdown-toggle' : 'Dropdown-toggle AvatarEditor--noAvatar'}\n          title={app.translator.trans('core.forum.user.avatar_upload_tooltip')}\n          data-toggle=\"dropdown\"\n          onclick={this.quickUpload.bind(this)}\n          ondragover={this.enableDragover.bind(this)}\n          ondragenter={this.enableDragover.bind(this)}\n          ondragleave={this.disableDragover.bind(this)}\n          ondragend={this.disableDragover.bind(this)}\n          ondrop={this.dropUpload.bind(this)}\n        >\n          {this.loading ? <LoadingIndicator /> : user.avatarUrl() ? icon('fas fa-pencil-alt') : icon('fas fa-plus-circle')}\n        </a>\n        <ul className=\"Dropdown-menu Menu\">{listItems(this.controlItems().toArray())}</ul>\n      </div>\n    );\n  }\n\n  /**\n   * Get the items in the edit avatar dropdown menu.\n   *\n   * @return {ItemList}\n   */\n  controlItems() {\n    const items = new ItemList();\n\n    items.add(\n      'upload',\n      <Button icon=\"fas fa-upload\" onclick={this.openPicker.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_upload_button')}\n      </Button>\n    );\n\n    items.add(\n      'remove',\n      <Button icon=\"fas fa-times\" onclick={this.remove.bind(this)}>\n        {app.translator.trans('core.forum.user.avatar_remove_button')}\n      </Button>\n    );\n\n    return items;\n  }\n\n  /**\n   * Enable dragover style\n   *\n   * @param {Event} e\n   */\n  enableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = true;\n  }\n\n  /**\n   * Disable dragover style\n   *\n   * @param {Event} e\n   */\n  disableDragover(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n  }\n\n  /**\n   * Upload avatar when file is dropped into dropzone.\n   *\n   * @param {Event} e\n   */\n  dropUpload(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.isDraggedOver = false;\n    this.upload(e.dataTransfer.files[0]);\n  }\n\n  /**\n   * If the user doesn't have an avatar, there's no point in showing the\n   * controls dropdown, because only one option would be viable: uploading.\n   * Thus, when the avatar editor's dropdown toggle button is clicked, we prompt\n   * the user to upload an avatar immediately.\n   *\n   * @param {Event} e\n   */\n  quickUpload(e) {\n    if (!this.attrs.user.avatarUrl()) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.openPicker();\n    }\n  }\n\n  /**\n   * Upload avatar using file picker\n   */\n  openPicker() {\n    if (this.loading) return;\n\n    // Create a hidden HTML input element and click on it so the user can select\n    // an avatar file. Once they have, we will upload it via the API.\n    const $input = $('<input type=\"file\">');\n\n    $input\n      .appendTo('body')\n      .hide()\n      .trigger('click')\n      .on('input', (e) => {\n        this.upload($(e.target)[0].files[0]);\n      });\n  }\n\n  /**\n   * Upload avatar\n   *\n   * @param {File} file\n   */\n  upload(file) {\n    if (this.loading) return;\n\n    const user = this.attrs.user;\n    const data = new FormData();\n    data.append('avatar', file);\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'POST',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n        serialize: (raw) => raw,\n        body: data,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * Remove the user's avatar.\n   */\n  remove() {\n    const user = this.attrs.user;\n\n    this.loading = true;\n    m.redraw();\n\n    app\n      .request({\n        method: 'DELETE',\n        url: `${app.forum.attribute('apiUrl')}/users/${user.id()}/avatar`,\n      })\n      .then(this.success.bind(this), this.failure.bind(this));\n  }\n\n  /**\n   * After a successful upload/removal, push the updated user data into the\n   * store, and force a recomputation of the user's avatar color.\n   *\n   * @param {Object} response\n   * @protected\n   */\n  success(response) {\n    app.store.pushPayload(response);\n    delete this.attrs.user.avatarColor;\n\n    this.loading = false;\n    m.redraw();\n  }\n\n  /**\n   * If avatar upload/removal fails, stop loading.\n   *\n   * @param {Object} response\n   * @protected\n   */\n  failure(response) {\n    this.loading = false;\n    m.redraw();\n  }\n}\n\nwindow.flreg.add('components/AvatarEditor', AvatarEditor)","import Component from '../../common/Component';\nimport humanTime from '../../common/utils/humanTime';\nimport ItemList from '../../common/utils/ItemList';\nimport UserControls from '../utils/UserControls';\nimport avatar from '../../common/helpers/avatar';\nimport username from '../../common/helpers/username';\nimport icon from '../../common/helpers/icon';\nimport Dropdown from '../../common/components/Dropdown';\nimport Link from '../../common/components/Link';\nimport AvatarEditor from './AvatarEditor';\nimport listItems from '../../common/helpers/listItems';\n\n/**\n * The `UserCard` component displays a user's profile card. This is used both on\n * the `UserPage` (in the hero) and in discussions, shown when hovering over a\n * post author.\n *\n * ### Attrs\n *\n * - `user`\n * - `className`\n * - `editable`\n * - `controlsButtonClassName`\n */\nexport default class UserCard extends Component {\n  view() {\n    const user = this.attrs.user;\n    const controls = new UserControls().controls(user, this).toArray();\n    const color = user.color();\n    const badges = user.badges().toArray();\n\n    return (\n      <div className={'UserCard ' + (this.attrs.className || '')} style={color ? { backgroundColor: color } : ''}>\n        <div className=\"darkenBackground\">\n          <div className=\"container\">\n            {controls.length\n              ? Dropdown.component(\n                  {\n                    className: 'UserCard-controls App-primaryControl',\n                    menuClassName: 'Dropdown-menu--right',\n                    buttonClassName: this.attrs.controlsButtonClassName,\n                    label: app.translator.trans('core.forum.user_controls.button'),\n                    accessibleToggleLabel: app.translator.trans('core.forum.user_controls.toggle_dropdown_accessible_label'),\n                    icon: 'fas fa-ellipsis-v',\n                  },\n                  controls\n                )\n              : ''}\n\n            <div className=\"UserCard-profile\">\n              <h2 className=\"UserCard-identity\">\n                {this.attrs.editable ? (\n                  [AvatarEditor.component({ user, className: 'UserCard-avatar' }), username(user)]\n                ) : (\n                  <Link href={app.route.user(user)}>\n                    <div className=\"UserCard-avatar\">{avatar(user)}</div>\n                    {username(user)}\n                  </Link>\n                )}\n              </h2>\n\n              {badges.length ? <ul className=\"UserCard-badges badges\">{listItems(badges)}</ul> : ''}\n\n              <ul className=\"UserCard-info\">{listItems(this.infoItems().toArray())}</ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Build an item list of tidbits of info to show on this user's profile.\n   *\n   * @return {ItemList}\n   */\n  infoItems() {\n    const items = new ItemList();\n    const user = this.attrs.user;\n    const lastSeenAt = user.lastSeenAt();\n\n    if (lastSeenAt) {\n      const online = user.isOnline();\n\n      items.add(\n        'lastSeen',\n        <span className={'UserCard-lastSeen' + (online ? ' online' : '')}>\n          {online\n            ? [icon('fas fa-circle'), ' ', app.translator.trans('core.forum.user.online_text')]\n            : [icon('far fa-clock'), ' ', humanTime(lastSeenAt)]}\n        </span>\n      );\n    }\n\n    items.add(\n      'joined',\n      <span className=\"UserCard-joinedAt\">{app.translator.trans('core.forum.user.joined_date_text', { ago: humanTime(user.joinTime()) })}</span>\n    );\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/UserCard', UserCard)","import Component from '../../common/Component';\n\n/**\n * The `AffixedSidebar` component uses Bootstrap's \"affix\" plugin to keep a\n * sidebar navigation at the top of the viewport when scrolling.\n *\n * ### Children\n *\n * The component must wrap an element that itself wraps an <ul> element, which\n * will be \"affixed\".\n *\n * @see https://getbootstrap.com/docs/3.4/javascript/#affix\n */\nexport default class AffixedSidebar extends Component {\n  view(vnode) {\n    return vnode.children[0];\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // Register the affix plugin to execute on every window resize (and trigger)\n    this.boundOnresize = this.onresize.bind(this);\n    $(window).on('resize', this.boundOnresize).resize();\n  }\n\n  onremove() {\n    $(window).off('resize', this.boundOnresize);\n  }\n\n  onresize() {\n    const $sidebar = this.$();\n    const $header = $('#header');\n    const $footer = $('#footer');\n    const $affixElement = $sidebar.find('> ul');\n\n    $(window).off('.affix');\n    $affixElement.removeClass('affix affix-top affix-bottom').removeData('bs.affix');\n\n    // Don't affix the sidebar if it is taller than the viewport (otherwise\n    // there would be no way to scroll through its content).\n    if ($sidebar.outerHeight(true) > $(window).height() - $header.outerHeight(true)) return;\n\n    $affixElement.affix({\n      offset: {\n        top: () => $sidebar.offset().top - $header.outerHeight(true) - parseInt($sidebar.css('margin-top'), 10),\n        bottom: () => (this.bottom = $footer.outerHeight(true)),\n      },\n    });\n  }\n}\n\nwindow.flreg.add('components/AffixedSidebar', AffixedSidebar)","import Page from '../../common/components/Page';\nimport ItemList from '../../common/utils/ItemList';\nimport UserCard from './UserCard';\nimport LoadingIndicator from '../../common/components/LoadingIndicator';\nimport SelectDropdown from '../../common/components/SelectDropdown';\nimport LinkButton from '../../common/components/LinkButton';\nimport Separator from '../../common/components/Separator';\nimport listItems from '../../common/helpers/listItems';\nimport AffixedSidebar from './AffixedSidebar';\n\n/**\n * The `UserPage` component shows a user's profile. It can be extended to show\n * content inside of the content area. See `ActivityPage` and `SettingsPage` for\n * examples.\n *\n * @abstract\n */\nexport default class UserPage extends Page {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    /**\n     * The user this page is for.\n     *\n     * @type {User}\n     */\n    this.user = null;\n\n    this.bodyClass = 'App--user';\n  }\n\n  view() {\n    return (\n      <div className=\"UserPage\">\n        {this.user\n          ? [\n              <UserCard\n                user={this.user}\n                className=\"Hero UserHero\"\n                editable={this.user.canEdit() || this.user === app.session.user}\n                controlsButtonClassName=\"Button\"\n              />,\n              <div className=\"container\">\n                <div className=\"sideNavContainer\">\n                  <AffixedSidebar>\n                    <nav className=\"sideNav UserPage-nav\">\n                      <ul>{listItems(this.sidebarItems().toArray())}</ul>\n                    </nav>\n                  </AffixedSidebar>\n                  <div className=\"sideNavOffset UserPage-content\">{this.content()}</div>\n                </div>\n              </div>,\n            ]\n          : [<LoadingIndicator className=\"LoadingIndicator--block\" />]}\n      </div>\n    );\n  }\n\n  /**\n   * Get the content to display in the user page.\n   *\n   * @return {VirtualElement}\n   */\n  content() {}\n\n  /**\n   * Initialize the component with a user, and trigger the loading of their\n   * activity feed.\n   *\n   * @param {User} user\n   * @protected\n   */\n  show(user) {\n    this.user = user;\n\n    app.current.set('user', user);\n\n    app.setTitle(user.displayName());\n\n    m.redraw();\n  }\n\n  /**\n   * Given a username, load the user's profile from the store, or make a request\n   * if we don't have it yet. Then initialize the profile page with that user.\n   *\n   * @param {String} username\n   */\n  loadUser(username) {\n    const lowercaseUsername = username.toLowerCase();\n\n    // Load the preloaded user object, if any, into the global app store\n    // We don't use the output of the method because it returns raw JSON\n    // instead of the parsed models\n    app.preloadedApiDocument();\n\n    app.store.all('users').some((user) => {\n      if ((user.username().toLowerCase() === lowercaseUsername || user.id() === username) && user.joinTime()) {\n        this.show(user);\n        return true;\n      }\n    });\n\n    if (!this.user) {\n      app.store.find('users', username, { bySlug: true }).then(this.show.bind(this));\n    }\n  }\n\n  /**\n   * Build an item list for the content of the sidebar.\n   *\n   * @return {ItemList}\n   */\n  sidebarItems() {\n    const items = new ItemList();\n\n    items.add(\n      'nav',\n      <SelectDropdown className=\"App-titleControl\" buttonClassName=\"Button\">\n        {this.navItems().toArray()}\n      </SelectDropdown>\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the navigation in the sidebar.\n   *\n   * @return {ItemList}\n   */\n  navItems() {\n    const items = new ItemList();\n    const user = this.user;\n\n    items.add(\n      'posts',\n      <LinkButton href={app.route('user.posts', { username: user.username() })} icon=\"far fa-comment\">\n        {app.translator.trans('core.forum.user.posts_link')} <span className=\"Button-badge\">{user.commentCount()}</span>\n      </LinkButton>,\n      100\n    );\n\n    items.add(\n      'discussions',\n      <LinkButton href={app.route('user.discussions', { username: user.username() })} icon=\"fas fa-bars\">\n        {app.translator.trans('core.forum.user.discussions_link')} <span className=\"Button-badge\">{user.discussionCount()}</span>\n      </LinkButton>,\n      90\n    );\n\n    if (app.session.user === user) {\n      items.add('separator', <Separator />, -90);\n      items.add(\n        'settings',\n        <LinkButton href={app.route('settings')} icon=\"fas fa-cog\">\n          {app.translator.trans('core.forum.user.settings_link')}\n        </LinkButton>,\n        -100\n      );\n    }\n\n    return items;\n  }\n}\n\nwindow.flreg.add('components/UserPage', UserPage)"],"sourceRoot":""}