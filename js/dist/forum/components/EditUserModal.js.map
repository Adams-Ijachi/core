{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/EditUserModal.js"],"names":["EditUserModal","oninit","vnode","user","this","attrs","username","Stream","email","isEmailConfirmed","setPassword","password","groups","app","store","all","filter","group","Group","indexOf","id","forEach","className","title","translator","trans","content","fields","toArray","length","items","ItemList","session","canEditCredentials","add","placeholder","extractText","bidi","disabled","nonAdminEditingAdmin","userIsAdmin","Button","loading","onclick","activate","bind","type","onchange","e","target","checked","m","redraw","sync","$","select","name","canEditGroups","Object","keys","map","getById","GroupBadge","label","nameSingular","data","save","errorHandler","onerror","then","relationships","onsubmit","preventDefault","hide","some","g","Modal","window","flreg"],"mappings":"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","file":"forum/components/EditUserModal.js","sourcesContent":["import Modal from '../../common/components/Modal';\nimport Button from '../../common/components/Button';\nimport GroupBadge from '../../common/components/GroupBadge';\nimport Group from '../../common/models/Group';\nimport extractText from '../../common/utils/extractText';\nimport ItemList from '../../common/utils/ItemList';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `EditUserModal` component displays a modal dialog with a login form.\n */\nexport default class EditUserModal extends Modal {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    const user = this.attrs.user;\n\n    this.username = Stream(user.username() || '');\n    this.email = Stream(user.email() || '');\n    this.isEmailConfirmed = Stream(user.isEmailConfirmed() || false);\n    this.setPassword = Stream(false);\n    this.password = Stream(user.password() || '');\n    this.groups = {};\n\n    app.store\n      .all('groups')\n      .filter((group) => [Group.GUEST_ID, Group.MEMBER_ID].indexOf(group.id()) === -1)\n      .forEach((group) => (this.groups[group.id()] = Stream(user.groups().indexOf(group) !== -1)));\n  }\n\n  className() {\n    return 'EditUserModal Modal--small';\n  }\n\n  title() {\n    return app.translator.trans('core.forum.edit_user.title');\n  }\n\n  content() {\n    const fields = this.fields().toArray();\n    return (\n      <div className=\"Modal-body\">\n        {fields.length > 1 ? <div className=\"Form\">{this.fields().toArray()}</div> : app.translator.trans('core.forum.edit_user.nothing_available')}\n      </div>\n    );\n  }\n\n  fields() {\n    const items = new ItemList();\n\n    if (app.session.user.canEditCredentials()) {\n      items.add(\n        'username',\n        <div className=\"Form-group\">\n          <label>{app.translator.trans('core.forum.edit_user.username_heading')}</label>\n          <input\n            className=\"FormControl\"\n            placeholder={extractText(app.translator.trans('core.forum.edit_user.username_label'))}\n            bidi={this.username}\n            disabled={this.nonAdminEditingAdmin()}\n          />\n        </div>,\n        40\n      );\n\n      if (app.session.user !== this.attrs.user) {\n        items.add(\n          'email',\n          <div className=\"Form-group\">\n            <label>{app.translator.trans('core.forum.edit_user.email_heading')}</label>\n            <div>\n              <input\n                className=\"FormControl\"\n                placeholder={extractText(app.translator.trans('core.forum.edit_user.email_label'))}\n                bidi={this.email}\n                disabled={this.nonAdminEditingAdmin()}\n              />\n            </div>\n            {!this.isEmailConfirmed() && this.userIsAdmin(app.session.user) ? (\n              <div>\n                {Button.component(\n                  {\n                    className: 'Button Button--block',\n                    loading: this.loading,\n                    onclick: this.activate.bind(this),\n                  },\n                  app.translator.trans('core.forum.edit_user.activate_button')\n                )}\n              </div>\n            ) : (\n              ''\n            )}\n          </div>,\n          30\n        );\n\n        items.add(\n          'password',\n          <div className=\"Form-group\">\n            <label>{app.translator.trans('core.forum.edit_user.password_heading')}</label>\n            <div>\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  onchange={(e) => {\n                    this.setPassword(e.target.checked);\n                    m.redraw.sync();\n                    if (e.target.checked) this.$('[name=password]').select();\n                    e.redraw = false;\n                  }}\n                  disabled={this.nonAdminEditingAdmin()}\n                />\n                {app.translator.trans('core.forum.edit_user.set_password_label')}\n              </label>\n              {this.setPassword() ? (\n                <input\n                  className=\"FormControl\"\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder={extractText(app.translator.trans('core.forum.edit_user.password_label'))}\n                  bidi={this.password}\n                  disabled={this.nonAdminEditingAdmin()}\n                />\n              ) : (\n                ''\n              )}\n            </div>\n          </div>,\n          20\n        );\n      }\n    }\n\n    if (app.session.user.canEditGroups()) {\n      items.add(\n        'groups',\n        <div className=\"Form-group EditUserModal-groups\">\n          <label>{app.translator.trans('core.forum.edit_user.groups_heading')}</label>\n          <div>\n            {Object.keys(this.groups)\n              .map((id) => app.store.getById('groups', id))\n              .map((group) => (\n                <label className=\"checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    bidi={this.groups[group.id()]}\n                    disabled={group.id() === Group.ADMINISTRATOR_ID && (this.attrs.user === app.session.user || !this.userIsAdmin(app.session.user))}\n                  />\n                  {GroupBadge.component({ group, label: '' })} {group.nameSingular()}\n                </label>\n              ))}\n          </div>\n        </div>,\n        10\n      );\n    }\n\n    items.add(\n      'submit',\n      <div className=\"Form-group\">\n        {Button.component(\n          {\n            className: 'Button Button--primary',\n            type: 'submit',\n            loading: this.loading,\n          },\n          app.translator.trans('core.forum.edit_user.submit_button')\n        )}\n      </div>,\n      -10\n    );\n\n    return items;\n  }\n\n  activate() {\n    this.loading = true;\n    const data = {\n      username: this.username(),\n      isEmailConfirmed: true,\n    };\n    this.attrs.user\n      .save(data, { errorHandler: this.onerror.bind(this) })\n      .then(() => {\n        this.isEmailConfirmed(true);\n        this.loading = false;\n        m.redraw();\n      })\n      .catch(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n\n  data() {\n    const data = {\n      relationships: {},\n    };\n\n    if (this.attrs.user.canEditCredentials() && !this.nonAdminEditingAdmin()) {\n      data.username = this.username();\n\n      if (app.session.user !== this.attrs.user) {\n        data.email = this.email();\n      }\n\n      if (this.setPassword()) {\n        data.password = this.password();\n      }\n    }\n\n    if (this.attrs.user.canEditGroups()) {\n      data.relationships.groups = Object.keys(this.groups)\n        .filter((id) => this.groups[id]())\n        .map((id) => app.store.getById('groups', id));\n    }\n\n    return data;\n  }\n\n  onsubmit(e) {\n    e.preventDefault();\n\n    this.loading = true;\n\n    this.attrs.user\n      .save(this.data(), { errorHandler: this.onerror.bind(this) })\n      .then(this.hide.bind(this))\n      .catch(() => {\n        this.loading = false;\n        m.redraw();\n      });\n  }\n\n  nonAdminEditingAdmin() {\n    return this.userIsAdmin(this.attrs.user) && !this.userIsAdmin(app.session.user);\n  }\n\n  /**\n   * @internal\n   * @protected\n   */\n  userIsAdmin(user) {\n    return user.groups().some((g) => g.id() === Group.ADMINISTRATOR_ID);\n  }\n}\n\nwindow.flreg.add('components/EditUserModal', EditUserModal)"],"sourceRoot":""}