{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/DiscussionComposer.js"],"names":["DiscussionComposer","initAttrs","attrs","placeholder","extractText","app","translator","trans","submitLabel","confirmExit","titlePlaceholder","className","oninit","vnode","this","composer","fields","title","Stream","headerItems","items","add","bidi","disabled","onkeydown","bind","e","which","preventDefault","editor","moveCursorTo","redraw","hasChanges","content","data","onsubmit","loading","store","createRecord","save","then","discussion","hide","discussions","refresh","deferClear","m","route","set","loaded","ComposerBody"],"mappings":"qLAeqBA,E,6EACZC,UAAP,SAAiBC,GACf,EAAMD,UAAN,UAAgBC,GAEhBA,EAAMC,YAAcD,EAAMC,cAAeC,OAAYC,IAAIC,WAAWC,MAAM,oDAC1EL,EAAMM,YAAcN,EAAMM,aAAeH,IAAIC,WAAWC,MAAM,gDAC9DL,EAAMO,YAAcP,EAAMO,cAAeL,OAAYC,IAAIC,WAAWC,MAAM,wDAC1EL,EAAMQ,iBAAmBR,EAAMQ,mBAAoBN,OAAYC,IAAIC,WAAWC,MAAM,qDACpFL,EAAMS,UAAY,4B,2BAGpBC,OAAA,SAAOC,GACL,YAAMD,OAAN,UAAaC,GAEbC,KAAKC,SAASC,OAAOC,MAAQH,KAAKC,SAASC,OAAOC,QAASC,OAAO,IAOlEJ,KAAKG,MAAQH,KAAKC,SAASC,OAAOC,O,EAGpCE,YAAA,WACE,IAAMC,EAAQ,EAAH,UAASD,YAAT,WAiBX,OAfAC,EAAMC,IAAI,QAAS,YAAKhB,IAAIC,WAAWC,MAAM,yCAA+C,KAE5Fa,EAAMC,IACJ,kBACA,YACE,WACEV,UAAU,cACVW,KAAMR,KAAKG,MACXd,YAAaW,KAAKZ,MAAMQ,iBACxBa,WAAYT,KAAKZ,MAAMqB,SACvBC,UAAWV,KAAKU,UAAUC,KAAKX,UAK9BM,G,EASTI,UAAA,SAAUE,GACQ,KAAZA,EAAEC,QAEJD,EAAEE,iBACFd,KAAKC,SAASc,OAAOC,aAAa,IAGpCJ,EAAEK,QAAS,G,EAGbC,WAAA,WACE,OAAOlB,KAAKG,SAAWH,KAAKC,SAASC,OAAOiB,W,EAQ9CC,KAAA,WACE,MAAO,CACLjB,MAAOH,KAAKG,QACZgB,QAASnB,KAAKC,SAASC,OAAOiB,Y,EAIlCE,SAAA,WAAW,WACTrB,KAAKsB,SAAU,EAEf,IAAMF,EAAOpB,KAAKoB,OAElB7B,IAAIgC,MACDC,aAAa,eACbC,KAAKL,GACLM,MAAK,SAACC,GACL,EAAK1B,SAAS2B,OACdrC,IAAIsC,YAAYC,QAAQ,CAAEC,YAAY,IACtCC,EAAEC,MAAMC,IAAI3C,IAAI0C,MAAMN,WAAWA,MAChC3B,KAAKmC,OAAOxB,KAAKX,Q,GAzFsBoC","file":"forum/components/DiscussionComposer.js","sourcesContent":["import ComposerBody from './ComposerBody';\nimport extractText from '../../common/utils/extractText';\nimport Stream from '../../common/utils/Stream';\n\n/**\n * The `DiscussionComposer` component displays the composer content for starting\n * a new discussion. It adds a text field as a header control so the user can\n * enter the title of their discussion. It also overrides the `submit` and\n * `willExit` actions to account for the title.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `titlePlaceholder`\n */\nexport default class DiscussionComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n\n    attrs.placeholder = attrs.placeholder || extractText(app.translator.trans('core.forum.composer_discussion.body_placeholder'));\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_discussion.submit_button');\n    attrs.confirmExit = attrs.confirmExit || extractText(app.translator.trans('core.forum.composer_discussion.discard_confirmation'));\n    attrs.titlePlaceholder = attrs.titlePlaceholder || extractText(app.translator.trans('core.forum.composer_discussion.title_placeholder'));\n    attrs.className = 'ComposerBody--discussion';\n  }\n\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.composer.fields.title = this.composer.fields.title || Stream('');\n\n    /**\n     * The value of the title input.\n     *\n     * @type {Function}\n     */\n    this.title = this.composer.fields.title;\n  }\n\n  headerItems() {\n    const items = super.headerItems();\n\n    items.add('title', <h3>{app.translator.trans('core.forum.composer_discussion.title')}</h3>, 100);\n\n    items.add(\n      'discussionTitle',\n      <h3>\n        <input\n          className=\"FormControl\"\n          bidi={this.title}\n          placeholder={this.attrs.titlePlaceholder}\n          disabled={!!this.attrs.disabled}\n          onkeydown={this.onkeydown.bind(this)}\n        />\n      </h3>\n    );\n\n    return items;\n  }\n\n  /**\n   * Handle the title input's keydown event. When the return key is pressed,\n   * move the focus to the start of the text editor.\n   *\n   * @param {Event} e\n   */\n  onkeydown(e) {\n    if (e.which === 13) {\n      // Return\n      e.preventDefault();\n      this.composer.editor.moveCursorTo(0);\n    }\n\n    e.redraw = false;\n  }\n\n  hasChanges() {\n    return this.title() || this.composer.fields.content();\n  }\n\n  /**\n   * Get the data to submit to the server when the discussion is saved.\n   *\n   * @return {Object}\n   */\n  data() {\n    return {\n      title: this.title(),\n      content: this.composer.fields.content(),\n    };\n  }\n\n  onsubmit() {\n    this.loading = true;\n\n    const data = this.data();\n\n    app.store\n      .createRecord('discussions')\n      .save(data)\n      .then((discussion) => {\n        this.composer.hide();\n        app.discussions.refresh({ deferClear: true });\n        m.route.set(app.route.discussion(discussion));\n      }, this.loaded.bind(this));\n  }\n}\n//Flarum Asynchronous Module\n"],"sourceRoot":""}