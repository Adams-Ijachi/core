{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/NotificationsDropdown.js"],"names":["NotificationsDropdown","initAttrs","attrs","className","buttonClassName","menuClassName","label","app","translator","trans","icon","accessibleToggleLabel","getButton","newNotifications","this","getNewCount","vdom","title","onclick","bind","getButtonContent","unread","getUnreadCount","getMenu","NotificationList","menuClick","showing","state","then","m","redraw","drawer","isOpen","goToRoute","load","route","set","session","user","unreadNotificationCount","newNotificationCount","e","shiftKey","metaKey","ctrlKey","which","stopPropagation","Dropdown","window","flreg","add"],"mappings":"8JAGqBA,E,6EACZC,UAAP,SAAiBC,GACfA,EAAMC,UAAYD,EAAMC,WAAa,wBACrCD,EAAME,gBAAkBF,EAAME,iBAAmB,sBACjDF,EAAMG,cAAgBH,EAAMG,eAAiB,uBAC7CH,EAAMI,MAAQJ,EAAMI,OAASC,IAAIC,WAAWC,MAAM,oCAClDP,EAAMQ,KAAOR,EAAMQ,MAAQ,cAE3BR,EAAMS,sBAAwBT,EAAMS,uBAAyBJ,IAAIC,WAAWC,MAAM,6DAElF,EAAMR,UAAN,UAAgBC,I,2BAGlBU,UAAA,WACE,IAAMC,EAAmBC,KAAKC,cACxBC,EAAO,EAAH,UAASJ,UAAT,WAOV,OALAI,EAAKd,MAAMe,MAAQH,KAAKZ,MAAMI,MAE9BU,EAAKd,MAAMC,WAAaU,EAAmB,OAAS,GACpDG,EAAKd,MAAMgB,QAAUJ,KAAKI,QAAQC,KAAKL,MAEhCE,G,EAGTI,iBAAA,WACE,IAAMC,EAASP,KAAKQ,iBAEpB,MAAO,EACLZ,OAAKI,KAAKZ,MAAMQ,KAAM,CAAEP,UAAW,gBACnCkB,EAAS,UAAMlB,UAAU,gCAAgCkB,GAAiB,GAC1E,UAAMlB,UAAU,gBAAgBW,KAAKZ,MAAMI,S,EAI/CiB,QAAA,WACE,IAAMC,EAAmBV,KAAKU,iBAE9B,OACE,SAAKrB,UAAW,iBAAmBW,KAAKZ,MAAMG,cAAea,QAASJ,KAAKW,UAAUN,KAAKL,OACvFA,KAAKY,SAAWF,EAAmB,EAACA,EAAD,CAAkBG,MAAOb,KAAKZ,MAAMyB,QAAY,K,EAK1FT,QAAA,WAAU,WACR,6BAAyFU,MAAK,SAACJ,GAC7F,EAAKA,iBAAmBA,EAAgB,QACxCK,EAAEC,YAGAvB,IAAIwB,OAAOC,SACblB,KAAKmB,YAELnB,KAAKZ,MAAMyB,MAAMO,Q,EAIrBD,UAAA,WACEJ,EAAEM,MAAMC,IAAI7B,IAAI4B,MAAM,mB,EAGxBb,eAAA,WACE,OAAOf,IAAI8B,QAAQC,KAAKC,2B,EAG1BxB,YAAA,WACE,OAAOR,IAAI8B,QAAQC,KAAKE,wB,EAG1Bf,UAAA,SAAUgB,IAGJA,EAAEC,UAAYD,EAAEE,SAAWF,EAAEG,SAAuB,IAAZH,EAAEI,QAAaJ,EAAEK,mB,GAzEdC,KA6EnDC,OAAOC,MAAMC,IAAI,mCAAoClD","file":"forum/components/NotificationsDropdown.js","sourcesContent":["import Dropdown from '../../common/components/Dropdown';\nimport icon from '../../common/helpers/icon';\n\nexport default class NotificationsDropdown extends Dropdown {\n  static initAttrs(attrs) {\n    attrs.className = attrs.className || 'NotificationsDropdown';\n    attrs.buttonClassName = attrs.buttonClassName || 'Button Button--flat';\n    attrs.menuClassName = attrs.menuClassName || 'Dropdown-menu--right';\n    attrs.label = attrs.label || app.translator.trans('core.forum.notifications.tooltip');\n    attrs.icon = attrs.icon || 'fas fa-bell';\n    // For best a11y support, both `title` and `aria-label` should be used\n    attrs.accessibleToggleLabel = attrs.accessibleToggleLabel || app.translator.trans('core.forum.notifications.toggle_dropdown_accessible_label');\n\n    super.initAttrs(attrs);\n  }\n\n  getButton() {\n    const newNotifications = this.getNewCount();\n    const vdom = super.getButton();\n\n    vdom.attrs.title = this.attrs.label;\n\n    vdom.attrs.className += newNotifications ? ' new' : '';\n    vdom.attrs.onclick = this.onclick.bind(this);\n\n    return vdom;\n  }\n\n  getButtonContent() {\n    const unread = this.getUnreadCount();\n\n    return [\n      icon(this.attrs.icon, { className: 'Button-icon' }),\n      unread ? <span className=\"NotificationsDropdown-unread\">{unread}</span> : '',\n      <span className=\"Button-label\">{this.attrs.label}</span>,\n    ];\n  }\n\n  getMenu() {\n    const NotificationList = this.NotificationList;\n\n    return (\n      <div className={'Dropdown-menu ' + this.attrs.menuClassName} onclick={this.menuClick.bind(this)}>\n        {this.showing && NotificationList ? <NotificationList state={this.attrs.state} /> : ''}\n      </div>\n    );\n  }\n\n  onclick() {\n    import(/* webpackChunkName: \"forum/components/NotificationList\" */ './NotificationList').then((NotificationList) => {\n      this.NotificationList = NotificationList.default;\n      m.redraw();\n    });\n\n    if (app.drawer.isOpen()) {\n      this.goToRoute();\n    } else {\n      this.attrs.state.load();\n    }\n  }\n\n  goToRoute() {\n    m.route.set(app.route('notifications'));\n  }\n\n  getUnreadCount() {\n    return app.session.user.unreadNotificationCount();\n  }\n\n  getNewCount() {\n    return app.session.user.newNotificationCount();\n  }\n\n  menuClick(e) {\n    // Don't close the notifications dropdown if the user is opening a link in a\n    // new tab or window.\n    if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) e.stopPropagation();\n  }\n}\n\nwindow.flreg.add('components/NotificationsDropdown', NotificationsDropdown)"],"sourceRoot":""}