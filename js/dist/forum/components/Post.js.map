{"version":3,"sources":["webpack://@flarum/core/./src/forum/components/EditPostComposer.js","webpack://@flarum/core/./src/forum/utils/PostControls.js","webpack://@flarum/core/./src/forum/components/Post.js"],"names":["minimizeComposerIfFullScreen","e","app","composer","isFullScreen","minimize","stopPropagation","EditPostComposer","initAttrs","attrs","submitLabel","translator","trans","confirmExit","originalContent","post","content","user","editedContent","headerItems","items","this","add","icon","href","route","discussion","number","onclick","title","jumpToPreview","m","set","data","fields","onsubmit","loading","save","then","viewingDiscussion","current","get","goToNumber","alert","viewButton","Button","className","alerts","dismiss","show","type","controls","hide","loaded","bind","ComposerBody","window","flreg","PostControls","context","ItemList","forEach","section","toArray","length","item","itemName","Separator","userControls","moderationControls","contentType","canEdit","isHidden","editAction","destructiveControls","canHide","restoreAction","canDelete","deleteAction","hideAction","Promise","resolve","load","confirm","extractText","pushAttributes","hiddenAt","Date","hiddenUser","session","redraw","removePost","id","postIds","discussions","removeDiscussion","history","back","Post","oninit","vnode","subtree","SubtreeRetainer","freshness","controlsOpen","view","elementAttrs","classes","join","listItems","actionItems","Dropdown","buttonClassName","menuClassName","onshow","$","addClass","onhide","removeClass","accessibleToggleLabel","footerItems","onbeforeupdate","needsRebuild","onupdate","$actions","$controls","toggleClass","hasClass","existing","split","concat","push","Component"],"mappings":"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","file":"forum/components/Post.js","sourcesContent":["import ComposerBody from './ComposerBody';\nimport Button from '../../common/components/Button';\nimport Link from '../../common/components/Link';\nimport icon from '../../common/helpers/icon';\n\nfunction minimizeComposerIfFullScreen(e) {\n  if (app.composer.isFullScreen()) {\n    app.composer.minimize();\n    e.stopPropagation();\n  }\n}\n\n/**\n * The `EditPostComposer` component displays the composer content for editing a\n * post. It sets the initial content to the content of the post that is being\n * edited, and adds a header control to indicate which post is being edited.\n *\n * ### Attrs\n *\n * - All of the attrs for ComposerBody\n * - `post`\n */\nexport default class EditPostComposer extends ComposerBody {\n  static initAttrs(attrs) {\n    super.initAttrs(attrs);\n\n    attrs.submitLabel = attrs.submitLabel || app.translator.trans('core.forum.composer_edit.submit_button');\n    attrs.confirmExit = attrs.confirmExit || app.translator.trans('core.forum.composer_edit.discard_confirmation');\n    attrs.originalContent = attrs.originalContent || attrs.post.content();\n    attrs.user = attrs.user || attrs.post.user();\n\n    attrs.post.editedContent = attrs.originalContent;\n  }\n\n  headerItems() {\n    const items = super.headerItems();\n    const post = this.attrs.post;\n\n    items.add(\n      'title',\n      <h3>\n        {icon('fas fa-pencil-alt')}{' '}\n        <Link href={app.route.discussion(post.discussion(), post.number())} onclick={minimizeComposerIfFullScreen}>\n          {app.translator.trans('core.forum.composer_edit.post_link', { number: post.number(), discussion: post.discussion().title() })}\n        </Link>\n      </h3>\n    );\n\n    return items;\n  }\n\n  /**\n   * Jump to the preview when triggered by the text editor.\n   */\n  jumpToPreview(e) {\n    minimizeComposerIfFullScreen(e);\n\n    m.route.set(app.route.post(this.attrs.post));\n  }\n\n  /**\n   * Get the data to submit to the server when the post is saved.\n   *\n   * @return {Object}\n   */\n  data() {\n    return {\n      content: this.composer.fields.content(),\n    };\n  }\n\n  onsubmit() {\n    const discussion = this.attrs.post.discussion();\n\n    this.loading = true;\n\n    const data = this.data();\n\n    this.attrs.post.save(data).then((post) => {\n      // If we're currently viewing the discussion which this edit was made\n      // in, then we can scroll to the post.\n      if (app.viewingDiscussion(discussion)) {\n        app.current.get('stream').goToNumber(post.number());\n      } else {\n        // Otherwise, we'll create an alert message to inform the user that\n        // their edit has been made, containing a button which will\n        // transition to their edited post when clicked.\n        let alert;\n        const viewButton = Button.component(\n          {\n            className: 'Button Button--link',\n            onclick: () => {\n              m.route.set(app.route.post(post));\n              app.alerts.dismiss(alert);\n            },\n          },\n          app.translator.trans('core.forum.composer_edit.view_button')\n        );\n        alert = app.alerts.show(\n          {\n            type: 'success',\n            controls: [viewButton],\n          },\n          app.translator.trans('core.forum.composer_edit.edited_message')\n        );\n      }\n\n      this.composer.hide();\n    }, this.loaded.bind(this));\n  }\n}\n\nwindow.flreg.add('components/EditPostComposer', EditPostComposer)","import EditPostComposer from '../components/EditPostComposer';\nimport Button from '../../common/components/Button';\nimport Separator from '../../common/components/Separator';\nimport ItemList from '../../common/utils/ItemList';\nimport extractText from '../../common/utils/extractText';\n\n/**\n * The `PostControls` utility constructs a list of buttons for a post which\n * perform actions on it.\n */\nexport default class PostControls {\n  /**\n   * Get a list of controls for a post.\n   *\n   * @param {Post} post\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @public\n   */\n  controls(post, context) {\n    const items = new ItemList();\n\n    ['user', 'moderation', 'destructive'].forEach((section) => {\n      const controls = this[section + 'Controls'](post, context).toArray();\n      if (controls.length) {\n        controls.forEach((item) => items.add(item.itemName, item));\n        items.add(section + 'Separator', Separator.component());\n      }\n    });\n\n    return items;\n  }\n\n  /**\n   * Get controls for a post pertaining to the current user (e.g. report).\n   *\n   * @param {Post} post\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  userControls(post, context) {\n    return new ItemList();\n  }\n\n  /**\n   * Get controls for a post pertaining to moderation (e.g. edit).\n   *\n   * @param {Post} post\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  moderationControls(post, context) {\n    const items = new ItemList();\n\n    if (post.contentType() === 'comment' && post.canEdit()) {\n      if (!post.isHidden()) {\n        items.add(\n          'edit',\n          Button.component(\n            {\n              icon: 'fas fa-pencil-alt',\n              onclick: this.editAction.bind(post),\n            },\n            app.translator.trans('core.forum.post_controls.edit_button')\n          )\n        );\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * Get controls for a post that are destructive (e.g. delete).\n   *\n   * @param {Post} post\n   * @param {*} context The parent component under which the controls menu will\n   *     be displayed.\n   * @return {ItemList}\n   * @protected\n   */\n  destructiveControls(post, context) {\n    const items = new ItemList();\n\n    if (post.contentType() === 'comment' && !post.isHidden()) {\n      if (post.canHide()) {\n        items.add(\n          'hide',\n          Button.component(\n            {\n              icon: 'far fa-trash-alt',\n              onclick: this.hideAction.bind(post),\n            },\n            app.translator.trans('core.forum.post_controls.delete_button')\n          )\n        );\n      }\n    } else {\n      if (post.contentType() === 'comment' && post.canHide()) {\n        items.add(\n          'restore',\n          Button.component(\n            {\n              icon: 'fas fa-reply',\n              onclick: this.restoreAction.bind(post),\n            },\n            app.translator.trans('core.forum.post_controls.restore_button')\n          )\n        );\n      }\n      if (post.canDelete()) {\n        items.add(\n          'delete',\n          Button.component(\n            {\n              icon: 'fas fa-times',\n              onclick: this.deleteAction.bind(post, context),\n            },\n            app.translator.trans('core.forum.post_controls.delete_forever_button')\n          )\n        );\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * Open the composer to edit a post.\n   *\n   * @return {Promise}\n   */\n  editAction() {\n    return new Promise((resolve) => {\n      app.composer.load(EditPostComposer, { post: this });\n      app.composer.show();\n\n      return resolve();\n    });\n  }\n\n  /**\n   * Hide a post.\n   *\n   * @return {Promise}\n   */\n  hideAction() {\n    if (!confirm(extractText(app.translator.trans('core.forum.post_controls.hide_confirmation')))) return;\n    this.pushAttributes({ hiddenAt: new Date(), hiddenUser: app.session.user });\n\n    return this.save({ isHidden: true }).then(() => m.redraw());\n  }\n\n  /**\n   * Restore a post.\n   *\n   * @return {Promise}\n   */\n  restoreAction() {\n    this.pushAttributes({ hiddenAt: null, hiddenUser: null });\n\n    return this.save({ isHidden: false }).then(() => m.redraw());\n  }\n\n  /**\n   * Delete a post.\n   *\n   * @return {Promise}\n   */\n  deleteAction(context) {\n    if (!confirm(extractText(app.translator.trans('core.forum.post_controls.delete_confirmation')))) return;\n    if (context) context.loading = true;\n\n    return this.delete()\n      .then(() => {\n        const discussion = this.discussion();\n\n        discussion.removePost(this.id());\n\n        // If this was the last post in the discussion, then we will assume that\n        // the whole discussion was deleted too.\n        if (!discussion.postIds().length) {\n          app.discussions.removeDiscussion(discussion);\n\n          if (app.viewingDiscussion(discussion)) {\n            app.history.back();\n          }\n        }\n      })\n      .catch(() => {})\n      .then(() => {\n        if (context) context.loading = false;\n        m.redraw();\n      });\n  }\n}\n\nwindow.flreg.add('utils/PostControls', PostControls)","import Component from '../../common/Component';\nimport SubtreeRetainer from '../../common/utils/SubtreeRetainer';\nimport Dropdown from '../../common/components/Dropdown';\nimport PostControls from '../utils/PostControls';\nimport listItems from '../../common/helpers/listItems';\nimport ItemList from '../../common/utils/ItemList';\n\n/**\n * The `Post` component displays a single post. The basic post template just\n * includes a controls dropdown; subclasses must implement `content` and `attrs`\n * methods.\n *\n * ### Attrs\n *\n * - `post`\n *\n * @abstract\n */\nexport default class Post extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.loading = false;\n\n    /**\n     * Set up a subtree retainer so that the post will not be redrawn\n     * unless new data comes in.\n     *\n     * @type {SubtreeRetainer}\n     */\n    this.subtree = new SubtreeRetainer(\n      () => this.attrs.post.freshness,\n      () => {\n        const user = this.attrs.post.user();\n        return user && user.freshness;\n      },\n      () => this.controlsOpen\n    );\n  }\n\n  view() {\n    const attrs = this.elementAttrs();\n\n    attrs.className = this.classes(attrs.className).join(' ');\n\n    const controls = new PostControls().controls(this.attrs.post, this).toArray();\n\n    return (\n      <article {...attrs}>\n        <div>\n          {this.content()}\n          <aside className=\"Post-actions\">\n            <ul>\n              {listItems(this.actionItems().toArray())}\n              {controls.length ? (\n                <li>\n                  <Dropdown\n                    className=\"Post-controls\"\n                    buttonClassName=\"Button Button--icon Button--flat\"\n                    menuClassName=\"Dropdown-menu--right\"\n                    icon=\"fas fa-ellipsis-h\"\n                    onshow={() => this.$('.Post-actions').addClass('open')}\n                    onhide={() => this.$('.Post-actions').removeClass('open')}\n                    accessibleToggleLabel={app.translator.trans('core.forum.post_controls.toggle_dropdown_accessible_label')}\n                  >\n                    {controls}\n                  </Dropdown>\n                </li>\n              ) : (\n                ''\n              )}\n            </ul>\n          </aside>\n          <footer className=\"Post-footer\">\n            <ul>{listItems(this.footerItems().toArray())}</ul>\n          </footer>\n        </div>\n      </article>\n    );\n  }\n\n  onbeforeupdate(vnode) {\n    super.onbeforeupdate(vnode);\n\n    return this.subtree.needsRebuild();\n  }\n\n  onupdate() {\n    const $actions = this.$('.Post-actions');\n    const $controls = this.$('.Post-controls');\n\n    $actions.toggleClass('open', $controls.hasClass('open'));\n  }\n\n  /**\n   * Get attributes for the post element.\n   *\n   * @return {Object}\n   */\n  elementAttrs() {\n    return {};\n  }\n\n  /**\n   * Get the post's content.\n   *\n   * @return {Array}\n   */\n  content() {\n    return [];\n  }\n\n  /**\n   * Get the post's classes.\n   *\n   * @param string classes\n   * @returns {string[]}\n   */\n  classes(existing) {\n    let classes = (existing || '').split(' ').concat(['Post']);\n\n    const user = this.attrs.post.user();\n    const discussion = this.attrs.post.discussion();\n\n    if (this.loading) {\n      classes.push('Post--loading');\n    }\n\n    if (user && user === app.session.user) {\n      classes.push('Post--by-actor');\n    }\n\n    if (user && user === discussion.user()) {\n      classes.push('Post--by-start-user');\n    }\n\n    return classes;\n  }\n\n  /**\n   * Build an item list for the post's actions.\n   *\n   * @return {ItemList}\n   */\n  actionItems() {\n    return new ItemList();\n  }\n\n  /**\n   * Build an item list for the post's footer.\n   *\n   * @return {ItemList}\n   */\n  footerItems() {\n    return new ItemList();\n  }\n}\n\nwindow.flreg.add('components/Post', Post)"],"sourceRoot":""}